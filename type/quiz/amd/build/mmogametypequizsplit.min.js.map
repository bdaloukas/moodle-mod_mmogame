{"version":3,"file":"mmogametypequizsplit.min.js","sources":["../src/mmogametypequizsplit.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mod_mmogame/mmogamesplit'], function(MmoGameSplit) {\n    return class MmoGameQuizSplit extends MmoGameSplit {\n\n        splits;\n        lastUpdateTime;\n        durationAnination = 500;\n        timeBeforeShowNextButtonCorrect = 500;\n        timeBeforeShowNextButtonError = 3000;\n\n        gateOpen(mmogameid, pin, kinduser, user, modelparams) {\n            while (this.body.firstChild) {\n                this.body.removeChild(this.body.firstChild);\n            }\n\n            let splitx = 1;\n            let splity = 1;\n            let isaduel = 0;\n\n            if (modelparams !== null) {\n                const params = JSON.parse(modelparams);\n                if (params.splitx !== undefined && params.splitx > 1) {\n                    splitx = params.splitx;\n                }\n                if (params.splity !== undefined && params.splity > 1) {\n                    splity = params.splity;\n                }\n                if (params.isaduel !== undefined && params.isaduel > 1) {\n                    isaduel = params.isaduel;\n                }\n            }\n            this.countX = splitx;\n            this.countY = splity;\n\n            this.countAll = this.countX * this.countY;\n            this.isaduel = (isaduel !== 0);\n            this.computeSizes(0);\n\n            super.gateOpen(mmogameid, pin, kinduser, user, splitx, splity);\n\n            window.addEventListener(\"gamepadconnected\", () => {\n                requestAnimationFrame(() => this.updateGamepads());\n            });\n        }\n\n        play() {\n            this.screen = 1;\n            this.updateDelay = 500;\n            this.computeSizes(0);\n            this.sendGetAttemptsSplit();\n        }\n\n        sendGetAttemptsSplit() {\n            let avatarids = [];\n            const info = this.info;\n            this.avatarfiles = [];\n            let splits = '';\n            for (let i = 0; i < this.splits.length; i++) {\n                const sp = this.splits[i];\n                avatarids.push(sp.avatarid);\n                this.avatarfiles.push(info.avatars[this.gategetavatar(i, sp.avatarpos)]);\n                if (i > 0) {\n                    splits += \",\";\n                }\n                splits += i;\n            }\n\n            require(['core/ajax'], (Ajax) => {\n                // Defining the parameters to be passed to the service\n                let params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    splits: splits,\n                    avatarids: avatarids.join(','),\n                    subcommand: '',\n                };\n                // Calling the service through the Moodle AJAX API\n                let getAttemptsSplit = Ajax.call([{\n                    methodname: 'mmogametype_quiz_get_attempts_split',\n                    args: params\n                }]);\n\n                // Handling the response\n                getAttemptsSplit[0].done(({avatars, attempts, attemptqueryids, querydefinitions,\n                                              queryanswerids, numattempts, answertexts, aduels,\n                                              aduelavatars, aduelcorrects, auserids, queryanswerids0, grades}) => {\n                    this.info = {\n                        avatars: avatars,\n                        attempts: attempts,\n                        paletteid: this.paletteid,\n                        attemptqueryids: attemptqueryids,\n                        numattempts: numattempts,\n                        querydefinitions: querydefinitions,\n                        queryanswerids: queryanswerids,\n                        answertexts: answertexts,\n                        aduels: aduels,\n                        aduelavatars: aduelavatars,\n                        aduelcorrects: aduelcorrects,\n                        auserids: auserids,\n                        queryanswerids0: queryanswerids0,\n                        grades: grades,\n                    };\n                    console.log(\"sendGetAttmptsSplit\", this.info);\n                    if (this.palette !== undefined) {\n                        this.setColors(this.palette);\n                    }\n                    this.createScreen();\n                }).fail((error) => {\n                    console.log(\"fail\", error);\n                    return error;\n                });\n            });\n        }\n\n        createScreen() {\n            this.screen = 1;\n            this.split.width = Math.round(document.documentElement.clientWidth / this.countX) - this.padding;\n            while (this.body.firstChild) {\n                this.body.removeChild(this.body.firstChild);\n            }\n\n            const info = this.info;\n            this.splits = [];\n            for (let i = 0; i < this.countX * this.countY; i++) {\n                if (i >= this.countAll) {\n                    break;\n                }\n                const split = {parent: undefined};\n                split.achecked = [];\n                split.answers = info.answertexts;\n                split.answerids = info.queryanswerids;\n                split.avatarfile = info.avatars[i];\n                split.lastUpdateTime = 0;\n                split.score = 0;\n                split.rank = 0;\n                split.rankcache = '';\n                split.isWaitingContinue = false;\n                split.position = this.splits.length;\n                split.server = [];\n                this.splits.push(split);\n            }\n            for (let i = 0; i < this.countAll; i++) {\n                this.copySplitData(i, i);\n            }\n\n            let i = 0;\n            for (let iY = 0; iY < this.countY; iY++) {\n                for (let iX = 0; iX < this.countX; iX++) {\n                    if (i >= this.countAll) {\n                        break;\n                    }\n                    this.createScreenSplit(i, iX, iY);\n                    const sp = this.splits[i];\n                    this.updateScore(sp);\n                    this.checkShowAduel(sp);\n                    i++;\n                }\n            }\n\n            this.createScreenSave();\n\n            this.createScreenKeyboard();\n        }\n\n        createScreenSplit(split, iX, iY) {\n            const sp = this.splits[split];\n            const left = iX * (this.split.width + this.padding);\n            const top = this.split.offsetY + iY * (this.split.height + this.padding);\n            sp.parent = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: 'mmogame-quiz-split',\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.split.width}px`,\n                    height: `${this.split.height}px`,\n                    overflow: 'hidden',\n                }\n            });\n\n            const ishorizontal = this.split.width >= this.split.height;\n            const showRank = this.isaduel || this.countX * this.countY > 1;\n            sp.player = this.createDivScorePercent(sp.parent, this.iconSize + 2 * this.padding, showRank);\n            this.computeFontScorePercent(sp);\n\n            // Avatar.\n            let leftAvatar = Math.round(this.padding + this.iconSize / 2);\n            sp.avatar = this.createDOMElement('img', {\n                classname: `mmogame-quiz-avatar`,\n                parent: sp.parent,\n                styles: {\n                    position: 'absolute',\n                    left: `${leftAvatar}px`,\n                    top: `${this.padding}px`,\n                    height: `${this.iconSize}px`,\n                    maxWidth: `${this.iconSize}px`,\n                    transform: 'translateX(-50%)',\n                },\n                attributes: {\n                    src: 'assets/avatars/' + sp.avatarfile,\n                    alt: this.getStringM('js_help'),\n                    role: 'button',\n                },\n            });\n\n            // AUserid\n            let auserid = this.createDOMElement('div', {\n                parent: sp.parent,\n                classnames: 'mmogame-quiz-aduelsplit-auserid',\n                styles: {\n                    position: 'absolute',\n                    left: '0',\n                    top: `0`,\n                    width: `auto`,\n                    height: `auto`,\n                    overflow: 'hidden',\n                    align: 'left',\n                    color:  this.getContrastingColor(this.colorDefinition),\n                }\n            });\n            //auserid.innerHTML = sp.auserid;\n\n\n            // Definition.\n            sp.definitionWidth = ishorizontal ?\n                Math.round(this.split.width / 2 - this.padding / 2) :\n                this.split.width - 2 * this.padding;\n            sp.definitionHeight = ishorizontal ?\n                this.split.height - this.iconSize - 2 * this.padding :\n                Math.round(this.split.height / 2 - 2 * this.padding - this.iconSize - this.iconSize / 2);\n            let definitionTop = this.iconSize + 2 * this.padding;\n            sp.definition = this.createDOMElement('div', {\n                parent: sp.parent,\n                classnames: 'mmogame-quiz-aduelsplit-definition',\n                styles: {\n                    position: 'absolute',\n                    left: `${this.padding}px`,\n                    top: `${definitionTop}px`,\n                    width: `${sp.definitionWidth}px`,\n                    height: `${sp.definitionHeight}px`,\n                    overflow: 'hidden',\n                    background: this.colorDefinition,\n                    color:  this.getContrastingColor(this.colorDefinition),\n                    padding: `${this.padding}px`,\n                }\n            });\n            sp.definition.innerHTML = sp.attempts[0].numattempt + \". \" + sp.attempts[0].definition;\n            sp.definition.addEventListener('click', () => {\n                this.continueAnswer(split);\n            });\n\n            const disabled = false;\n\n            sp.answersLeft = ishorizontal ? sp.definitionWidth + 2 * this.padding : this.padding;\n            sp.answersWidth = this.split.width - sp.answersLeft;\n            sp.answersTop = ishorizontal ?\n                this.iconSize + 2 * this.padding :\n                definitionTop + sp.definitionHeight + 2 * this.padding;\n            sp.answersHeight = this.split.height - sp.answersTop - 2 * this.padding;\n\n            this.createAnswerMultichoice(\n                sp.parent,\n                split,\n                sp,\n                disabled);\n\n            this.computeFontSize(split, sp);\n\n            this.endofgame = false;\n        }\n\n        setColors(colors) {\n            super.setColors(colors);\n\n            this.colorDefinition = this.getColorHex(colors[1]);\n            this.colorScore = colors[2];\n        }\n\n        /**\n         * Creates multiple-choice answer options.\n         *\n         * @param {object} parent\n         * @param {number} split\n         * @param {object} sp\n         * @param {boolean} disabled - Whether the answers are disabled.\n         * @returns {number} The total height used by the answer options.\n         */\n        createAnswerMultichoice(parent, split, sp, disabled) {\n            const attempt = sp.attempts[0];\n            const n = attempt.answers.length;\n            let aItemRadio = Array(n);\n            let aItemLabel = Array(n);\n            let aRandom = this.computeRandom(n);\n            // Iterate over each answer\n            for (let i = 0; i < n; i++) {\n                const ans = aRandom[i];\n                const label = this.createDOMElement('label', {\n                    parent: sp.parent,\n                    classnames: 'mmogame-quiz-aduelsplit-label' + i,\n                    styles: {\n                        position: 'absolute',\n                        top: `${top}px`,\n                        color: this.getContrastingColor(this.colorBackground),\n                        align: \"left\",\n                        marginTop: 0,\n                        marginBottom: 0,\n                        overflow: 'visible',\n                        lineHeight: 'normal',\n                    }\n                });\n                label.innerHTML = (i + 1) + \". \" + attempt.answers[ans];\n                label.htmlFor = \"mmogame_quiz_aduelsplit-input\" + i;\n\n                // Create the checkbox\n                // const checked = achecked.includes(attempt.answerids[ans]);\n                const checked = false;\n                const item = this.createRadiobox(parent, 0, this.colorBackground, this.colorScore,\n                    checked, disabled);\n                item.style.position = \"absolute\";\n                item.style.left = sp.answersLeft + \"px\";\n                item.id = \"mmogame_quiz_input\" + i;\n\n                // Event listeners for interactions\n                item.addEventListener('click', () => {\n                    if (!item.classList.contains(\"disabled\")) {\n                        this.onClickRadio(split, i, this.colorBackground2, this.colorScore);\n                        sp.selectedAnswer = i;\n                        this.selectAnswer(split);\n                        this.updateRanks();\n                    }\n                });\n\n                label.addEventListener('click', () => {\n                    if (this.splits[split].stateShowCorrect !== undefined) {\n                        return; // Disabled.\n                    }\n                    this.onClickRadio(split, i, this.colorBackground2, this.colorScore);\n                    sp.selectedAnswer = i;\n                    this.selectAnswer(split);\n                    this.updateRanks();\n                });\n\n                aItemRadio[i] = item;\n                aItemLabel[i] = label;\n            }\n\n            sp.aItemRadio = aItemRadio;\n            sp.aItemLabel = aItemLabel;\n            sp.selectedAnswer = -1;\n            sp.aRandom = aRandom;\n            sp.timestart = Math.round(Math.floor(Date.now() / 1000));\n\n            return top;\n        }\n\n        computeRandom(n) {\n            // Create an array with numbers from 0 to n\n            let aRandom = Array.from({length: n}, (_, i) => i);\n            // Shuffle the array using Fisher-Yates algorithm\n            for (let i = n - 1; i > 0; i--) {\n                let j = Math.floor(Math.random() * (i + 1)); // Generate a random index\n                [aRandom[i], aRandom[j]] = [aRandom[j], aRandom[i]]; // Swap elements\n            }\n            return aRandom;\n        }\n        computeFontSize(split, sp) {\n            const ishorizontal = this.split.width >= this.split.height;\n            let minSize = 10;\n            const bodyFontSize = parseFloat(getComputedStyle(document.documentElement).fontSize);\n            let maxSize = Math.min(2 * bodyFontSize, this.iconSize / 2, sp.answersWidth);\n            let fontSize = minSize;\n            let precision = 0.1; // Defines the precision level (0.1px)\n            const n = sp.aItemLabel.length;\n            const div = sp.definition;\n            const style = div.style;\n            const maxHeight = ishorizontal ?\n                sp.answersHeight - this.padding - this.iconSize / 2 :\n                sp.answersHeight - this.iconSize - this.padding;\n            style.height = 'auto';\n            // Perform a binary search to find the optimal font size\n            while ((maxSize - minSize) > precision) {\n                fontSize = Math.round(10 * (minSize + maxSize) / 2) / 10; // ComputeAverage\n                style.width = sp.definitionWidth + \"px\";\n                style.fontSize = fontSize + \"px\";\n\n                // Check if the text exceeds the container's boundaries (definition)\n                let isbig = (sp.definition.scrollWidth > sp.definitionWidth || sp.definition.scrollHeight > sp.definitionHeight);\n\n                if (!isbig) {\n                    let sum = 0;\n                    const maxWidth = Math.round(sp.answersWidth - fontSize - 3 * this.padding);\n                    for (let i = 0; i < n; i++) {\n                        const elem = sp.aItemLabel[i];\n                        elem.style.fontSize = `${fontSize}px`;\n                        elem.style.width = (maxWidth - 1) + \"px\";\n                        elem.style.height = 'auto';\n                        if (elem.scrollWidth >= maxWidth) {\n                            isbig = true;\n                            break;\n                        }\n                        sum += parseInt(elem.scrollHeight) + this.padding;\n                    }\n                    if (sum >= maxHeight) {\n                        isbig = true;\n                    }\n                }\n                if (isbig) {\n                    maxSize = fontSize - precision;\n                } else {\n                    minSize = fontSize + precision / 4;\n                }\n            }\n            fontSize = minSize;\n            sp.fontSize = fontSize;\n\n            // Set the final font size with 1 decimal precision\n            sp.definition.style.fontSize = fontSize + \"px\";\n            let top = sp.answersTop;\n\n            const leftLabel = sp.answersLeft + Math.round(fontSize) + this.padding;\n            sp.aItemLabelTop = Array(n);\n            for (let i = 0; i < n; i++) {\n                const elem = sp.aItemLabel[i];\n                elem.style.fontSize = `${fontSize}px`;\n                elem.style.top = `${top}px`;\n                elem.style.left = `${leftLabel}px`;\n                elem.style.width = `${Math.round(sp.answersWidth - fontSize - 2 * this.padding)}px`;\n                elem.style.height = 'auto';\n\n                const radio = sp.aItemRadio[i];\n                radio.style.width = `${Math.round(fontSize)}px`;\n                radio.style.height = `${elem.scrollHeight}px`;\n                radio.style.top = `${top}px`;\n                this.drawRadio(radio, 0xFFFFFF, 0x808080);\n\n                sp.aItemLabelTop[i] = top;\n                top += elem.scrollHeight + this.padding;\n            }\n\n            const space = sp.fontSize;\n            if (top + this.iconSize + this.padding + n * space < this.split.height) {\n                for (let i = 1; i < n; i++) {\n                    const elem = sp.aItemLabel[i];\n                    const top = parseInt(elem.style.top) + i * sp.fontSize;\n                    elem.style.top = `${top}px`;\n                    sp.aItemRadio[i].style.top = `${top}px`;\n                }\n                top += (n - 1) * space;\n            }\n\n            if (ishorizontal) {\n                // If we can make a vertical space.\n                if (sp.definition.scrollHeight < top - sp.answersTop) {\n                    sp.definition.style.height = `${top - sp.answersTop}px`;\n                }\n            } else {\n                style.height = `${sp.definitionHeight}px`;\n            }\n\n            return fontSize;\n        }\n\n        copySplitData(splitInfo, split) {\n            const sp = this.splits[split];\n            const info = this.info;\n            // Copy attempt ids.\n            let queryids = info.attemptqueryids[splitInfo].split(\",\");\n\n            const aduelcorrects = info.aduelcorrects[splitInfo].split(',');\n            const numattempts = info.numattempts[splitInfo].split(\",\");\n            sp.auserid = info.auserids[splitInfo];\n            let attempts = info.attempts[splitInfo].split(\",\");\n            sp.attempts = [];\n            sp.score = info.grades[splitInfo];\n\n            for (let i = 0; i < attempts.length; i++) {\n                let item = {attemptid: attempts[i]};\n                item.queryid = queryids[i];\n\n                item.definition = info.querydefinitions[item.queryid];\n                item.answerids = info.queryanswerids[item.queryid].split(\",\");\n                item.answerids0 = info.queryanswerids0[item.queryid].split(\",\");\n                item.answers = [];\n                item.numattempt = numattempts[i];\n                item.aduelcorrect = (parseInt(aduelcorrects[i]) !== 0);\n                for (let j = 0; j < item.answerids.length; j++) {\n                    item.answers.push(info.answertexts[item.answerids[j]]);\n                }\n\n                sp.attempts.push(item);\n            }\n            sp.aduel = this.info.aduels[splitInfo];\n            sp.aduelavatar = this.info.aduelavatars[splitInfo];\n        }\n\n        moveX(timestamp, split, num, direction, steps) {\n            if (this.screen === 0) {\n                super.moveX(timestamp, split, num, direction, steps);\n            }\n        }\n\n        moveY(timestamp, split, num, direction, steps) {\n            if (this.screen === 0) {\n                super.moveY(timestamp, split, num, direction, steps);\n                return;\n            }\n\n            if (this.splits[split].isWaitingContinue) {\n                return;\n            }\n\n            if (direction < 0) {\n                this.moveAnswer(timestamp, split, -1);\n            } else {\n                this.moveAnswer(timestamp, split, 1);\n            }\n        }\n\n        moveAnswer(timestamp, split, move) {\n            let sp = this.splits[split];\n\n            if (timestamp - sp.lastUpdateTime < this.updateDelay) {\n                return;\n            }\n            if (sp.aItemRadio === undefined) {\n                return;\n            }\n            sp.lastUpdateTime = timestamp;\n\n            sp.selectedAnswer = sp.selectedAnswer === -1 ? 0 :\n                (sp.aItemRadio.length + sp.selectedAnswer + move) % sp.aItemRadio.length;\n\n            this.onClickRadio(split, sp.selectedAnswer, this.colorBackground2, this.colorScore);\n        }\n\n        /**\n         * Handles radio button click events for answers.\n         *\n         * @param {number} split\n         * @param {number} index - The index of the clicked radio button.\n         * @param {string} colorBack - The background color for the radio button.\n         * @param {string} color - The color for the radio button when selected.\n         */\n        onClickRadio(split, index, colorBack, color) {\n            let sp = this.splits[split];\n            if (sp.aItemRadio[index].classList.contains(\"disabled\")) {\n                return;\n            }\n\n            // Update the selected radio button and deselect others\n            sp.aItemRadio.forEach((item, i) => {\n                const isDisabled = item.classList.contains(\"disabled\");\n                if (i === index) {\n                    item.classList.add(\"checked\");\n                    sp.answerid = sp.answerids[i];\n                    sp.aItemLabel[i].style.textDecoration = \"underline\";\n                } else {\n                    item.classList.remove(\"checked\");\n                    sp.aItemLabel[i].style.textDecoration = \"none\";\n                }\n\n                this.drawRadio(item, isDisabled ? colorBack : 0xFFFFFF, color);\n            });\n        }\n\n        // Butttons: 8 = Select, 10 = Joystick pressed.\n        updateGamepad(timestamp, split, gamepad) {\n            super.updateGamepad(timestamp, split, gamepad);\n\n            let change = false;\n            if (gamepad.buttons[4].value || gamepad.buttons[5].value || gamepad.buttons[6].value ||\n                gamepad.buttons[7].value || gamepad.buttons[8].value) {\n                // Button select or fire is pressed (means continue).\n                let sp = this.splits[split];\n\n                if (sp.isWaitingContinue && (sp.buttonNext !== undefined)) {\n                    this.continueAnswer(split);\n                }\n            } else if (gamepad.buttons[10].value) { // Button joysticpress is pressed.\n                if (this.selectAnswer(split, this.splits[split].selectedAnswer)) {\n                    change = true;\n                }\n            }\n            if (change) {\n                this.updateRanks();\n            }\n\n            if (this.splits !== undefined && split < this.splits.length) {\n                const sp = this.splits[split];\n                if (sp.aItemLabel !== undefined && !sp.isWaitingContinue) {\n                    const n = Math.min(sp.aItemLabel.length, 4);\n                    // Check if buttons 1..4 is pressed.\n                    for (let i = 0; i < n; i++) {\n                        if (gamepad.buttons[i].pressed) {\n                            this.onClickRadio(split, i, this.colorBackground2, this.colorScore);\n                            sp.selectedAnswer = i;\n                            this.selectAnswer(split);\n                            this.updateRanks();\n                            sp.isWaitingContinue = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        selectAnswer(split) {\n            let change = false;\n            let sp = this.splits[split];\n\n            if (sp.attempts === undefined || sp.attempts.length === 0) {\n                return; // Wait answer from server, so no attempts available.\n            }\n\n          if (sp.selectedAnswer >= 0 && !sp.isWaitingContinue) {\n                sp.isWaitingContinue = true;\n                change = true;\n                const pos = sp.aRandom[sp.selectedAnswer];\n                if (pos === 0) {\n                    // Correct answer.\n                    const addscore = sp.aItemRadio.length - 1;\n                    sp.score += addscore;\n                    if (sp.aduel >= 0) {\n                        if (!sp.attempts[0].aduelcorrect) {\n                            sp.score += sp.aItemRadio.length - 1;\n                        }\n                    }\n                    this.updateScore(sp);\n                    this.showCorrect(sp, true, addscore, 0);\n                    this.sendAnswer(split, true);\n                } else {\n                    // Wrong answer.\n                    let addscore = -Math.min(sp.score, 1);\n                    sp.score += addscore;\n                    this.updateScore(sp);\n\n                    let addscoreaduel = 0;\n                    if (sp.aduel >= 0) {\n                        if (sp.attempts[0].aduelcorrect) {\n                            addscoreaduel = sp.aItemRadio.length - 1;\n                            this.updateScoreOpponent(sp, addscoreaduel);\n                        }\n                    }\n                    this.showCorrect(sp, false, addscore, addscoreaduel);\n                    this.sendAnswer(split, false);\n                }\n            }\n\n            return change;\n        }\n\n        continueAnswer(split) {\n            const sp = this.splits[split];\n            if (!sp.isWaitingContinue) {\n                return;\n            }\n            sp.isWaitingContinue = false;\n            // Remove the question that is used.\n            sp.attempts.shift();\n            this.showNextQuestion(split);\n        }\n\n        updateRanks() {\n            if (this.splits.length === 1) {\n                return;\n            }\n            for (let i = 0; i < this.splits.length; i++) {\n                this.splits[i].rank = 0;\n            }\n            let rank = 1;\n            for (;;) {\n                let found = false;\n                let max = -1;\n                for (let i = 0; i < this.splits.length; i++) {\n                    const sp = this.splits[i];\n                    if (sp.rank === 0) {\n                        found = true;\n                        if (sp.score > max) {\n                            max = sp.score;\n                        }\n                    }\n                }\n                if (!found) {\n                    break; // Finished.\n                }\n                let count = 0;\n                for (let i = 0; i < this.splits.length; i++) {\n                    const sp = this.splits[i];\n                    if (sp.score === max) {\n                        sp.rank = rank;\n                        this.updateRank(sp);\n                        count++;\n                    }\n                }\n                rank += count;\n            }\n        }\n\n        updateRank(sp) {\n            if (this.splits.length === 1 || sp.player === undefined || sp.player.lblRank === undefined) {\n                return;\n            }\n            if (sp.rank === sp.rankcache) {\n                return;\n            }\n            sp.player.lblRank.innerHTML = '#' + sp.rank;\n            sp.rankcache = sp.rank;\n        }\n\n        updateScore(sp) {\n            sp.player.lblScore.innerHTML = sp.score;\n            this.changeScore = true;\n        }\n\n        sendAnswer(split, iscorrect) {\n            const sp = this.splits[split];\n\n            if (sp.attempts.length === 0) {\n                return; // No attempts.\n            }\n\n            const attempt = sp.attempts[0];\n\n            const pos = sp.aRandom[sp.selectedAnswer];\n            const info = {\n                split: split,\n                attemptid: attempt.attemptid,\n                iscorrect: iscorrect,\n                answer: attempt.answerids0[pos],\n                timestart: sp.timestart,\n                timeanswer: Math.round(Math.floor(Date.now() / 1000)),\n            };\n            sp.server.push(info);\n        }\n\n        showCorrect(sp, iscorrect, addscore, addscoreaduel) {\n            const correctPos = sp.aRandom.indexOf(0);\n            const topCorrect = sp.aItemLabelTop[0];\n            const topIcon = topCorrect + this.padding + sp.aItemLabel[correctPos].offsetHeight;\n            const topIncorrect = topIcon + this.iconSize + this.padding;\n            const leftLabel = parseFloat(sp.aItemRadio[0].style.left);\n\n            sp.stateShowCorrect = true;\n            // Move correct answer to position 0.\n            for (let i = 0; i < sp.aItemRadio.length; i++) {\n                this.fadeOut(sp, sp.aItemRadio[i], this.durationAnination);\n                if (i !== correctPos && i !== sp.selectedAnswer) {\n                    this.fadeOut(sp, sp.aItemLabel[i], this.durationAnination);\n                } else {\n                    sp.aItemRadio[i].classList.add(\"disabled\");\n                    sp.aItemLabel[i].classList.add(\"disabled\");\n                }\n            }\n            if (correctPos !== 0) {\n                this.moveElementSmoothly(sp, sp.aItemLabel[correctPos], topCorrect, this.durationAnination);\n            }\n\n            const sizeRadio = Math.round(sp.fontSize);\n            sp.correctSmall = this.createCorrectIcon(\n                sp,\n                sp.parent,\n                leftLabel,\n                sp.aItemLabelTop[sp.selectedAnswer],\n                topCorrect,\n                sizeRadio,\n                true\n            );\n\n            if (iscorrect) {\n                sp.incorrectSmall = undefined;\n            } else {\n                const label = sp.aItemLabel[sp.selectedAnswer];\n\n                label.style.textDecoration = \"none\";\n\n                this.moveElementSmoothly(\n                    sp,\n                    label,\n                    topIncorrect,\n                    this.durationAnination);\n                sp.incorrectSmall = this.createCorrectIcon(\n                    sp,\n                    sp.parent,\n                    leftLabel,\n                    sp.aItemLabelTop[sp.selectedAnswer],\n                    topIncorrect,\n                    sizeRadio,\n                    false\n                );\n            }\n\n            sp.timeoutStrip = setTimeout(() => {\n                sp.timeoutStrip = undefined;\n\n                if (sp.stateShowCorrect === undefined) {\n                    return; // We are in next question.\n                }\n\n                this.showCorrectStrip(sp, topIcon, iscorrect, addscore, addscoreaduel);\n                this.createNextButton(sp, correctPos, topIncorrect);\n\n                sp.aItemLabel[correctPos].style.opacity = \"1\";\n                sp.aItemLabel[correctPos].style.display = \"block\";\n                sp.aItemLabel[sp.selectedAnswer].style.opacity = \"1\";\n                sp.aItemLabel[sp.selectedAnswer].style.display = \"block\";\n            }, this.durationAnination);\n        }\n\n        createCorrectIcon(sp, parent, left, topSource, topDestination, sizeRadio, iscorrect) {\n            const div = this.createDiv(\n                parent,\n                'mmogame-quiz-aduelsplit-iscorrect',\n                left,\n                topSource,\n                sizeRadio,\n                sizeRadio);\n            div.innerHTML = this.getSVGcorrect(sizeRadio, iscorrect, this.colorScore, this.colorScore);\n            div.style.zIndex = '1';\n            if (topSource !== topDestination) {\n                this.moveElementSmoothly(sp, div, topDestination, this.durationAnination);\n            }\n\n            return div;\n        }\n\n        fadeOut(sp, element, duration) {\n            let opacity = 1;\n\n            let interval = setInterval(function() {\n                if (sp.stateShowCorrect === undefined) {\n                    element.style.display = 'block';\n                    element.style.opacity = 1;\n                    return;\n                }\n                if (opacity <= 0) {\n                    clearInterval(interval);\n                    element.style.display = 'none'; // Hide it.\n                } else {\n                    opacity -= 0.05; // Μειώνουμε την αδιαφάνεια\n                    element.style.opacity = opacity; // Εφαρμόζουμε την αδιαφάνεια στο στοιχείο\n                }\n            }, duration / 20); // Ορίζουμε πόσο γρήγορα θα αλλάξει η αδιαφάνεια\n        }\n\n        moveElementSmoothly(sp, element, finalY, duration) {\n            const startY = element.offsetTop; // Αρχική θέση Y\n            const deltaY = finalY - startY; // Διαφορά για Y\n            const startTime = performance.now(); // Ώρα εκκίνησης για υπολογισμό του χρόνου\n\n            const animate = () => {\n                if (sp.stateShowCorrect === undefined) {\n                    return;\n                }\n                const currentTime = performance.now();\n                const elapsedTime = currentTime - startTime;\n\n                // Υπολογισμός της αναλογίας του χρόνου (0 - 1) για τη μετάβαση\n                const progress = Math.min(elapsedTime / duration, 1);\n\n                // Υπολογισμός της νέας θέσης\n                const currentY = startY + deltaY * progress;\n                // Εφαρμογή της νέας θέσης\n                element.style.top = `${currentY}px`;\n\n                // Συνεχίζουμε το animation αν δεν έχουμε φτάσει στη νέα θέση\n                if (progress < 1) {\n                    requestAnimationFrame(animate);\n                } else {\n                    setTimeout(function() {\n                        element.style.display = \"block\";\n                    }, 500);\n                }\n            };\n\n            // Ξεκινάμε την κίνηση\n            animate();\n        }\n\n        getSVGcorrect(size, iscorrect, colorCorrect, colorError) {\n            if (iscorrect) {\n                let c = colorCorrect !== undefined ? this.getColorHex(colorCorrect) : '#398439';\n                return \"<svg aria-hidden=\\\"true\\\" class=\\\"svg-icon iconCheckmarkLg\\\" width=\\\"\" + size + \"\\\" height=\\\"\" + size +\n                    \"\\\" viewBox=\\\"0 0 36 36\\\"><path fill=\\\"\" + c + \"\\\" d=\\\"m6 14 8 8L30 6v8L14 30l-8-8v-8z\\\"></path></svg>\";\n            } else {\n                let c = colorError !== undefined ? this.getColorHex(colorError) : '#398439';\n                return \"<svg width=\\\"\" + size + \"\\\" height=\\\"\" + size +\n                    \"\\\" class=\\\"bi bi-x-lg\\\" viewBox=\\\"0 0 18 18\\\"> <path fill=\\\"\" + c +\n                    `\" d=\"M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 \n                1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z\"/></svg>`;\n            }\n        }\n\n        hideQuestion(sp) {\n            this.removeCorrectIcons(sp);\n\n            for (let i = 0; i < sp.aItemLabel.length; i++) {\n                const label = sp.aItemLabel[i];\n                label.style.display = \"none\";\n\n                const radio = sp.aItemRadio[i];\n                radio.style.display = \"none\";\n            }\n        }\n\n        showNextQuestion(split) {\n\n            const sp = this.splits[split];\n            sp.isWaitingContinue = false;\n            sp.timestart = Math.round(Math.floor(Date.now() / 1000));\n            sp.stateShowCorrect = undefined;\n\n            this.removeCorrectIcons(sp);\n\n            const n = sp.aItemLabel.length;\n\n            sp.aRandom = this.computeRandom(n);\n            for (let i = 0; i < sp.aItemLabel.length; i++) {\n                const label = sp.aItemLabel[i];\n                label.style.top = sp.aItemLabelTop[i];\n                label.style.display = \"block\";\n                label.style.opacity = 1;\n                label.style.textDecoration = \"none\";\n                label.classList.remove(\"disabled\");\n\n                const radio = sp.aItemRadio[i];\n                radio.style.display = \"block\";\n                radio.style.opacity = 1;\n                radio.classList.remove(\"checked\");\n                radio.classList.remove(\"disabled\");\n                this.drawRadio(radio, 0xFFFFFF, this.colorScore);\n                sp.selectedAnswer = -1;\n            }\n\n            if (sp.attempts.length === 0) {\n                sp.definition.innerHTML = '';\n                for (let i = 0; i < sp.aItemLabel.length; i++) {\n                    sp.aItemLabel[i].innerHTML = '';\n                }\n                this.hideQuestion(sp);\n                this.askNextQuestions(sp);\n                return;\n            }\n\n            // Shows the next question.\n            sp.definition.innerHTML = sp.attempts[0].numattempt + \". \" + sp.attempts[0].definition;\n            this.autoResizeText(sp.definition, sp.definitionWidth, sp.definitionHeight, true, 0, 0);\n            const attempt = sp.attempts[0];\n            for (let i = 0; i < sp.aItemLabel.length; i++) {\n                const ans = sp.aRandom[i];\n                sp.aItemLabel[i].innerHTML = (i + 1) + \": \" + attempt.answers[ans];\n            }\n\n            this.computeFontSize(split, sp);\n        }\n\n        askNextQuestions(sp) {\n            if (sp !== undefined && sp.aduelavatarelement !== undefined) {\n                sp.aduelavatarelement.remove();\n                sp.aduelavatarelement = undefined;\n            }\n            let splits = [];\n            let attempts = [];\n            let iscorrects = [];\n            let answers = [];\n            let timestarts = [];\n            let timeanswers = [];\n            let returnsplits = [];\n\n            for (let i = 0; i < this.splits.length; i++) {\n                const sp2 = this.splits[i];\n                if (sp2.attempts.length === 0) {\n                    returnsplits.push(i);\n                }\n                for (let j = 0; j < sp2.server.length; j++) {\n                    const temp = sp2.server[j];\n                    splits.push(temp.split);\n                    attempts.push(temp.attemptid);\n                    iscorrects.push(temp.iscorrect ? 1 : 0);\n                    answers.push(temp.answer);\n                    timestarts.push(temp.timestart);\n                    timeanswers.push(temp.timeanswer);\n                }\n            }\n            if (splits.length === 0) {\n                // Autorepair.\n                for (let i = 0; i < this.splits.length; i++) {\n                    if (this.splits[i].attempts.length === 0) {\n                        splits.push(i);\n                    }\n                }\n                if (splits.length === 0) {\n                    splits.push(0);\n                }\n            }\n            require(['core/ajax'], (Ajax) => {\n                // Defining the parameters to be passed to the service\n                let params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    splits: splits.join(','),\n                    attempts: attempts.join(','),\n                    iscorrects: iscorrects.join(','),\n                    answers: answers.join(','),\n                    timestarts: timestarts.join(','),\n                    timeanswers: timeanswers.join(','),\n                    returnsplits: returnsplits.join(','),\n                };\n                // Calling the service through the Moodle AJAX API\n                let sendAnswers = Ajax.call([{\n                    methodname: 'mmogametype_quiz_send_answers_split',\n                    args: params\n                }]);\n                // Handling the response\n                sendAnswers[0].done(({avatars, attempts, attemptqueryids, querydefinitions,\n                                              queryanswerids, numattempts, answertexts, aduels,\n                                         aduelavatars, aduelcorrects, auserids, queryanswerids0,\n                                         grades, savedattempts}) => {\n                    this.info = {\n                        avatars: avatars,\n                        attempts: attempts,\n                        paletteid: this.paletteid,\n                        attemptqueryids: attemptqueryids,\n                        numattempts: numattempts,\n                        querydefinitions: querydefinitions,\n                        queryanswerids: queryanswerids,\n                        answertexts: answertexts,\n                        aduels: aduels,\n                        aduelavatars: aduelavatars,\n                        aduelcorrects: aduelcorrects,\n                        auserids: auserids,\n                        queryanswerids0: queryanswerids0,\n                        grades: grades,\n                    };\n                    this.removeFromServer(savedattempts);\n                    for (let i = 0; i < returnsplits.length; i++) {\n                        const split = returnsplits[i];\n                        this.copySplitData(i, split);\n                        this.checkShowAduel(this.splits[split]);\n                        this.showNextQuestion(split);\n                    }\n                }).fail((error) => {\n                    return error;\n                });\n            });\n        }\n\n        computeFontScorePercent(sp) {\n            if (sp.position === 0) {\n                const player = sp.player;\n                player.lblScore.innerHTML = \"99999\";\n                this.autoResizeText(player.lblScore, this.iconSize, player.cellSize, false, 0, 0);\n                const fontSize = player.lblScore.style.fontSize;\n                const lineHeight = Math.round(parseFloat(fontSize));\n                if (player.lblRank !== undefined) {\n                    player.lblRank.style.fontSize = fontSize;\n                    player.lblRank.lineHeight = lineHeight;\n                }\n                player.lblScore.lineHeight = lineHeight;\n                player.lblScore.innerHTML = \"\";\n            } else {\n                const player = sp.player;\n                let fontSize = this.splits[0].player.lblRank.style.fontSize;\n                const lineHeight = Math.round(parseFloat(fontSize));\n                if (player.lblRank !== undefined) {\n                    player.lblRank.style.fontSize = fontSize;\n                    player.lblRank.lineHeight = lineHeight;\n                }\n                player.lblScore.style.fontSize = fontSize;\n                player.lblScore.lineHeight = lineHeight;\n            }\n        }\n\n        removeCorrectIcons(sp) {\n            if (sp.timeoutStrip !== undefined) {\n                clearTimeout(sp.timeoutStrip);\n            }\n\n            if (sp.stripCorrect !== undefined) {\n                sp.stripCorrect.remove();\n                sp.stripCorrect = undefined;\n            }\n\n            if (sp.correctSmall !== undefined) {\n                sp.correctSmall.remove();\n                sp.correctSmall = undefined;\n            }\n\n            if (sp.incorrectSmall !== undefined) {\n                sp.incorrectSmall.remove();\n                sp.incorrectSmall = undefined;\n            }\n\n            if (sp.buttonNext !== undefined) {\n                sp.buttonNext.remove();\n                sp.buttonNext = undefined;\n            }\n        }\n\n        updateScoreOpponent(sp, addscore) {\n\n            const avatar = sp.aduelavatar;\n            for (let i = 0; i < this.splits.length; i++) {\n                if (this.splits[i].avatarfile === avatar) {\n                    const newsplit = this.splits[i];\n                    newsplit.score += addscore;\n                    this.updateScore(newsplit);\n                    break;\n                }\n            }\n        }\n\n        checkShowAduel(sp) {\n            if (sp.aduelavatar === '' || sp.aduelavatar === undefined) {\n                if (sp.aduelavatarelement !== undefined) {\n                    sp.aduelavatarelement.remove();\n                    sp.aduelavatarelement = undefined;\n                }\n                return; // Plays alone\n            }\n            let leftAvatar = Math.round(this.padding + this.iconSize / 2);\n            sp.aduelavatarelement = this.createDOMElement('img', {\n                classname: `mmogame-quiz-avatar`,\n                parent: sp.parent,\n                styles: {\n                    position: 'absolute',\n                    left: `${leftAvatar + 2 * this.iconSize + 2 * this.padding}px`,\n                    top: `${this.padding}px`,\n                    height: `${this.iconSize}px`,\n                    maxWidth: `${this.iconSize}px`,\n                    transform: 'translateX(-50%)',\n                },\n                attributes: {\n                    src: 'assets/avatars/' + sp.aduelavatar,\n                    alt: this.getStringM('js_help'),\n                    role: 'button',\n                },\n            });\n        }\n\n        createAddScore(sp, left, iconSize, addscore) {\n            if (addscore === 0) {\n                return;\n            }\n\n            if (addscore > 0) {\n                addscore = \"+\" + addscore;\n            }\n\n            const label = this.createDOMElement('div', {\n                parent: sp.stripCorrect,\n                classnames: `mmogame-quiz-addscore`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    width: `${iconSize}px`,\n                    top: `0`,\n                    height: `${iconSize}px`,\n                    lineHeight: `${iconSize}px`,\n                    textAlign: 'center',\n                    color: this.getContrastingColor(this.colorBackground),\n                    border: \"0px solid \" + this.getColorHex(this.colorBackground),\n                    boxShadow: \"inset 0 0 0.125em rgba(255, 255, 255, 0.75)\",\n                    background: this.getColorHex(this.colorBackground),\n                    borderRadius: `${iconSize}px`,\n                    fontSize: sp.aItemLabel[0].style.fontSize,\n                },\n                attributes: {\n                    title: this.getStringM('js_addscore'),\n                },\n            });\n\n            label.innerHTML = addscore;\n\n            return label;\n        }\n\n        showCorrectStrip(sp, top, iscorrect, addscore, addscoreaduel) {\n            const iconSize = Math.max(1, Math.min(this.iconSize, Math.ceil(sp.answersWidth / 4 - this.padding - this.padding / 4)));\n            sp.stripCorrect = this.createDOMElement('div', {\n                parent: sp.parent,\n                classnames: 'mmogame-quiz-split',\n                styles: {\n                    position: 'absolute',\n                    left: `${parseInt(sp.aItemRadio[0].style.left)}px`,\n                    top: `${top}px`,\n                    width: `${sp.answersWidth}px`,\n                    height: `${iconSize}px`,\n                    overflow: 'hidden',\n                }\n            });\n\n            this.createAddScore(sp, 0, iconSize, addscore);\n\n            this.createDOMElement('img', {\n                classname: `mmogame-quiz-avatar`,\n                parent: sp.stripCorrect,\n                styles: {\n                    position: 'absolute',\n                    left: `${iconSize + this.padding}px`,\n                    top: `0`,\n                    height: `${iconSize}px`,\n                    maxWidth: `${iconSize}px`,\n                },\n                attributes: {\n                    src: 'assets/avatars/' + sp.avatarfile,\n                    alt: this.getStringM('js_help'),\n                    role: 'button',\n                },\n            });\n            this.createCorrectIcon(sp, sp.stripCorrect, iconSize + this.padding, 0, 0, this.iconSize, iscorrect);\n\n            if (sp.aduelavatar !== '') {\n                let leftAduel = 2 * (iconSize + this.padding);\n                this.createDOMElement('img', {\n                    classname: `mmogame-quiz-avatar`,\n                    parent: sp.stripCorrect,\n                    styles: {\n                        position: 'absolute',\n                        left: `${leftAduel}px`,\n                        top: `0`,\n                        height: `${iconSize}px`,\n                        maxWidth: `${iconSize}px`,\n                    },\n                    attributes: {\n                        src: 'assets/avatars/' + sp.aduelavatar,\n                        alt: this.getStringM('js_help'),\n                        role: 'button',\n                    },\n                });\n                const correctAduel = sp.attempts[0].aduelcorrect;\n                this.createCorrectIcon(sp, sp.stripCorrect, leftAduel, 0, 0, iconSize, correctAduel);\n                this.createAddScore(sp, leftAduel + iconSize + this.padding, iconSize, addscoreaduel);\n            }\n        }\n\n        async createNextButton(sp, correctPos, topIncorrect) {\n            const time = correctPos === sp.selectedAnswer ?\n                this.timeBeforeShowNextButtonCorrect : this.timeBeforeShowNextButtonError;\n            sp.aItemLabel[sp.selectedAnswer].style.display = 'block';\n            setTimeout(async() => {\n                if (sp.selectedAnswer < 0 || sp.selectedAnswer >= sp.aItemLabel.length) {\n                    return;\n                }\n                sp.aItemLabel[sp.selectedAnswer].style.opacity = 1;\n                sp.aItemLabel[correctPos].style.opacity = 1;\n                sp.aItemLabel[correctPos].style.display = 'block';\n\n                const h = await this.waitForHeight(sp.aItemLabel[sp.selectedAnswer], 10, 30, this.iconSize);\n                const left = sp.answersLeft + Math.round(sp.answersWidth / 2 - this.iconSize);\n                let top;\n\n                // Computes the height of selected answer.\n                if (correctPos === sp.selectedAnswer) {\n                    top = sp.answersTop + h + 2 * this.padding + this.iconSize;\n                } else {\n                    top = topIncorrect + h + this.padding;\n                }\n                let iconSize = this.iconSize;\n                if (top + this.iconSize > this.split.height) {\n                    // Check if nextButton is out of screen.\n                    iconSize = Math.round(iconSize / 2);\n                    if (top + iconSize > this.split.height) {\n                        top = this.split.height - iconSize;\n                    }\n                }\n                if (sp.buttonNext !== undefined) {\n                    return;\n                }\n                sp.buttonNext = super.createImageButton(sp.parent, 'mmogame-quiz-next',\n                    left, top, 0, iconSize, 'assets/next.svg');\n                sp.buttonNext.title = this.getStringM('js_next_question');\n                sp.buttonNext.addEventListener(\"click\", () => {\n                    this.continueAnswer(sp.position);\n                });\n            }, time);\n        }\n\n        waitForHeight(el, maxRetries = 10, delay = 50, fallbackHeight = 24) {\n            return new Promise((resolve) => {\n                let tries = 0;\n                /**\n                 * Computes getBoundingClientRect.\n                 */\n                function check() {\n                    const h = el.getBoundingClientRect().height;\n                    if (h > 0) {\n                        resolve(h);\n                    } else {\n                        tries++;\n                        if (tries >= maxRetries) {\n                            resolve(fallbackHeight);\n                        } else {\n                            setTimeout(check, delay);\n                        }\n                    }\n                }\n                check();\n            });\n        }\n\n        removeFromServer(savedattempts) {\n            for (let i = 0; i < this.splits.length; i++) {\n                const sp = this.splits[i];\n                let j = 0;\n                while (j < sp.server.length) {\n                    const server = sp.server[j];\n                    const index = savedattempts.indexOf(parseInt(server.attemptid));\n                    if (index !== -1) {\n                        sp.server.splice(j, 1);\n                        savedattempts.splice(index, 1);\n                    } else {\n                        j++;\n                    }\n                }\n            }\n        }\n\n        createScreenSave() {\n            const size = Math.round(this.iconSize / 2);\n            const btn = this.createDOMElement('img', {\n                classname: `mmogame-quiz-save`,\n                parent: this.body,\n                styles: {\n                    position: 'absolute',\n                    left: `${window.innerWidth - this.iconSize}px`,\n                    top: `${this.padding}px`,\n                    height: `${size}px`,\n                    maxWidth: `${size}px`,\n                    transform: 'translateX(-50%)',\n                },\n                attributes: {\n                    src: 'assets/save.svg',\n                    alt: this.getStringM('js_help'),\n                    role: 'button',\n                },\n            });\n            btn.addEventListener('click', () => {\n                this.save();\n            });\n        }\n\n        save() {\n            this.askNextQuestions(undefined);\n        }\n\n        createScreenKeyboard() {\n            let instance = this;\n            document.addEventListener('keydown', function(event) {\n                const validKeys = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];\n                if (validKeys.includes(event.key)) {\n                    let split = -1;\n                    switch (event.location) {\n                        case KeyboardEvent.DOM_KEY_LOCATION_NUMPAD:\n                            split = 1;\n                            break;\n                        case KeyboardEvent.DOM_KEY_LOCATION_STANDARD:\n                            split = 0;\n                            break;\n                    }\n                    if (split >= 0 && split <= instance.splits.length) {\n                        const sp = instance.splits[split];\n                        if (!sp.isWaitingContinue) {\n                            const i = parseInt(event.key) - 1;\n                            if (i < sp.aItemLabel.length) {\n                                instance.onClickRadio(split, i, instance.colorBackground2, instance.colorScore);\n                                sp.selectedAnswer = i;\n                                instance.selectAnswer(split);\n                                instance.updateRanks();\n                                sp.isWaitingContinue = true;\n                            }\n                        }\n                    }\n                }\n\n                // Check for the \"Enter\".\n                if (event.key === 'Enter') {\n                    let split = -1;\n                    switch (event.location) {\n                        case KeyboardEvent.DOM_KEY_LOCATION_STANDARD:\n                            split = 0;\n                            break;\n                        case KeyboardEvent.DOM_KEY_LOCATION_NUMPAD:\n                            split = 1;\n                            break;\n                    }\n\n                    if (split >= 0 && split < instance.splits.length) {\n                        const sp = instance.splits[split];\n                        if (sp.isWaitingContinue && sp.buttonNext !== undefined) {\n                            instance.continueAnswer(split);\n                        }\n                    }\n                }\n            });\n        }\n    };\n});"],"names":["define","MmoGameSplit","splits","lastUpdateTime","durationAnination","timeBeforeShowNextButtonCorrect","timeBeforeShowNextButtonError","gateOpen","mmogameid","pin","kinduser","user","modelparams","this","body","firstChild","removeChild","splitx","splity","isaduel","params","JSON","parse","undefined","countX","countY","countAll","computeSizes","window","addEventListener","requestAnimationFrame","updateGamepads","play","screen","updateDelay","sendGetAttemptsSplit","avatarids","info","avatarfiles","i","length","sp","push","avatarid","avatars","gategetavatar","avatarpos","require","Ajax","join","subcommand","call","methodname","args","done","_ref","attempts","attemptqueryids","querydefinitions","queryanswerids","numattempts","answertexts","aduels","aduelavatars","aduelcorrects","auserids","queryanswerids0","grades","paletteid","console","log","palette","setColors","createScreen","fail","error","split","width","Math","round","document","documentElement","clientWidth","padding","parent","answers","answerids","avatarfile","score","rank","rankcache","isWaitingContinue","position","server","copySplitData","iY","iX","createScreenSplit","updateScore","checkShowAduel","createScreenSave","createScreenKeyboard","left","top","offsetY","height","createDOMElement","classnames","styles","overflow","ishorizontal","showRank","player","createDivScorePercent","iconSize","computeFontScorePercent","leftAvatar","avatar","classname","maxWidth","transform","attributes","src","alt","getStringM","role","align","color","getContrastingColor","colorDefinition","definitionWidth","definitionHeight","definitionTop","definition","background","innerHTML","numattempt","continueAnswer","answersLeft","answersWidth","answersTop","answersHeight","createAnswerMultichoice","computeFontSize","endofgame","colors","getColorHex","colorScore","disabled","attempt","n","aItemRadio","Array","aItemLabel","aRandom","computeRandom","ans","label","colorBackground","marginTop","marginBottom","lineHeight","htmlFor","checked","item","createRadiobox","style","id","classList","contains","onClickRadio","colorBackground2","selectedAnswer","selectAnswer","updateRanks","stateShowCorrect","timestart","floor","Date","now","from","_","j","random","minSize","bodyFontSize","parseFloat","getComputedStyle","fontSize","maxSize","min","maxHeight","isbig","scrollWidth","scrollHeight","sum","elem","parseInt","precision","leftLabel","aItemLabelTop","radio","drawRadio","space","splitInfo","queryids","auserid","attemptid","queryid","answerids0","aduelcorrect","aduel","aduelavatar","moveX","timestamp","num","direction","steps","moveY","moveAnswer","move","index","colorBack","forEach","isDisabled","add","answerid","textDecoration","remove","updateGamepad","gamepad","change","buttons","value","buttonNext","pressed","addscore","showCorrect","sendAnswer","addscoreaduel","updateScoreOpponent","shift","showNextQuestion","found","max","count","updateRank","lblRank","lblScore","changeScore","iscorrect","pos","answer","timeanswer","correctPos","indexOf","topCorrect","topIcon","offsetHeight","topIncorrect","fadeOut","moveElementSmoothly","sizeRadio","correctSmall","createCorrectIcon","incorrectSmall","timeoutStrip","setTimeout","showCorrectStrip","createNextButton","opacity","display","topSource","topDestination","div","createDiv","getSVGcorrect","zIndex","element","duration","interval","setInterval","clearInterval","finalY","startY","offsetTop","deltaY","startTime","performance","animate","elapsedTime","progress","currentY","size","colorCorrect","colorError","hideQuestion","removeCorrectIcons","askNextQuestions","autoResizeText","aduelavatarelement","iscorrects","timestarts","timeanswers","returnsplits","sp2","temp","_ref2","savedattempts","removeFromServer","cellSize","clearTimeout","stripCorrect","newsplit","createAddScore","textAlign","border","boxShadow","borderRadius","title","ceil","leftAduel","correctAduel","time","async","h","waitForHeight","super","createImageButton","el","maxRetries","delay","fallbackHeight","Promise","resolve","tries","check","getBoundingClientRect","splice","innerWidth","save","instance","event","includes","key","location","KeyboardEvent","DOM_KEY_LOCATION_NUMPAD","DOM_KEY_LOCATION_STANDARD"],"mappings":"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"}