{"version":3,"file":"mmogameui.min.js","sources":["../src/mmogameui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mod_mmogame/mmogame'], function(MmoGame) {\n    return class MmoGameUI extends MmoGame {\n\n        vertical;\n        kindSound; // Type: Number (0 = on, 1 = off, 2 = speak)\n        buttonSound;\n        colorDefinition = 0;\n        colorScore;\n\n        // Other\n        definition;\n        buttonAvatarHeight;\n        buttonAvatarTop;\n        colorBackground = 0xFFFFFF;\n\n        url;\n        mmogameid;\n        pin;\n        user;\n\n        constructor() {\n            super();\n        }\n\n        /**\n         * Returns the appropriate file for mute/unmute.\n         * @returns {string} The file path.\n         */\n        getMuteFile() {\n            return this.kindSound === 0 ? 'assets/sound-on-flat.png' : 'assets/sound-off-flat.png';\n        }\n\n        /**\n         * Plays a sound file if sound is enabled.\n         *\n         * @param {HTMLAudioElement} audioElement - The audio element to play.\n         */\n        playAudio(audioElement) {\n            if (this.kindSound !== 0 && audioElement) {\n                if (audioElement.networkState === 1) {\n                    audioElement.play();\n                }\n            }\n        }\n\n        createButtonSound(left, top) {\n            this.buttonSound = this.createButton(\n                this.body,\n                'mmogame-button-sound',\n                left,\n                top,\n                this.iconSize,\n                this.iconSize,\n                this.getMuteFile(),\n                this.getStringM('js_sound')\n            );\n            this.buttonSound.addEventListener(\"click\", () => this.onClickSound(this.buttonSound));\n        }\n\n        /**\n         * Toggles sound on or off when clicked.\n         * @param {HTMLElement} button - The sound toggle button.\n         */\n        onClickSound(button) {\n            this.kindSound = (this.kindSound + 1) % 2;\n            button.src = this.getMuteFile();\n            this.setOptions({kindSound: this.kindSound});\n        }\n\n        /**\n         * Opens the gate UI, computes sizes, and initializes settings based on the user type.\n         * @param {number} mmogameid - The game ID.\n         * @param {string} pin - The game PIN.\n         * @param {string} kinduser - The type of user (e.g., \"moodle\" or \"guid\").\n         * @param {string} user - The user identifier.\n         * @param {string} url - The game URL.\n         */\n        gateOpen(mmogameid, pin, kinduser, user, url) {\n            this.url = url;\n            this.minFontSize *= 2;\n            this.maxFontSize *= 2;\n\n            // Saves parameters to class variables.\n            this.mmogameid = mmogameid;\n            this.pin = pin;\n            this.kinduser = kinduser;\n            this.user = user;\n            this.gateComputeSizes();\n\n            this.areaTop = this.padding;\n            this.areaWidth = Math.round(window.innerWidth - 2 * this.padding);\n            this.areaHeight = Math.round(window.innerHeight - this.areaTop) - this.padding;\n\n            let instance = this;\n            this.getOptions().then(function(options) {\n                options.kindsound = options.kindsound || 0;\n                options.nickname = options.nickname || '';\n                options.avatarid = options.avatarid || 0;\n                options.paletteid = options.paletteid || 0;\n                instance.kindSound = [1, 2].includes(options.kindSound) ? options.kindSound : 0;\n\n                const isReady =\n                    options.nickname &&\n                    options.avatarid !== 0 &&\n                    options.paletteid !== 0;\n\n                if (kinduser === 'moodle' && isReady) {\n                    instance.gatePlayGame(false, options.nickname, options.paletteid, options.avatarid);\n                    return;\n                }\n\n                if (kinduser === 'guid') {\n                    options.userGUID = options.userGUID || '';\n\n                    if (options.userGUID.length >= 10 && isReady) {\n                        instance.user = options.userGUID;\n                        instance.gatePlayGame(false, options.nickname, options.paletteid, options.avatarid);\n                        return;\n                    }\n                }\n                instance.gateCreateScreen();\n            })\n            .catch((error) => {\n                this.showError('gateOpen', error);\n            });\n        }\n\n        gatePlayGame(save, nickname, paletteid, avatarid) {\n            if (this.kinduser === 'guid') {\n                if (this.user === '') {\n                    this.uuid4();\n                }\n            }\n\n            if (!save) {\n                this.nickname = nickname;\n                this.paletteid = paletteid;\n                this.avatarid = avatarid;\n                this.callGetAttempt({nickname: nickname, colorpaletteid: paletteid, avatarid: avatarid});\n                return;\n            }\n\n            let options = {nickname: nickname, avatarid: avatarid, paletteid: paletteid};\n\n            let instance = this;\n            this.setOptions(options)\n                .then(function() {\n                    instance.nickname = nickname;\n                    instance.paletteid = paletteid;\n                    instance.avatarid = avatarid;\n                    instance.callGetAttempt();\n                    return true;\n                })\n                .catch(error => {\n                    instance.showError(error.message);\n                    return false;\n                });\n        }\n\n        gateCreateScreen() {\n            this.vertical = window.innerWidth < window.innerHeight;\n            this.createArea();\n\n            if (this.vertical) {\n                this.gateCreateScreenVertical();\n            } else {\n                this.gateCreateScreenHorizontal();\n            }\n        }\n\n        gateCreateScreenVertical() {\n            let maxHeight = this.areaHeight - 5 * this.padding - this.iconSize;\n            let maxWidth = this.areaWidth;\n            let instance = this;\n            let size;\n\n            const labels = [this.getStringM('js_name') + \": \", this.getStringM('js_code'), this.getStringM('js_palette')];\n            this.fontSize = this.findbest(this.minFontSize, this.maxFontSize, function(fontSize) {\n                size = instance.gateComputeLabelSize(fontSize, labels);\n\n                if (size[0] >= maxWidth) {\n                    return 1;\n                }\n                let heightCode = instance.kinduser !== 'guid' && instance.kinduser !== 'moodle' ? size[1] + instance.padding : 0;\n\n                let heightColors = (maxHeight - 4 * fontSize) * 2 / 5;\n                let n = Math.floor(heightColors / instance.iconSize);\n                if (n === 0) {\n                    return 1;\n                }\n                let heightAvatars = (maxHeight - 4 * fontSize + heightColors) * 3 / 5;\n                let computedHeight = heightCode + 3 * size[1] + 8 * instance.padding + heightColors + heightAvatars;\n\n                return computedHeight < maxHeight ? -1 : 1;\n            });\n\n            let gridWidthColors = maxWidth - this.padding;\n            let gridWidthAvatars = maxWidth - this.padding;\n            let gridHeightColors = (maxHeight - 4 * this.fontSize) * 2 / 5;\n            let newHeight = Math.floor(gridHeightColors / instance.iconSize) * instance.iconSize;\n            let newWidth = Math.floor(gridWidthColors / instance.iconSize) * instance.iconSize;\n            let rest = gridHeightColors - newHeight;\n            gridHeightColors = newHeight;\n            let gridHeightAvatars = (maxHeight - 4 * this.fontSize + rest) * 3 / 5;\n\n            // Creates the \"Code\" field.\n            let bottom;\n            if (this.kinduser !== 'guid' && this.kinduser !== 'moodle') {\n                // A bottom = this.gateCreateCode(0, 0, maxWidth, this.fontSize, size[0]);\n                bottom = this.gateCreateLabelEditVertical(0, 0, maxWidth, this.fontSize,\n                    size[0], this.getStringM('js_code') + \": \",\n                    'mmogame-gate-code-label', 'mmogame-gate-code') + 2 * this.padding;\n                this.edtCode = this.edt;\n                this.edtCode.addEventListener(\"keyup\", this.debounce(() => instance.gateUpdateSubmit(), 300));\n            } else {\n                bottom = 0;\n            }\n\n            bottom = this.gateCreateLabelEditVertical(0, bottom,\n                newWidth - 2 * this.padding, this.fontSize, size[0],\n                this.getStringM('js_name') + \": \",\n                'mmogame-gate-name-label', 'mmogame-gate-name') + 2 * this.padding;\n            this.edtNickname = this.edt;\n            this.edtNickname.addEventListener(\"keyup\", this.debounce(() => instance.gateUpdateSubmit(), 300));\n\n            this.gateCreateScreenPalette(bottom, gridWidthColors, gridHeightColors,\n                gridWidthAvatars, gridHeightAvatars);\n\n            bottom += this.fontSize + this.padding;\n\n            // Vertical\n            this.gateSendGetColorsAvatars(0, bottom, gridWidthColors, gridHeightColors,\n                0, bottom + gridHeightColors + this.fontSize + this.padding, gridWidthAvatars,\n                gridHeightAvatars);\n\n            let bottom2 = bottom + gridHeightColors + this.fontSize + this.padding + gridHeightAvatars;\n\n            this.gateCreateButtonSubmit(maxWidth, bottom2);\n        }\n\n        gateCreateScreenHorizontal() {\n            let maxHeight = this.areaHeight - 7 * this.padding - this.iconSize;\n            let maxWidth = this.areaWidth;\n            let instance = this;\n            let size;\n\n            const sName = this.getStringM('js_name') + \": \";\n            let labels = [this.getStringM('js_code'), sName, this.getStringM('js_palette')];\n\n            this.fontSize = this.findbest(this.minFontSize, this.maxFontSize,\n                function(fontSize) {\n                size = instance.gateComputeLabelSize(fontSize, labels);\n\n                if (size[0] >= maxWidth) {\n                    return 1;\n                }\n                let heightCode = instance.kinduser !== 'guid' && instance.kinduser !== 'moodle' ? size[1] + instance.padding : 0;\n\n                let heightColors = (maxHeight - 4 * fontSize) * 2 / 5;\n                let n = Math.floor(heightColors / instance.iconSize);\n                if (n === 0) {\n                    return 1;\n                }\n                let heightAvatars = (maxHeight - 4 * fontSize + heightColors) * 3 / 5;\n                let computedHeight = heightCode + 2 * size[1] + 7 * instance.padding + heightColors + heightAvatars;\n\n                return computedHeight < maxHeight ? -1 : 1;\n            });\n\n            let gridWidthColors = maxWidth - this.padding;\n            let gridWidthAvatars = maxWidth - this.padding;\n            let gridHeightColors = (maxHeight - 4 * this.fontSize) * 2 / 5;\n            let newHeight = Math.floor(gridHeightColors / instance.iconSize) * instance.iconSize;\n            let newWidth = Math.floor(gridWidthColors / instance.iconSize) * instance.iconSize;\n            let rest = gridHeightColors - newHeight;\n            gridHeightColors = newHeight;\n            let gridHeightAvatars = Math.floor((maxHeight - 4 * this.fontSize) * 3 / 5 + rest);\n\n            // Creates the \"Code\" field.\n            let bottom;\n            if (this.kinduser !== 'guid' && this.kinduser !== 'moodle') {\n                // B bottom = this.gateCreateCode(0, 0, maxWidth, this.fontSize, size[0]);\n                bottom = this.gateCreateLabelEditVertical(0, 0, maxWidth, this.fontSize, size[0],\n                    this.getStringM('js_code')) + 2 * this.padding;\n                this.edtCode = this.edt;\n                this.edtCode.addEventListener(\"keyup\", this.debounce(() => instance.gateUpdateSubmit(), 300));\n            } else {\n                bottom = 0;\n            }\n\n            // Creates the \"nickname\" field.\n            let sizeLabel = this.gateComputeLabelSize(this.fontSize, [sName]);\n            bottom = this.gateCreateLabelEditHorizontal(0, bottom,\n                newWidth - 2 * this.padding, this.fontSize,\n                sizeLabel[0], this.getStringM('js_name') + \": \",\n                'mmogame-gate-name-label', 'mmogame-gate-name');\n\n            this.edtNickname = this.edt;\n\n            this.edtNickname.addEventListener(\"keyup\", this.debounce(() => instance.gateUpdateSubmit(), 300));\n\n            let label1 = document.createElement(\"label\");\n            label1.style.position = \"absolute\";\n            label1.style.color = this.getContrastingColor(this.colorBackground);\n            label1.innerHTML = this.getStringM('js_palette');\n            label1.style.font = \"FontAwesome\";\n            label1.style.fontSize = this.fontSize + \"px\";\n            label1.style.width = \"0px\";\n            label1.style.whiteSpace = \"nowrap\";\n            this.area.appendChild(label1);\n\n            // Button refresh color palettes\n            let btn = this.createImageButton(this.area, 'mmogame-button-gate-refresh',\n                label1.scrollWidth + this.padding, bottom, this.iconSize, this.fontSize,\n                'assets/refresh.svg', false, 'refresh');\n            this.addEventListenerRefresh(btn, bottom, gridWidthColors, gridHeightColors,\n                gridWidthAvatars, gridHeightAvatars, true, false);\n\n            label1.style.left = 0;\n            label1.style.color = this.getContrastingColor(this.colorBackground);\n            label1.style.top = bottom + \"px\";\n            bottom += this.fontSize + this.padding;\n\n            let label = document.createElement(\"label\");\n            label.style.position = \"absolute\";\n            label.innerHTML = this.getStringM('js_avatars');\n            label.style.font = \"FontAwesome\";\n            label.style.fontSize = this.fontSize + \"px\";\n            label.style.width = \"0 px\";\n            label.style.whiteSpace = \"nowrap\";\n            this.area.appendChild(label);\n\n            // Button refresh avatars\n            btn = this.createImageButton(this.area, 'mmogame-button-gate-refresh-avatars',\n                label.scrollWidth + this.padding, bottom + gridHeightColors, this.iconSize,\n                this.fontSize, 'assets/refresh.svg', false, 'refresh');\n            btn.addEventListener(\"click\",\n                function() {\n                    let elements = instance.area.getElementsByClassName(\"mmogame_avatar\");\n\n                    while (elements[0]) {\n                        elements[0].parentNode.removeChild(elements[0]);\n                    }\n\n                    instance.gateSendGetColorsAvatars(0, bottom, gridWidthColors, gridHeightColors, 0,\n                        bottom + gridHeightColors + instance.fontSize + instance.padding, gridWidthAvatars, gridHeightAvatars,\n                        false, true);\n                }\n            );\n\n            // Avatar\n            label.style.left = \"0 px\";\n            label.style.color = this.getContrastingColor(this.colorBackground);\n            label.style.top = (bottom + gridHeightColors) + \"px\";\n\n            // Horizontal\n            this.gateSendGetColorsAvatars(0, bottom, gridWidthColors, gridHeightColors,\n                0, bottom + gridHeightColors + this.fontSize + this.padding, gridWidthAvatars,\n                gridHeightAvatars);\n\n            let bottom2 = bottom + gridHeightColors + this.fontSize + this.padding + gridHeightAvatars;\n            this.btnSubmit = this.createImageButton(this.area, 'mmogame-button-gate-submit',\n                (maxWidth - this.iconSize) / 2, bottom2, 0, this.iconSize,\n                'assets/submit.svg', false, 'submit');\n            this.btnSubmit.style.visibility = 'hidden';\n            this.btnSubmit.addEventListener(\"click\",\n                function() {\n                    if (instance.edtCode !== undefined) {\n                        instance.user = instance.edtCode.value;\n                    }\n                    instance.gatePlayGame(true, instance.edtNickname.value, instance.paletteid, instance.avatarid);\n                }\n            );\n        }\n\n        gateComputeLabelSize(fontSize, aLabel) {\n            let maxWidth = 0;\n            let maxHeight = 0;\n\n            for (let i = 0; i < aLabel.length; i++) {\n                const label = document.createElement(\"label\");\n                label.style.position = \"absolute\";\n                label.innerHTML = aLabel[i];\n                label.style.whiteSpace = \"nowrap\";\n                label.style.font = \"FontAwesome\";\n                label.style.fontSize = fontSize + \"px\";\n                label.style.width = \"0px\";\n                label.style.height = \"0px\";\n                this.area.appendChild(label);\n\n                if (label.scrollWidth > maxWidth) {\n                    maxWidth = label.scrollWidth;\n                }\n\n                if (label.scrollHeight > maxHeight) {\n                    maxHeight = label.scrollHeight;\n                }\n                this.area.removeChild(label);\n            }\n\n            return [maxWidth, maxHeight];\n        }\n\n        gateCreateLabelEditVertical(left, top, width, fontSize, labelWidth, title, classnamesLabel, classnamesEdit) {\n            const label = this.createLabel(this.area, classnamesLabel, left, top, labelWidth, fontSize, title);\n            label.style.color = this.getContrastingColor(this.colorBackground);\n\n            top += label.scrollHeight;\n\n            this.edt = this.gateCreateInput(classnamesEdit, left, top, width, fontSize);\n\n            return top + fontSize + this.padding;\n        }\n\n        gateShowAvatars(left, top, width, height, countX, avatarids, avatars) {\n            if (!avatars || avatars.length === 0) {\n                return; // Exit early if no avatars exist\n            }\n\n            const fragment = document.createDocumentFragment();\n\n            this.avatar = undefined;\n            const count = avatars.length;\n            let leftOriginal = left;\n            let w = Math.round(this.padding / 2) + \"px\";\n            for (let i = 0; i < count; i++) {\n                let avatarImagePath = 'assets/avatars/' + avatars[i];\n                let btn = this.createCenterImageButton(\n                    fragment,\n                    left, top,\n                    this.iconSize - this.padding, this.iconSize - this.padding,\n                    'mmogame-avatar',\n                    avatarImagePath\n                );\n                btn.classList.add(\"mmogame_avatar\");\n                let id = avatarids[i];\n                btn.addEventListener(\"click\", () => {\n                    this.gateUpdateAvatar(btn, id, w);\n                });\n\n                // Move left position after placing the button\n                left += this.iconSize;\n\n                // Reset left and move to the next row after filling countX buttons\n                if ((i + 1) % countX === 0) {\n                    top += this.iconSize;\n                    left = leftOriginal;\n                }\n            }\n            this.area.appendChild(fragment);\n        }\n\n        gateSendGetColorsAvatars(leftColors, topColors, gridWidthColors, gridHeightColors, leftAvatars, topAvatars,\n                                 gridWidthAvatars, gridHeightAvatars, updateColors = true, updateAvatars = true) {\n\n            let countXcolors = Math.floor(gridWidthColors / this.iconSize);\n            let countYcolors = Math.floor(gridHeightColors / this.iconSize);\n\n            let countXavatars = Math.floor(gridWidthAvatars / this.iconSize);\n            let countYavatars = Math.floor((gridHeightAvatars + 2 * this.padding) / this.iconSize);\n\n            if (!updateColors) {\n                countXcolors = countXcolors = 0;\n            }\n            if (!updateAvatars) {\n                countXavatars = countYavatars = 0;\n            }\n\n            let instance = this;\n            require(['core/ajax'], function(Ajax) {\n                // Defining the parameters to be passed to the service\n                let params = {\n                    mmogameid: instance.mmogameid,\n                    kinduser: instance.kinduser,\n                    user: instance.user,\n                    avatars: countXavatars * countYavatars,\n                    colorpalettes: countXcolors * countYcolors,\n                };\n\n                // Calling the service through the Moodle AJAX API\n                let getAssets = Ajax.call([{\n                    methodname: 'mod_mmogame_get_assets',\n                    args: params\n                }]);\n\n                // Handling the response\n                getAssets[0].done(function({avatarids, avatars, colorpaletteids, colorpalettes}) {\n                    if (updateColors) {\n                        instance.gateShowColorPalettes(leftColors, topColors, gridWidthColors,\n                            gridHeightColors, countXcolors, countYcolors, colorpaletteids, colorpalettes);\n                    }\n                    if (updateAvatars) {\n                        instance.gateShowAvatars(leftAvatars, topAvatars, gridWidthAvatars, gridHeightAvatars, countXavatars,\n                            avatarids, avatars);\n                    }\n                }).fail(function(error) {\n                    return error;\n                });\n            });\n        }\n\n        gateShowColorPalettes(left, top, width, height, countX, countY, colorpaletteids, colorpalettes) {\n            let i = 0; // Counter for color palettes\n            const count = colorpalettes.length;\n            this.canvasColor = undefined;\n            const canvasSize = this.iconSize - this.padding * 3 / 2;\n            const parsedPalettes = colorpalettes.map(palette =>\n                palette.split(\",\").map(value => parseInt(value, 10) || 0)\n            );\n            const fragment = document.createDocumentFragment();\n            for (let iy = 0; iy < countY; iy++) {\n                for (let ix = 0; ix < countX; ix++) {\n                    // Check if we exceed available palettes or encounter invalid data\n                    if (i >= count || !parsedPalettes[i] || !colorpaletteids[i]) {\n                        i++; // Increment and continue if invalid\n                        continue;\n                    }\n\n                    // Create a new canvas element\n                    let canvas = document.createElement('canvas');\n                    canvas.style.position = \"absolute\";\n                    canvas.style.left = `${left + ix * this.iconSize}px`;\n                    canvas.style.top = `${top + iy * this.iconSize}px`;\n                    canvas.width = canvasSize;\n                    canvas.height = canvasSize;\n                    canvas.style.cursor = 'pointer';\n                    canvas.classList.add(\"mmogame_color\");\n\n                    // Append canvas to the area\n                    fragment.appendChild(canvas);\n\n                    // Render the color palette on the canvas\n                    this.showColorPalette(canvas, parsedPalettes[i]);\n\n                    // Get the palette ID and attach a click event listener\n                    let id = colorpaletteids[i];\n                    canvas.addEventListener(\"click\", () => {\n                        this.gateUpdateColorPalette(canvas, id);\n                    });\n\n                    i++;\n                }\n            }\n            this.area.appendChild(fragment);\n        }\n\n        gateUpdateColorPalette(canvas, id) {\n            if (this.canvasColor !== undefined) {\n                this.canvasColor.style.borderStyle = \"none\";\n            }\n            this.canvasColor = canvas;\n            let w = Math.round(this.padding / 2) + \"px\";\n\n            Object.assign(canvas.style, {\n                borderStyle: \"outset\",\n                borderLeftWidth: w,\n                borderTopWidth: w,\n                borderRightWidth: w,\n                borderBottomWidth: w,\n            });\n            this.paletteid = id;\n\n            this.gateUpdateSubmit();\n        }\n\n        gateUpdateAvatar(avatar, id, w) {\n            if (this.avatar !== undefined) {\n                this.avatar.style.borderStyle = \"none\";\n            }\n            this.avatar = avatar;\n            avatar.style.borderStyle = \"outset\";\n\n            avatar.style.borderLeftWidth = w;\n            avatar.style.borderTopWidth = w;\n            avatar.style.borderRightWidth = w;\n            avatar.style.borderBottomWidth = w;\n\n            this.avatarid = id;\n\n            this.gateUpdateSubmit();\n        }\n\n        /**\n         * Updates the visibility of the submit button based on form input validation.\n         */\n        gateUpdateSubmit() {\n            const isCodeValid = this.edtCode?.value ? Number(this.edtCode.value) > 0 : true;\n            const hasAvatar = this.avatarid !== undefined;\n            const hasPalette = this.paletteid !== undefined;\n            const hasNickname = this.edtNickname?.value?.length > 0;\n\n            this.btnSubmit.style.visibility =\n                isCodeValid && hasAvatar && hasPalette && hasNickname\n                    ? 'visible'\n                    : 'hidden';\n        }\n\n        gateComputeSizes() {\n            this.computeSizes();\n            this.iconSize = Math.round(0.8 * this.iconSize);\n            this.padding = Math.round(0.8 * this.padding);\n        }\n\n        gateCreateLabelEditHorizontal(left, top, width, fontSize, labelWidth, title, classnamesLabel, classnamesEdit) {\n            const label = this.createLabel(this.area, classnamesLabel, left, top, labelWidth, fontSize, title);\n            label.style.color = this.getContrastingColor(this.colorBackground);\n\n            let ret = top + Math.max(label.scrollHeight, fontSize) + this.padding;\n\n            let leftEdit = (left + labelWidth + this.padding);\n            this.edt = this.gateCreateInput(classnamesEdit, leftEdit, top, width - leftEdit - this.padding, fontSize);\n\n            return ret;\n        }\n\n        gateCreateInput(classnames, left, top, width, fontSize) {\n            const div = document.createElement(\"input\");\n            div.style.position = \"absolute\";\n            div.style.width = width + \"px\";\n            div.style.type = \"text\";\n            div.style.fontSize = fontSize + \"px\";\n\n            div.style.left = left + \"px\";\n            div.style.top = top + \"px\";\n            div.autofocus = true;\n\n            div.classList.add(...classnames.split(/\\s+/));\n\n            this.area.appendChild(div);\n            this.edt = div;\n\n            return div;\n        }\n\n        /**\n         * Creates the screen palette UI with a label and a refresh button.\n         * @param {number} bottom - The vertical position for the elements.\n         * @param {number} gridWidthColors - The width of the color grid in pixels.\n         * @param {number} gridHeightColors - The height of the color grid in pixels.\n         * @param {number} gridWidthAvatars - The width of the avatar grid in pixels.\n         * @param {number} gridHeightAvatars - The height of the avatar grid in pixels.\n         */\n        gateCreateScreenPalette(bottom, gridWidthColors, gridHeightColors, gridWidthAvatars, gridHeightAvatars) {\n            // Create and configure the label\n            const label = this.createDOMElement('label', {\n                parent: this.area,\n                styles: {\n                    position: 'absolute',\n                    font: 'FontAwesome',\n                    fontSize: `${this.fontSize}px`,\n                    width: '0px',\n                    whiteSpace: 'nowrap',\n                    color: this.getContrastingColor(this.colorBackground),\n                    top: `${bottom}px`,\n                    left: '0px',\n                },\n                attributes: {\n                    innerHTML: this.getStringM('js_palette'),\n                },\n            });\n\n            // Create the refresh button\n            const btn = this.createImageButton(\n                this.area,\n                'mmogame-gate-palette',\n                label.scrollWidth + this.padding, bottom,\n                this.iconSize, this.fontSize,\n                'assets/refresh.svg',\n                false, 'refresh'\n            );\n\n            // Add event listener to refresh button\n            this.addEventListenerRefresh(btn, bottom, gridWidthColors, gridHeightColors, gridWidthAvatars, gridHeightAvatars);\n        }\n\n        gateCreateButtonSubmit = (maxWidth, bottom2) => {\n            this.btnSubmit = this.createImageButton(this.area, 'mmogame-gate-submit',\n                (maxWidth - this.iconSize) / 2, bottom2, 0, this.iconSize,\n                'assets/submit.svg', false, 'submit');\n            this.btnSubmit.style.visibility = 'hidden';\n            const instance = this;\n            this.btnSubmit.addEventListener(\"click\", function() {\n                if (instance.edtCode !== undefined) {\n                    instance.user = instance.edtCode.value;\n                }\n                instance.gatePlayGame(true, instance.edtNickname.value, instance.paletteid, instance.avatarid);\n            });\n        };\n\n\n        addEventListenerRefresh(btn, bottom, gridWidthColors, gridHeightColors, gridWidthAvatars, gridHeightAvatars,\n                                updateColors, updateAvatars) {\n            const instance = this;\n            btn.addEventListener(\"click\",\n                function() {\n                    const elements = Array.from(instance.area.getElementsByClassName(\"mmogame_color\"));\n                    elements.forEach(element => element.remove());\n\n                    instance.gateSendGetColorsAvatars(0, bottom, gridWidthColors, gridHeightColors,\n                        0, bottom + gridHeightColors + instance.fontSize + instance.padding, gridWidthAvatars, gridHeightAvatars,\n                        updateColors, updateAvatars);\n                }\n            );\n        }\n\n        /**\n         * Creates the main game area.\n         */\n        createArea() {\n            if (this.area) {\n                this.body.removeChild(this.area);\n            }\n\n            this.area = this.createDiv(\n                this.body,\n                'mmogame-area',\n                this.padding,\n                this.areaTop,\n                this.areaWidth,\n                this.areaHeight\n            );\n        }\n\n        /**\n         * Creates a modal dialog.\n         * @param {string} classnames - The CSS class for the modal.\n         * @param {string} title - The title of the modal.\n         * @param {string} content - The content of the modal.\n         * @returns {HTMLElement} - The modal element.\n         */\n        createModal(classnames, title, content) {\n            const modal = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${classnames} modal`,\n                styles: {\n                    position: 'fixed',\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%, -50%)',\n                    backgroundColor: '#fff',\n                    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\n                    padding: '20px',\n                    zIndex: 1000,\n                },\n            });\n\n            const header = this.createDOMElement('div', {\n                parent: modal,\n                classnames: `${classnames}-header`,\n                styles: {\n                    fontWeight: 'bold',\n                    marginBottom: '10px',\n                },\n            });\n            header.innerText = title;\n\n            const body = this.createDOMElement('div', {\n                parent: modal,\n                classnames: `${classnames}-body`,\n            });\n            body.innerHTML = content;\n\n            const closeButton = this.createDOMElement('button', {\n                parent: modal,\n                classnames: `${classnames}-close`,\n                styles: {\n                    marginTop: '10px',\n                    display: 'block',\n                    marginLeft: 'auto',\n                    marginRight: 'auto',\n                },\n                attributes: {type: 'button'},\n            });\n            closeButton.innerText = 'Close';\n\n            closeButton.addEventListener('click', () => {\n                this.body.removeChild(modal);\n            });\n\n            return modal;\n        }\n\n\n        createDivMessage(classnames, message) {\n            if (this.area !== undefined) {\n                this.body.removeChild(this.area);\n                this.area = undefined;\n            }\n\n            if (this.divMessageHelp !== undefined) {\n                this.body.removeChild(this.divMessageHelp);\n                this.divMessageHelp = undefined;\n            }\n\n            let left = this.padding;\n            let top = this.areaTop;\n            let width = window.innerWidth - 2 * this.padding;\n            let height = window.innerHeight - this.getCopyrightHeight() - this.padding - top;\n\n            this.createDivMessageDo(classnames, left, top, width, height, message, height);\n\n            this.divMessage.style.top = (height - this.divMessage.scrollHeight) / 2 + \"px\";\n        }\n\n\n        createButtonsAvatar(num, left, widthNickName = 0, heightNickName = 0) {\n            if (widthNickName === 0) {\n                widthNickName = this.iconSize;\n            }\n            if (heightNickName === 0) {\n                heightNickName = this.iconSize - this.buttonAvatarHeight;\n            }\n            if (this.buttonsAvatarLeft === undefined) {\n                this.buttonsAvatarLeft = [];\n            }\n            this.buttonsAvatarLeft[num] = left;\n\n            if (this.buttonsAvatarSrc === undefined) {\n                this.buttonsAvatarSrc = [];\n            }\n            this.buttonsAvatarSrc[num] = \"\";\n\n            if (this.nicknames === undefined) {\n                this.nicknames = [];\n            }\n            this.nicknames[num] = \"\";\n\n            if (this.buttonsAvatar === undefined) {\n                this.buttonsAvatar = [];\n            }\n            this.buttonsAvatar[num] = this.createImageButton(this.body, 'mmogame-avatar' + num,\n                left, this.avatarTop, this.iconSize, this.iconSize);\n            if (num === 2 && this.avatarTop !== undefined) {\n                this.buttonsAvatar[num].title = this.getStringM('js_opponent');\n            }\n\n            if (this.divNicknames === undefined) {\n                this.divNicknames = [];\n            }\n            if (this.divNicknamesWidth === undefined) {\n                this.divNicknamesWidth = [];\n            }\n            if (this.divNicknamesHeight === undefined) {\n                this.divNicknamesHeight = [];\n            }\n            this.divNicknamesWidth[num] = widthNickName;\n            this.divNicknamesHeight[num] = heightNickName;\n\n            this.divNicknames[num] = this.createDiv(this.body, 'mmogame-gate-nickname',\n                left, this.padding, widthNickName, heightNickName);\n        }\n\n\n        createDivMessageStart(message) {\n            if (this.area !== undefined) {\n                this.body.removeChild(this.area);\n                this.area = undefined;\n            }\n\n            let left = this.padding;\n            let top = this.areaTop;\n            let width = window.innerWidth - 2 * this.padding;\n            let height = window.innerHeight - this.getCopyrightHeight() - this.padding - top;\n\n            let height1 = height / 8;\n\n            this.createDivMessageDo('mmogame-message-start', left, top, width, height, message, height1);\n\n            top += (height1 - this.divMessage.scrollHeight) / 2;\n            this.divMessage.style.top = top + \"px\";\n\n            if (this.divMessageHelp === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"left\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.color = this.getContrastingColor(this.colorDefinition);\n                let top = this.iconSize + 3 * this.padding + height1;\n                div.style.top = (top + this.padding) + \"px\";\n                div.style.height = (height - height1) + \"px\";\n                this.divMessageHelp = div;\n                this.body.appendChild(this.divMessageHelp);\n\n                this.showHelpScreen(div, (width - 2 * this.padding), (height - height1));\n            }\n        }\n\n\n        /**\n         * Creates a score display element.\n         * @param {string} classnames - The list of classes.\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} width - The width of the score element in pixels.\n         * @param {number} height - The height of the score element in pixels.\n         * @param {number} num - Identifier for the score element.\n         */\n        createAddScore(classnames, left, top, width, height, num) {\n            const div = this.createDiv(this.body, classnames, left, top, width, height);\n            div.style.textAlign = \"center\";\n            div.style.color = this.getContrastingColor(this.colorScore);\n            div.title = this.getStringM('js_grade_last_question');\n            if (num === 1) {\n                this.labelAddScore = div;\n            } else {\n                this.labelAddScore2 = div;\n            }\n        }\n\n        updateButtonsAvatar(num, avatar, nickname) {\n            if (avatar === undefined) {\n                avatar = \"\";\n            }\n            if (nickname === undefined) {\n                nickname = \"\";\n            }\n\n            if (avatar === \"\" && nickname === \"\") {\n                this.buttonsAvatar[num].style.visibility = 'hidden';\n                this.divNicknames[num].style.visibility = 'hidden';\n                return;\n            }\n\n            if (this.nicknames[num] !== nickname || nickname === \"\") {\n                this.nicknames[num] = nickname;\n                let s = nickname;\n\n                if (nickname.length === 0) {\n                    s = avatar;\n                    let pos = s.lastIndexOf(\"/\");\n                    if (pos >= 0) {\n                        s = s.slice(pos + 1);\n                    }\n                    pos = s.lastIndexOf(\".\");\n                    if (pos >= 0) {\n                        s = s.slice(0, pos);\n                    }\n                    const filenameWithExt = avatar.split('/').pop(); // Extract the file name with its extension\n                    s = filenameWithExt.split('.').slice(0, -1).join('.'); // Remove the extension from the file name\n                }\n                s = this.repairNickname(s);\n                if (this.divNicknames[num] !== undefined && this.divNicknames[num].innerHTML !== s) {\n                    this.divNicknames[num].innerHTML = s;\n                    this.divNicknames[num].style.textAlign = \"center\";\n                    this.divNicknames[num].style.color = this.getContrastingColor(this.colorsBackground);\n                    this.autoResizeText(this.divNicknames[num], this.divNicknamesWidth[num], this.divNicknamesHeight[num], true,\n                        0, 0, 1);\n                }\n            }\n\n            if (avatar !== this.buttonsAvatarSrc[num]) {\n                this.updateImageButton(this.buttonsAvatar[num], avatar !== \"\" ? \"assets/avatars/\" + avatar : \"\");\n                this.buttonsAvatarSrc[num] = avatar;\n            }\n\n            this.buttonsAvatar[num].alt = this.divNicknames[num].innerHTML;\n\n            this.buttonsAvatar[num].style.visibility = 'visible';\n            this.divNicknames[num].style.visibility = 'visible';\n        }\n\n        callGetAttempt(extraparams) {\n            let instance = this;\n            require(['core/ajax'], function(Ajax) {\n                let params = {\n                    mmogameid: instance.mmogameid,\n                    kinduser: instance.kinduser,\n                    user: instance.user,\n                    nickname: null,\n                    colorpaletteid: null,\n                    avatarid: null,\n                };\n                if (extraparams !== undefined) {\n                    params = {...params, ...extraparams};\n                }\n                // Calling the service through the Moodle AJAX API\n                let getAttempt = Ajax.call([{\n                    methodname: 'mmogametype_quiz_get_attempt',\n                    args: params,\n                }]);\n\n                // Handling the response\n                getAttempt[0].done(function(response) {\n                    if (extraparams !== undefined && extraparams.colorpaletteid !== undefined) {\n                        instance.openGame();\n                        instance.colors = undefined;\n                    }\n                    instance.processGetAttempt(JSON.parse(response));\n                }).fail(function(error) {\n                    instance.createDivMessage('mmogame-error', error.message);\n                    return error;\n                });\n            });\n        }\n\n        /**\n         * Displays an error message on the screen.\n         * @param {string} name - The name of the error context.\n         * @param {Error} [error] - The error object to display.\n         */\n        showError(name, error) {\n            const message = error?.message || 'An unknown error occurred.';\n            this.createDivMessage('mmogame-error', message);\n        }\n\n        createDivMessageDo(classnames, left, top, width, height, message, heightmessage) {\n            if (this.divMessageBackground === undefined) {\n                let div = this.createDiv(this.body, classnames, left, top, width, height);\n                div.style.background = this.getColorHex(this.colorDefinition);\n                this.divMessageBackground = div;\n            }\n\n            if (this.divMessage === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"center\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.background = this.getColorHex(this.colorDefinition);\n                div.style.color = this.getContrastingColor(this.colorDefinition);\n                this.divMessage = div;\n            }\n            this.divMessage.innerHTML = message;\n            this.body.appendChild(this.divMessage);\n            this.autoResizeText(this.divMessage, width, heightmessage, false, this.minFontSize, this.maxFontSize, 0.5);\n        }\n};\n});"],"names":["define","MmoGame","constructor","maxWidth","bottom2","btnSubmit","this","createImageButton","area","iconSize","style","visibility","instance","addEventListener","undefined","edtCode","user","value","gatePlayGame","edtNickname","paletteid","avatarid","getMuteFile","kindSound","playAudio","audioElement","networkState","play","createButtonSound","left","top","buttonSound","createButton","body","getStringM","onClickSound","button","src","setOptions","gateOpen","mmogameid","pin","kinduser","url","minFontSize","maxFontSize","gateComputeSizes","areaTop","padding","areaWidth","Math","round","window","innerWidth","areaHeight","innerHeight","getOptions","then","options","kindsound","nickname","includes","isReady","userGUID","length","gateCreateScreen","catch","error","showError","save","uuid4","callGetAttempt","colorpaletteid","message","vertical","createArea","gateCreateScreenVertical","gateCreateScreenHorizontal","size","maxHeight","labels","fontSize","findbest","gateComputeLabelSize","heightCode","heightColors","floor","heightAvatars","gridWidthColors","gridWidthAvatars","gridHeightColors","newHeight","newWidth","rest","bottom","gridHeightAvatars","gateCreateLabelEditVertical","edt","debounce","gateUpdateSubmit","gateCreateScreenPalette","gateSendGetColorsAvatars","gateCreateButtonSubmit","sName","sizeLabel","gateCreateLabelEditHorizontal","label1","document","createElement","position","color","getContrastingColor","colorBackground","innerHTML","font","width","whiteSpace","appendChild","btn","scrollWidth","addEventListenerRefresh","label","elements","getElementsByClassName","parentNode","removeChild","aLabel","i","height","scrollHeight","labelWidth","title","classnamesLabel","classnamesEdit","createLabel","gateCreateInput","gateShowAvatars","countX","avatarids","avatars","fragment","createDocumentFragment","avatar","count","leftOriginal","w","avatarImagePath","createCenterImageButton","classList","add","id","gateUpdateAvatar","leftColors","topColors","leftAvatars","topAvatars","updateColors","updateAvatars","countXcolors","countYcolors","countXavatars","countYavatars","require","Ajax","params","colorpalettes","call","methodname","args","done","colorpaletteids","gateShowColorPalettes","fail","countY","canvasColor","canvasSize","parsedPalettes","map","palette","split","parseInt","iy","ix","canvas","cursor","showColorPalette","gateUpdateColorPalette","borderStyle","Object","assign","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","isCodeValid","Number","hasAvatar","hasPalette","hasNickname","computeSizes","ret","max","leftEdit","classnames","div","type","autofocus","createDOMElement","parent","styles","attributes","Array","from","forEach","element","remove","createDiv","createModal","content","modal","transform","backgroundColor","boxShadow","zIndex","fontWeight","marginBottom","innerText","closeButton","marginTop","display","marginLeft","marginRight","createDivMessage","divMessageHelp","getCopyrightHeight","createDivMessageDo","divMessage","createButtonsAvatar","num","widthNickName","heightNickName","buttonAvatarHeight","buttonsAvatarLeft","buttonsAvatarSrc","nicknames","buttonsAvatar","avatarTop","divNicknames","divNicknamesWidth","divNicknamesHeight","createDivMessageStart","height1","textAlign","paddingLeft","paddingRight","colorDefinition","showHelpScreen","createAddScore","colorScore","labelAddScore","labelAddScore2","updateButtonsAvatar","s","pos","lastIndexOf","slice","pop","join","repairNickname","colorsBackground","autoResizeText","updateImageButton","alt","extraparams","response","openGame","colors","processGetAttempt","JSON","parse","name","heightmessage","divMessageBackground","background","getColorHex"],"mappings":"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"}