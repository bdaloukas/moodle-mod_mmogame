{"version":3,"file":"mmogame.min.js","sources":["../src/mmogame.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine([''], function() {\n    return class MmoGame {\n        // Define default properties with appropriate types\n        state; // State of the game\n        body;\n        minFontSize;\n        maxFontSize;\n        fontSize;\n        avatarTop;\n        colors = {};\n        iconSize;\n        padding;\n        cIcons;\n\n        // UI element placeholders\n        area;\n\n        // Colors\n        colorsBackground;\n\n        // Timer variables\n        timestart = 0;\n        timeclose = 0;\n\n        /**\n         * Initialize game properties and compute initial sizes.\n         *\n         * @module mmogame\n         * @copyright 2024 Vasilis Daloukas\n         * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n         */\n        constructor() {\n            // Initialize default properties.\n            this.kindSound = 0;\n            this.state = 0;\n            this.minFontSize = 0;\n            this.maxFontSize = 0;\n            this.fontSize = 0;\n            this.avatarTop = 0;\n            this.iconSize = 0;\n            this.padding = 0;\n            this.body = document.getElementsByTagName(\"body\")[0];\n\n            // Compute and set font size properties.\n            let size = parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue('font-size'));\n            this.minFontSize = size;\n            this.maxFontSize = 2 * size;\n            this.fontSize = size;\n        }\n\n        // UI element creation methods\n        /**\n         * Creates a DOM element with specified attributes and styles.\n         * @param {string} tag - The HTML tag to create (e.g., 'div', 'img').\n         * @param {Object} options - Configuration for the element.\n         * @param {HTMLElement} options.parent - Parent element where the new element will be appended.\n         * @param {string} [options.classnames] - Space-separated string of CSS class names.\n         * @param {Object} [options.styles] - Inline styles for the element.\n         * @param {Object} [options.attributes] - Attributes for the element (e.g., src, alt, role).\n         * @returns {HTMLElement} - The created DOM element.\n         */\n        createDOMElement(tag, {parent, classnames = '', styles = {}, attributes = {}} = {}) {\n            const element = document.createElement(tag);\n\n            // Apply classes\n            if (classnames) {\n                element.classList.add(...classnames.split(/\\s+/));\n            }\n\n            // Apply styles\n            Object.assign(element.style, styles);\n\n            // Apply attributes\n            Object.entries(attributes).forEach(([key, value]) => {\n                if (value !== undefined && value !== null) {\n                    element.setAttribute(key, value);\n                }\n            });\n\n            // Append to parent\n            if (parent) {\n                parent.appendChild(element);\n            }\n\n            return element;\n        }\n\n        /**\n         * Creates a <div> element.\n         *\n         * @param {HTMLElement} parent - The parent element.\n         * @param {string} classnames - Horizontal position in pixels.\n         * @param {number} left - Horizontal position in pixels.\n         * @param {number} top - Vertical position in pixels.\n         * @param {number} width - Width of the <div>.\n         * @param {number} height - Height of the <div>.\n         * @returns {HTMLElement} - The created <div> element.\n         */\n        createDiv(parent, classnames, left, top, width, height) {\n            return this.createDOMElement('div', {\n                parent,\n                classnames,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${width}px`,\n                    height: `${height}px`,\n                },\n            });\n        }\n\n\n        /**\n         * Creates an <img> element.\n         *\n         * @param {HTMLElement} parent - The parent element.\n         * @param {string} classnames - List of classes separated by space.\n         * @param {number} left - Horizontal position in pixels.\n         * @param {number} top - Vertical position in pixels.\n         * @param {number} width - Width of the <img> element.\n         * @param {number} height - Height of the <img> element.\n         * @param {string} filename - The source file for the image.\n         * @returns {HTMLElement} - The created <img> element.\n         */\n        createImage(parent, classnames, left, top, width, height, filename) {\n            const styles = {\n                position: 'absolute',\n                left: `${left}px`,\n                top: `${top}px`,\n            };\n\n            // Only add width to styles if it's not 0\n            if (width !== 0) {\n                styles.width = `${width}px`;\n            }\n\n            // Only add height to styles if it's not 0\n            if (height !== 0) {\n                styles.height = `${height}px`;\n            }\n\n            const attributes = {draggable: false};\n            if (filename !== '') {\n                attributes.src = filename;\n            }\n\n            return this.createDOMElement('img', {\n                parent,\n                classnames,\n                styles,\n                attributes,\n            });\n        }\n\n        // For check\n        createButton(parent, classnames, left, top, width, height, src, alt, role = 'button') {\n            return this.createDOMElement('img', {\n                parent,\n                classnames,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${width}px`,\n                    height: `${height}px`,\n                },\n                attributes: {src, alt, role},\n            });\n        }\n\n        /**\n         * Generic method to create styled text or input fields.\n         * @param {HTMLElement} parent - Parent element where the new element will be appended.\n         * @param {string} type - Type of the element ('label' or 'input').\n         * @param {string} classnames - CSS class names.\n         * @param {Object} styles - Inline styles.\n         * @param {string} text - Inner text or placeholder.\n         * @returns {HTMLElement} - The created element.\n         */\n        createTextElement(parent, type, classnames, styles, text = '') {\n            const attributes = type === 'input' ? {type: 'text', placeholder: text} : {};\n            const element = this.createDOMElement(type, {parent, classnames, styles, attributes});\n            if (type === 'label') {\n                element.innerText = text;\n            }\n            return element;\n        }\n\n        createLabel(parent, classnames, left, top, width, fontSize, text) {\n            return this.createTextElement(parent, 'label', classnames, {\n                position: 'absolute',\n                left: `${left}px`,\n                top: `${top}px`,\n                width: `${width}px`,\n                fontSize: `${fontSize}px`,\n                textAlign: 'left',\n            }, text);\n        }\n\n        createInput(parent, classnames, left, top, width, fontSize, placeholder) {\n            return this.createTextElement(parent, 'input', classnames, {\n                position: 'absolute',\n                left: `${left}px`,\n                top: `${top}px`,\n                width: `${width}px`,\n                fontSize: `${fontSize}px`,\n            }, placeholder);\n        }\n\n        // Game logic and utility methods\n\n        /**\n         * Compute sizes for icons and padding based on the screen dimensions.\n         */\n        computeSizes() {\n            const cIcons = Math.max(this.cIcons || 5, 5);\n            const maxIconWidth = window.innerWidth / cIcons;\n            const maxIconHeight = window.innerHeight / 5;\n\n            this.iconSize = Math.min(maxIconWidth, maxIconHeight);\n            const adjustment = this.iconSize / 10 / cIcons;\n            this.iconSize = Math.round(this.iconSize - adjustment);\n            this.padding = Math.round(this.iconSize / 10);\n            this.iconSize -= this.padding;\n        }\n\n        /**\n         * Creates a centered image button with automatic scaling.\n         * @param {HTMLElement} parent - The parent element where the button will be appended.\n         * @param {number} left - The left position of the container in pixels.\n         * @param {number} top - The top position of the container in pixels.\n         * @param {number} width - The width of the container in pixels.\n         * @param {number} height - The height of the container in pixels.\n         * @param {string} classname - Additional CSS classes to apply to the button.\n         * @param {string} filename - The source URL of the image.\n         * @returns {HTMLElement} - The created image button element.\n         */\n        createCenterImageButton(parent, left, top, width, height, classname, filename) {\n            const button = this.createDOMElement('img', {\n                parent,\n                classnames: `mmogame_imgbutton ${classname}`,\n                styles: {\n                    position: 'absolute',\n                    draggable: false,\n                },\n            });\n\n            const img = new Image();\n            img.onload = function() {\n                if (this.width > 0 && this.height > 0) {\n                    const mul = Math.min(width / this.width, height / this.height);\n                    const w = Math.round(this.width * mul);\n                    const h = Math.round(this.height * mul);\n\n                    Object.assign(button.style, {\n                        width: `${w}px`,\n                        height: `${h}px`,\n                        left: `${left + width / 2 - w / 2}px`,\n                        top: `${top + height / 2 - h / 2}px`,\n                    });\n\n                    button.src = filename;\n                }\n            };\n            img.src = filename;\n\n            return button;\n        }\n\n        createDivButton(classnames, left, top) {\n            return this.createButton(\n                this.body,\n                classnames,\n                left,\n                top,\n                this.iconSize,\n                this.iconSize,\n                '',\n                '',\n                'button');\n        }\n\n        hasHelp() {\n            return false;\n        }\n\n        /**\n         * Clear all children of the <body> element.\n         */\n        clearBodyChildren() {\n            this.removeDivMessage();\n\n            while (this.body.firstChild) {\n                this.body.removeChild(this.body.firstChild);\n            }\n            this.area = undefined;\n        }\n\n        /**\n         * Opens the game by resetting the body and computing sizes.\n         */\n        openGame() {\n            this.clearBodyChildren();\n            this.computeSizes();\n        }\n\n        /**\n         * Updates an image button's properties.\n         * @param {HTMLImageElement} button - The button element to update.\n         * @param {string} src - The new source for the image.\n         */\n        updateImageButton(button, src) {\n            button.src = src;\n        }\n\n        autoResizeText(item, width, height, wrap, minFontSize, maxFontSize, minRatio) {\n            const text = item.innerHTML.toString();\n\n            if (text.length === 0) {\n                return false;\n            }\n\n            let low = Math.max(1, minFontSize);\n            width = Math.round(width);\n            height = Math.round(height);\n            let up = maxFontSize === 0 || maxFontSize === undefined ? Math.min(width, height) : maxFontSize;\n\n            let fitSize = low;\n            let fitHeight = 0;\n            let newHeight = 0;\n            let newWidth = 0;\n\n            let i = 1;\n            for (;i <= 10; i++) {\n                let el = document.createElement(\"div\");\n                el.style.left = 0;\n                el.style.top = 0;\n                el.style.width = width + \"px\";\n                el.style.height = 0;\n                el.visibility = \"visible\";\n                if (!wrap) {\n                    el.style.whiteSpace = \"nowrap\";\n                }\n                el.innerHTML = text;\n                this.body.appendChild(el);\n\n                let fontSize = (low + up) / 2;\n\n                el.style.fontSize = fontSize + \"px\";\n                newHeight = el.scrollHeight;\n                newWidth = el.scrollWidth - 1;\n\n                this.body.removeChild(el);\n\n                if (newWidth > width || newHeight > height) {\n                    up = fontSize;\n                } else {\n                    low = fontSize;\n                    if (Math.abs(fitHeight - newHeight) <= 2) {\n                        break;\n                    }\n                    fitHeight = newHeight;\n                    fitSize = fontSize;\n                }\n            }\n            item.style.fontSize = fitSize + \"px\";\n\n            if (newWidth > width || newHeight > height) {\n                this.autoResizeTextBr(item);\n                newWidth = item.scrollWidth;\n                newHeight = item.scrollHeight;\n                this.autoResizeTextImage(item, newWidth > width ? newWidth - width : 0,\n                    newHeight > height ? newHeight - height : 0, minRatio);\n            } else {\n                return [item.scrollWidth - 1, item.scrollHeight];\n            }\n\n            let el = document.createElement(\"div\");\n            el.style.width = width + \"px\";\n            el.style.height = 0;\n            el.visibility = \"hidden\";\n            if (!wrap) {\n                el.style.whiteSpace = \"nowrap\";\n            }\n            el.innerHTML = text;\n            this.body.appendChild(el);\n            el.style.fontSize = item.style.fontSize;\n            let size = [el.scrollWidth - 1, el.scrollHeight];\n            this.body.removeChild(el);\n\n            return size;\n        }\n\n        autoResizeTextBr(item) {\n            let s = item.innerHTML;\n            let change = false;\n            while (s.startsWith('<br>')) {\n                s = s.substring(4);\n                change = true;\n            }\n            let pos1 = s.indexOf('<br>');\n            for (; ;) {\n                let pos = s.indexOf('<br>', pos1 + 4);\n                if (pos < 0) {\n                    break;\n                }\n                let s2 = s.substring(pos1 + 4, pos);\n                if (!s2.trim()) {\n                    s = s.substring(0, pos1 + 4) + s.substring(pos + 4);\n                    change = true;\n                    pos = pos1;\n                }\n                pos1 = pos;\n            }\n\n            if (change) {\n                item.innerHTML = s;\n            }\n        }\n\n        autoResizeTextImage(item, subwidth, subheight, minRatio) {\n            if (subwidth === 0 && subheight === 0) {\n                return;\n            }\n            let s = item.innerHTML;\n\n            for (let pos = 0; ;) {\n                let pos2 = s.indexOf(\"<img \", pos);\n                if (pos2 < 0) {\n                    break;\n                }\n                let pos3 = s.indexOf(\">\", pos2);\n                if (pos3 < 0) {\n                    break;\n                }\n                let s2 = s.substring(pos2, pos3) + \" \";\n\n                let width = 0;\n                let height = 0;\n                let posw = s2.indexOf(\"width=\");\n                if (posw >= 0) {\n                    let posw2 = s2.indexOf(\" \", posw);\n                    if (posw2 >= 0) {\n                        let num = s2.slice(posw + 6, posw2).replace(/\"/g, \"\");\n                        width = parseInt(num);\n                        s2 = s2.slice(0, posw) + s2.slice(posw2);\n                    }\n                }\n\n                posw = s2.indexOf(\"height=\");\n                if (posw >= 0) {\n                    let posw2 = s2.indexOf(\" \", posw);\n                    if (posw2 >= 0) {\n                        let num = s2.slice(posw + 7, posw2).replace(/\"/g, \"\");\n                        height = parseInt(num);\n                        s2 = s2.slice(0, posw) + s2.slice(posw2);\n                    }\n                }\n                if (width > 0 && height > 0) {\n                    let newWidth = width - subwidth > 0 ? width - subwidth : width / 2;\n                    let newHeight = height - subheight > 0 ? height - subheight : height / 2;\n                    let ratio = Math.max(minRatio, Math.min(newWidth / width, newHeight / height));\n                    s2 = s2 + \" width=\\\"\" + Math.round(ratio * width) + \"\\\" height=\\\"\" + Math.round(height * ratio) + \"\\\" \";\n                }\n                s = s.slice(0, pos2) + s2 + s.slice(pos3);\n                pos = pos3;\n            }\n            item.innerHTML = s;\n        }\n\n        pad(num, size) {\n            let s = num + \"\";\n            while (s.length < size) {\n                s = \"0\" + s;\n            }\n            return s;\n        }\n\n        uuid4() {\n            const hexDigits = '0123456789abcdef';\n            const uuid = [...Array(36)].map(() => hexDigits[Math.floor(Math.random() * 16)]);\n            uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n            uuid[14] = '4';\n            // eslint-disable-next-line no-bitwise\n            uuid[19] = hexDigits[(parseInt(uuid[19], 16) & 0x3) | 0x8];\n\n            this.user = uuid.join('');\n\n            let options = {userGUID: this.user};\n            let instance = this;\n            this.setOptions(options)\n                .then(function() {\n                    return true;\n                })\n                .catch(error => {\n                    instance.showError(error.message);\n                    return false;\n                });\n        }\n\n        getCopyrightHeight() {\n            return Math.round(this.iconSize / 3);\n        }\n\n        /**\n         * Returns the hex color string for a given color code.\n         *\n         * @param {Number} colorCode - The color code.\n         * @returns {string} Hexadecimal representation of the color.\n         */\n        getColorHex(colorCode) {\n            return `#${colorCode.toString(16).padStart(6, '0').toUpperCase()}`;\n        }\n\n        /**\n         * Calculates contrast value for a given color.\n         *\n         * @param {Number} colorCode - The color code.\n         * @returns {Number} Contrast value.\n         */\n        getContrast(colorCode) {\n            // eslint-disable-next-line no-bitwise\n            const r = (colorCode >> 16) & 0xff;\n            // eslint-disable-next-line no-bitwise\n            const g = (colorCode >> 8) & 0xff;\n            // eslint-disable-next-line no-bitwise\n            const b = colorCode & 0xff;\n            return (r * 299 + g * 587 + b * 114) / 1000;\n        }\n\n        getColorGray(x) {\n            let r = Math.floor(x / 0x1000000) % 256, // Red.\n                g = Math.floor(x / 0x10000) % 256, // Green.\n                b = Math.floor(x / 0x100) % 256, // Blue.\n                yiq = (r * 299) + g * 587 + b * 114,\n                m = 255 * 299 + 255 * 587 + 255 * 114,\n                gray = Math.round(yiq * 255 / m);\n\n            return (gray * 0x10000) + (gray * 0x100) + gray;\n        }\n\n        /**\n         * Returns a contrasting color (black or white) based on brightness.\n         * @param {Number} colorCode - The color code.\n         * @returns {string} \"#000000\" or \"#FFFFFF\".\n         */\n        getContrastingColor(colorCode) {\n            // eslint-disable-next-line no-bitwise\n            const r = (colorCode >> 16) & 0xff;\n            // eslint-disable-next-line no-bitwise\n            const g = (colorCode >> 8) & 0xff;\n            // eslint-disable-next-line no-bitwise\n            const b = colorCode & 0xff;\n            const brightness = (r * 299 + g * 587 + b * 114) / 1000;\n            return brightness >= 128 ? \"#000000\" : \"#FFFFFF\";\n        }\n\n        /**\n         * Repairs colors by sorting and assigning contrasting background colors.\n         * @param {Array} colors - Array of color codes.\n         */\n        repairColors(colors) {\n            this.colors = colors.sort((a, b) => this.getContrast(a) - this.getContrast(b));\n            this.colorBackground = this.colors[0];\n            this.body.style.backgroundColor = this.getColorHex(this.colorBackground);\n        }\n\n        /**\n         * Repairs <p> tags in a string by cleaning up unnecessary tags.\n         * @param {string} text - The input string with potential <p> tags.\n         * @returns {string} The cleaned-up string.\n         */\n        repairP(text) {\n            if (!text) {\n                return '';\n            }\n            return text.replace(/<p[^>]*>/g, '').replace(/<\\/p>/g, '<br>').trim();\n        }\n\n        /**\n         * Creates a help button.\n         * @param {number} left - Left position in pixels.\n         * @param {number} top - Top position in pixels.\n         */\n        createButtonHelp(left, top) {\n            const helpButton = this.createImage(this.body, 'mmogame-button-helo',\n                left, top, this.iconSize, this.iconSize, 'assets/help.png');\n            helpButton.alt = 'Help';\n        }\n\n        /**\n         * Finds the best value based on a condition.\n         * @param {number} low - The lower bound.\n         * @param {number} high - The upper bound.\n         * @param {function} condition - A condition to evaluate.\n         */\n        findbest(low, high, condition) {\n            while (high - low > 1) {\n                const mid = Math.floor((low + high) / 2);\n                if (condition(mid)) {\n                    high = mid;\n                } else {\n                    low = mid;\n                }\n            }\n\n            return low;\n        }\n\n        removeDivMessage() {\n            if (this.divMessage !== undefined) {\n                this.body.removeChild(this.divMessage);\n                this.divMessage = undefined;\n            }\n            if (this.divMessageHelp !== undefined) {\n                this.body.removeChild(this.divMessageHelp);\n                this.divMessageHelp = undefined;\n            }\n            if (this.divMessageBackground !== undefined) {\n                this.divMessageBackground.remove();\n                this.divMessageBackground = undefined;\n            }\n        }\n\n        disableButtons(buttons, disabled) {\n            for (let i = 0; i < buttons.length; i++) {\n                let btn = buttons[i];\n                if (btn !== undefined) {\n                    if (disabled) {\n                        btn.classList.add(\"mmogame_imgbutton_disabled\");\n                    } else {\n                        btn.classList.remove(\"mmogame_imgbutton_disabled\");\n                    }\n                }\n            }\n        }\n\n        repairNickname(nickname) {\n            if (nickname === undefined) {\n                return '';\n            }\n\n            let s = nickname;\n            if (s !== '') {\n                while (s.indexOf('_') !== -1) {\n                    s = s.replace('_', ' ');\n                }\n            }\n\n            return s;\n        }\n\n        showColorPalette(canvas, colors) {\n            let ctx = canvas.getContext(\"2d\");\n            let width = canvas.width;\n            let height = canvas.height;\n            let strip = width / 5;\n            let instance = this;\n\n            colors.sort(function(a, b) {\n                return instance.getContrast(a) - instance.getContrast(b);\n            });\n            for (let i = 0; i < 5; i++) {\n                ctx.fillStyle = this.getColorHex(colors[i]);\n                ctx.fillRect(i * strip, 0, (i + 1) * strip, height);\n            }\n\n            ctx.strokeStyle = \"#FFFFFF\";\n            ctx.lineWidth = 1;\n            ctx.strokeRect(0, 0, width, height);\n        }\n\n        setColorsString(s) {\n            let a = [0x9B7ED9, 0x79F2F2, 0x67BF5A, 0xD0F252, 0xBF5B21];\n            if (s !== undefined && s.length >= 0) {\n                let b = s.split(\",\");\n                if (b.length === 5) {\n                    a = b;\n                    for (let i = 0; i < 5; i++) {\n                        a[i] = parseInt(a[i]);\n                    }\n                }\n            }\n            this.setColors(a);\n        }\n\n        computeDifClock(time, timeStart, timeClose) {\n            if (time !== undefined) {\n                this.difClock = ((new Date()).getTime() - time) / 1000;\n            }\n\n            this.computeTimeStartClose(timeStart, timeClose);\n        }\n\n        computeTimeStartClose(timeStart, timeClose) {\n            if (timeStart !== undefined) {\n                this.timestart = parseInt(timeStart) !== 0 ? parseInt(timeStart) + this.difClock : 0;\n                this.timeclose = parseInt(timeClose) !== 0 ? parseInt(timeClose) + this.difClock : 0;\n            } else {\n                this.timestart = 0;\n                this.timeclose = 0;\n            }\n        }\n\n        drawRadio(canvas, color1, color2) {\n            let ctx = canvas.getContext(\"2d\");\n            let size = canvas.width;\n            ctx.clearRect(0, 0, size, canvas.height);\n\n            ctx.beginPath();\n            ctx.arc(size / 2, size / 2, size / 2, 0, 2 * Math.PI, false);\n            ctx.fillStyle = this.getColorHex(color1);\n            ctx.fill();\n\n            let checked = canvas.classList.contains(\"checked\");\n            if (checked) {\n                ctx.beginPath();\n                ctx.arc(size / 2, size / 2, size / 4, 0, 2 * Math.PI, false);\n                ctx.fillStyle = this.getColorHex(color2);\n                ctx.fill();\n            }\n        }\n\n        createRadiobox(parent, size, color1, color2, checked, disabled) {\n            let canvas = document.createElement('canvas');\n            canvas.style.position = \"absolute\";\n            canvas.width = size;\n            canvas.height = size;\n            parent.appendChild(canvas);\n            if (checked) {\n                canvas.classList.add(\"checked\");\n            }\n            if (disabled) {\n                canvas.classList.add(\"disabled\");\n            }\n\n            this.drawRadio(canvas, disabled ? color1 : 0xFFFFFF, color2);\n\n            return canvas;\n        }\n\n        createImageButton(parent, classnames, left, top, width, height, filename) {\n            const imgButton = this.createImage(parent, classnames, left, top, width, height, filename);\n            imgButton.style.cursor = 'pointer';\n            return imgButton;\n        }\n\n        createDivColor(parent, classnames, left, top, width, height, color) {\n            const colorDiv = this.createDiv(parent, classnames, left, top, width, height);\n            colorDiv.style.backgroundColor = color;\n            colorDiv.style.border = '1px solid #000';\n            return colorDiv;\n        }\n\n        /**\n         * Retrieves localized strings.\n         * @param {string} name - The name of the string.\n         * @returns {string} The localized string.\n         */\n        getStringM(name) {\n            return M.util.get_string(name, 'mmogame');\n        }\n\n        /**\n         * Retrieves user options from IndexedDB.\n         * @returns {Promise<Object>} A promise that resolves with the options.\n         */\n        getOptions() {\n            return new Promise((resolve, reject) => {\n                const request = indexedDB.open('mmoGameDB', 1);\n\n                request.onupgradeneeded = function(event) {\n                    const db = event.target.result;\n                    if (!db.objectStoreNames.contains('options')) {\n                        db.createObjectStore('options', {keyPath: 'name'});\n                    }\n                };\n\n                request.onsuccess = function(event) {\n                    const db = event.target.result;\n                    const transaction = db.transaction(['options'], 'readonly');\n                    const store = transaction.objectStore('options');\n\n                    const getAllRequest = store.getAll();\n\n                    getAllRequest.onsuccess = function(event) {\n                        resolve(event.target.result.reduce((acc, item) => {\n                            acc[item.name] = item.value;\n                            return acc;\n                        }, {}));\n                    };\n\n                    getAllRequest.onerror = function() {\n                        reject(new Error('Failed to retrieve options'));\n                    };\n                };\n\n                request.onerror = function() {\n                    reject(new Error('Failed to open database'));\n                };\n            });\n        }\n\n        /**\n         * Saves user options to IndexedDB.\n         * @param {Object} options - The options to save.\n         * @returns {Promise<void>} A promise that resolves when the save is complete.\n         */\n        setOptions(options) {\n            return new Promise((resolve, reject) => {\n                const request = indexedDB.open('mmoGameDB', 1);\n\n                request.onsuccess = function(event) {\n                    const db = event.target.result;\n                    const transaction = db.transaction(['options'], 'readwrite');\n                    const store = transaction.objectStore('options');\n\n                    Object.entries(options).forEach(([key, value]) => {\n                        store.put({name: key, value});\n                    });\n\n                    transaction.oncomplete = function() {\n                        resolve();\n                    };\n\n                    transaction.onerror = function() {\n                        reject(new Error('Failed to save options'));\n                    };\n                };\n\n                request.onerror = function() {\n                    reject(new Error('Failed to open database'));\n                };\n            });\n        }\n\n    clearDB(url) {\n        let options = {nickname: ''};\n        this.setOptions(options)\n            .then(function() {\n                window.location.href = url;\n                return true;\n            })\n            .catch(() => {\n                return false;\n            });\n        }\n\n    };\n});"],"names":["define","constructor","kindSound","state","minFontSize","maxFontSize","fontSize","avatarTop","iconSize","padding","body","document","getElementsByTagName","size","parseFloat","window","getComputedStyle","documentElement","getPropertyValue","createDOMElement","tag","parent","classnames","styles","attributes","element","createElement","classList","add","split","Object","assign","style","entries","forEach","_ref","key","value","setAttribute","appendChild","createDiv","left","top","width","height","this","position","createImage","filename","draggable","src","createButton","alt","role","createTextElement","type","text","placeholder","innerText","createLabel","textAlign","createInput","computeSizes","cIcons","Math","max","maxIconWidth","innerWidth","maxIconHeight","innerHeight","min","adjustment","round","createCenterImageButton","classname","button","img","Image","onload","mul","w","h","createDivButton","hasHelp","clearBodyChildren","removeDivMessage","firstChild","removeChild","area","undefined","openGame","updateImageButton","autoResizeText","item","wrap","minRatio","innerHTML","toString","length","low","up","fitSize","fitHeight","newHeight","newWidth","i","el","visibility","whiteSpace","scrollHeight","scrollWidth","abs","autoResizeTextBr","autoResizeTextImage","s","change","startsWith","substring","pos1","indexOf","pos","trim","subwidth","subheight","pos2","pos3","s2","posw","posw2","num","slice","replace","parseInt","ratio","pad","uuid4","uuid","Array","map","floor","random","user","join","options","userGUID","instance","setOptions","then","catch","error","showError","message","getCopyrightHeight","getColorHex","colorCode","padStart","toUpperCase","getContrast","getColorGray","x","yiq","gray","getContrastingColor","repairColors","colors","sort","a","b","colorBackground","backgroundColor","repairP","createButtonHelp","findbest","high","condition","mid","divMessage","divMessageHelp","divMessageBackground","remove","disableButtons","buttons","disabled","btn","repairNickname","nickname","showColorPalette","canvas","ctx","getContext","strip","fillStyle","fillRect","strokeStyle","lineWidth","strokeRect","setColorsString","setColors","computeDifClock","time","timeStart","timeClose","difClock","Date","getTime","computeTimeStartClose","timestart","timeclose","drawRadio","color1","color2","clearRect","beginPath","arc","PI","fill","contains","createRadiobox","checked","createImageButton","imgButton","cursor","createDivColor","color","colorDiv","border","getStringM","name","M","util","get_string","getOptions","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","db","target","result","objectStoreNames","createObjectStore","keyPath","onsuccess","getAllRequest","transaction","objectStore","getAll","reduce","acc","onerror","Error","store","_ref2","put","oncomplete","clearDB","url","location","href"],"mappings":"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"}