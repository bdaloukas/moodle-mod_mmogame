{"version":3,"file":"mmogametypequiz.min.js","sources":["../src/mmogametypequiz.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mod_mmogame/mmogameui'], function(MmoGameUI) {\n    return class MmoGameTypeQuiz extends MmoGameUI {\n        mmogameid;\n        kinduser;\n        user;\n        url;\n        pin;\n        labelTimer;\n        timeForSendAnswer;\n        divDefinition;\n        definitionHeight;\n\n        /**\n         * Base class for Quiz mmmogame\n         *\n         * @module mmogametype_quiz\n         * @copyright 2024 Vasilis Daloukas\n         * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n         */\n\n        constructor() {\n            super();\n            this.hideSubmit = false;\n            this.timeForSendAnswer = 10000;\n        }\n\n        /**\n         * Sets the colors for different UI elements and repairs them if necessary.\n         *\n         * @param {Array} colors - Array of color codes to be applied.\n         */\n        setColors(colors) {\n            this.repairColors(colors); // Ensure colors are valid\n\n            // Assign specific colors to UI elements\n            this.colorDefinition = this.colors[1];\n            this.colorScore = this.colors[2];\n            this.colorCopyright = this.colors[3];\n            this.colorScore2 = this.colors[4];\n        }\n\n        /**\n         * Initializes the game by loading required audio assets.\n         */\n        openGame() {\n            super.openGame(); // Call the parent class method\n\n            // Load sound effects\n            this.audioYes = new Audio('assets/yes1.mp3');\n            this.audioYes.load();\n            this.audioNo = new Audio('assets/no1.mp3');\n            this.audioNo.load();\n        }\n\n        /**\n         * Processes the response for a game attempt, updating the state and UI.\n         *\n         * @param {Object} json - The server response containing attempt data.\n         */\n        processGetAttempt(json) {\n            // Calculate time difference and set up the clock\n            this.computeDifClock(json.time, json.timestart, json.timeclose);\n\n            // Set colors if provided\n            if (json.colors) {\n                this.setColorsString(json.colors);\n                this.createIconBar(); // Initialize the top bar with icons\n            }\n\n            // Update the window title if a name is provided\n            if (json.name) {\n                document.title = json.name;\n            }\n\n            // Set help URL if available\n            if (json.helpurl) {\n                this.helpUrl = json.helpurl;\n            }\n\n            // Handle error messages from the server\n            if (json.errorcode) {\n                this.createDivMessage('mmogame-error', json.errorcode);\n                return;\n            }\n\n            // Update game state and user-related data\n            this.state = parseInt(json.state, 10);\n            this.fastjson = json.fastjson;\n            this.timefastjson = parseInt(json.timefastjson, 10);\n            this.updateButtonsAvatar(1, json.avatar, json.nickname);\n\n            this.attempt = json.attempt;\n\n            // Process question type and answers\n            this.qtype = json.qtype;\n            if (this.qtype === 'multichoice') {\n                this.answers = [];\n                this.answersID = json.answerids;\n                json.answers.forEach((answer, index) => {\n                    this.answers[index] = this.repairP(answer); // Process each answer\n                });\n            }\n            this.answer = json.answer ?? undefined;\n\n            // Handle end-of-game scenarios\n            this.endofgame = json.endofgame !== undefined && json.endofgame !== 0;\n            this.definition = this.repairP(json.definition);\n            this.errorcode = json.errorcode;\n\n            if (json.state !== 0) {\n                this.createScreen(json, false);\n            }\n\n            this.updateLabelTimer(); // Start or update the timer\n            this.sendFastJSON(); // Send fast JSON updates\n        }\n\n        updateLabelTimer() {\n            // Exit if labelTimer or timeclose are undefined\n            if (!this.labelTimer || !this.timeclose) {\n                return;\n            }\n\n            // Calculate the remaining time in seconds\n            const now = Date.now() / 1000; // Get current time in seconds\n            let remainingTime = Math.max(0, this.timeclose - now);\n\n            // If no time is remaining, clear the label and handle timeout\n            if (remainingTime === 0) {\n                this.labelTimer.innerHTML = '';\n                this.onTimeout();\n                return;\n            }\n\n            // Format the remaining time as mm:ss\n            const minutes = Math.floor(remainingTime / 60);\n            const seconds = String(Math.floor(remainingTime % 60)).padStart(2, '0');\n            this.labelTimer.innerHTML = `${minutes}:${seconds}`;\n\n            // Set a timeout to update the timer every 500ms\n            this.timerTimeout = setTimeout(() => this.updateLabelTimer(), 500);\n        }\n\n        /**\n         * Handles the timeout scenario by disabling inputs and sending timeout data.\n         */\n        onTimeout() {\n            this.labelTimer.innerHTML = ''; // Clear the timer display\n            this.disableInput(); // Prevent further user input\n            this.sendTimeout(); // Notify the server about the timeout\n        }\n        /**\n         * Creates the game screen layout based on the current state.\n         *\n         * @param {Object} json - The game data used to build the screen.\n         * @param {boolean} disabled - Determines whether user input should be disabled.\n         */\n        createScreen(json, disabled) {\n            this.createArea(); // Prepare the main game area\n\n            if (this.endofgame) {\n                // Display end-of-game message and final score\n                this.createDivMessage('mmogame-endofgame', this.getStringM('js_game_over'));\n                this.showScore(json);\n                return;\n            }\n\n            // Render the screen layout based on orientation (vertical or horizontal)\n            if (this.vertical) {\n                this.createScreenVertical(disabled);\n            } else {\n                this.createScreenHorizontal(disabled);\n            }\n\n            // Display the current score\n            this.showScore(json);\n        }\n\n        /**\n         * Creates a vertical layout for the quiz screen.\n         *\n         * @param {boolean} disabled - Whether user input should be disabled.\n         */\n        createScreenVertical(disabled) {\n            const nickNameHeight = Math.round(this.iconSize / 3) + this.padding;\n            let maxHeight = this.areaHeight - 4 * this.padding - nickNameHeight;\n\n            if (!this.hideSubmit) {\n                maxHeight -= this.iconSize; // Reserve space for the submit button\n            }\n\n            const maxWidth = this.areaWidth;\n\n            // Dynamically adjust font size to fit content within constraints\n            this.fontSize = this.findbest(this.minFontSize, this.maxFontSize, (fontSize) => {\n                const defSize = this.createDefinition(0, 0, maxWidth - 1, true, fontSize);\n                if (defSize[0] >= maxWidth) {\n                    return 1;\n                }\n\n                const ansSize = this.createAnswer(0, 0, maxWidth - 1, true, fontSize, disabled);\n                return defSize[1] + ansSize[1] < maxHeight ? -1 : 1;\n            });\n\n            this.radioSize = Math.round(this.fontSize);\n            const defSize = this.createDefinition(0, 0, maxWidth, false, this.fontSize);\n\n            // Position answers below the definition\n            this.nextTop = this.createAnswer(0, defSize[1] + this.padding, maxWidth, false, this.fontSize, disabled);\n\n            if (!this.hideSubmit) {\n                // Create and position the submit button\n                const space = (this.areaWidth - this.iconSize) / 2;\n                this.btnSubmit = this.createImageButton(\n                    this.area,\n                    'mmogame-quiz-submit',\n                    space,\n                    this.nextTop,\n                    0,\n                    this.iconSize,\n                    'assets/submit.svg',\n                    false,\n                    'submit'\n                );\n                this.btnSubmit.addEventListener('click', () => {\n                    this.area.removeChild(this.btnSubmit);\n                    this.btnSubmit = undefined;\n                    this.sendAnswer();\n                });\n            }\n\n            // Adjust strip dimensions\n            this.stripLeft = this.padding;\n            this.stripWidth = 2 * this.iconSize;\n            this.stripHeight = this.iconSize;\n        }\n\n        /**\n         * Creates a horizontal layout for the quiz screen.\n         *\n         * @param {boolean} disabled - Whether user input should be disabled.\n         */\n        createScreenHorizontal(disabled) {\n            let maxHeight = this.areaHeight - 2 * this.padding;\n\n            if (!this.hideSubmit) {\n                maxHeight -= this.iconSize + this.padding; // Reserve space for submit button\n            }\n\n            const width = Math.round((this.areaWidth - this.padding) / 2);\n            for (let step = 1; step <= 2; step++) {\n                let defSize;\n                this.fontSize = this.findbest(step === 1 ? this.minFontSize : this.minFontSize / 2, this.maxFontSize,\n                    (fontSize) => {\n                        defSize = this.createDefinition(0, 0, width - this.padding, true, fontSize);\n\n                        if (defSize[0] >= width) {\n                            return 1;\n                        }\n                        let ansSize = this.createAnswer(0, 0, width - this.padding, true, fontSize, disabled);\n                        if (ansSize[0] >= width) {\n                            return 1;\n                        }\n                        return defSize[1] < maxHeight && ansSize[1] < maxHeight ? -1 : 1;\n                    }\n                );\n                if (defSize[0] <= width && defSize[1] <= this.areaHeight) {\n                    break;\n                }\n            }\n\n            this.radioSize = Math.round(this.fontSize);\n            this.createDefinition(0, 0, width - this.padding, false, this.fontSize);\n\n            this.nextTop = this.createAnswer(width, 0, width - this.padding, false, this.fontSize, disabled) + this.padding;\n\n            if (!this.hideSubmit) {\n                // Create and position the submit button\n                this.btnSubmit = this.createImageButton(\n                    this.body,\n                    'mmogame-quiz-submit',\n                    width + (width - this.iconSize) / 2,\n                    this.nextTop,\n                    0,\n                    this.iconSize,\n                    'assets/submit.svg',\n                    false,\n                    'submit'\n                );\n                this.btnSubmit.addEventListener('click', () => {\n                    this.sendAnswer();\n                });\n            }\n\n            // Adjust strip dimensions\n            this.stripLeft = width + this.padding;\n            this.stripWidth = 2 * this.iconSize;\n            this.stripHeight = this.iconSize;\n        }\n\n        createAnswer(left, top, width, onlyMetrics, fontSize, disabled) {\n            return this.createAnswerMultichoice(left, top, width, onlyMetrics, fontSize, disabled);\n        }\n\n        /**\n         * Creates multiple-choice answer options.\n         *\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} width - The maximum width available for answers.\n         * @param {boolean} onlyMetrics - Whether to only calculate size metrics.\n         * @param {number} fontSize - The font size for answer text.\n         * @param {boolean} disabled - Whether the answers are disabled.\n         * @returns {number} The total height used by the answer options.\n         */\n        createAnswerMultichoice(left, top, width, onlyMetrics, fontSize, disabled) {\n            const n = this.answers ? this.answers.length : 0;\n            const aChecked = this.answer?.split(\",\").filter(Boolean) || [];\n            const retSize = [0, 0];\n            const checkboxSize = Math.round(fontSize);\n            this.aItemAnswer = Array(n);\n            this.aItemLabel = Array(n);\n            this.aItemCorrectX = new Array(n);\n\n            // Iterate over each answer\n            for (let i = 0; i < n; i++) {\n                const label = document.createElement(\"label\");\n                label.style.position = \"absolute\";\n                label.style.width = `${width}px`;\n                label.style.fontSize = `${fontSize}px`;\n                label.style.color = this.getContrastingColor(this.colorBackground);\n                label.innerHTML = this.answers[i];\n                label.classList.add('mmogame-quiz-multichoice-label');\n\n                if (onlyMetrics) {\n                    this.area.appendChild(label);\n                    const newSize = label.scrollWidth + fontSize + this.padding;\n                    retSize[0] = Math.max(retSize[0], newSize);\n                    retSize[1] += Math.max(label.scrollHeight, fontSize) + this.padding;\n                    this.area.removeChild(label);\n                    continue;\n                }\n\n                label.htmlFor = \"mmogame_quiz_input\" + i;\n                label.style.left = (left + fontSize + this.padding) + \"px\";\n                label.style.top = top + \"px\";\n                label.style.align = \"left\";\n                label.style.color = this.getContrastingColor(this.colorBackground);\n\n                // Create the checkbox\n                const checked = aChecked.includes(this.answersID[i]);\n                const item = this.createRadiobox(this.body, checkboxSize, this.colorDefinition, this.colorScore, checked, disabled);\n                item.style.position = \"absolute\";\n                item.style.left = `${left}px`;\n                item.style.top = `${top}px`;\n                item.id = \"mmogame_quiz_input\" + i;\n\n                // Event listeners for interactions\n                item.addEventListener('click', () => {\n                    if (!item.classList.contains(\"disabled\")) {\n                        this.onClickRadio(i, this.colorDefinition, this.colorScore, true);\n                    }\n                });\n\n                label.addEventListener('click', () => {\n                    this.onClickRadio(i, this.colorDefinition, this.colorScore, true);\n                });\n\n                this.area.appendChild(item);\n                this.area.appendChild(label);\n\n                this.aItemAnswer[i] = item;\n                this.aItemCorrectX[i] = left + fontSize + this.padding;\n                this.aItemLabel[i] = label;\n\n                // Adjust positioning\n                top += Math.max(label.scrollHeight, fontSize) + this.padding;\n            }\n\n            return onlyMetrics ? retSize : top;\n        }\n\n        /**\n         * Handles radio button click events for answers.\n         *\n         * @param {number} index - The index of the clicked radio button.\n         * @param {string} colorBack - The background color for the radio button.\n         * @param {string} color - The color for the radio button when selected.\n         * @param {boolean} callSendAnswer - Whether to send the answer immediately.\n         */\n        onClickRadio(index, colorBack, color, callSendAnswer) {\n            if (this.aItemAnswer[index].classList.contains(\"disabled\")) {\n                return;\n            }\n\n            // Update the selected radio button and deselect others\n            this.aItemAnswer.forEach((item, i) => {\n                const isDisabled = item.classList.contains(\"disabled\");\n                if (i === index) {\n                    item.classList.add(\"checked\");\n                    this.answerid = this.answersID[i];\n                } else {\n                    item.classList.remove(\"checked\");\n                }\n\n                this.drawRadio(item, isDisabled ? colorBack : 0xFFFFFF, color);\n            });\n\n            // Send the answer if autosave is enabled\n            if (this.autosave && callSendAnswer) {\n                this.callSetAnswer();\n            }\n        }\n\n        sendTimeout() {\n            let xmlhttp = new XMLHttpRequest();\n            xmlhttp.onreadystatechange = () => {\n                if (this.readyState === 4 && this.status === 200) {\n                    this.sendGetAttempt();\n                }\n            };\n            xmlhttp.open(\"POST\", this.url, true);\n\n            xmlhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n            let data = JSON.stringify({\n                \"command\": \"timeout\", \"mmogameid\": this.mmogameid, \"pin\": this.pin, 'kinduser': this.kinduser,\n                \"user\": this.user, \"attempt\": this.attempt\n            });\n            xmlhttp.send(data);\n        }\n\n        /**\n         * Generates an SVG for a correct or incorrect icon.\n         *\n         * @param {number} size - The size of the SVG.\n         * @param {boolean} iscorrect - Whether the answer is correct.\n         * @param {int} colorCorrect - Color for correct answers.\n         * @param {int} colorError - Color for incorrect answers.\n         * @returns {string} The SVG markup as a string.\n         */\n        getSVGcorrect(size, iscorrect, colorCorrect, colorError) {\n            if (iscorrect) {\n                let c = colorCorrect !== undefined ? this.getColorHex(colorCorrect) : '#398439';\n                return \"<svg aria-hidden=\\\"true\\\" class=\\\"svg-icon iconCheckmarkLg\\\" width=\\\"\" + size + \"\\\" height=\\\"\" + size +\n                    \"\\\" viewBox=\\\"0 0 36 36\\\"><path fill=\\\"\" + c + \"\\\" d=\\\"m6 14 8 8L30 6v8L14 30l-8-8v-8z\\\"></path></svg>\";\n            } else {\n                let c = colorError !== undefined ? this.getColorHex(colorError) : '#398439';\n                return \"<svg width=\\\"\" + size + \"\\\" height=\\\"\" + size +\n                    \"\\\" class=\\\"bi bi-x-lg\\\" viewBox=\\\"0 0 18 18\\\"> <path fill=\\\"\" + c +\n                    `\" d=\"M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 \n                1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z\"/></svg>`;\n            }\n        }\n\n\n        /**\n         * Updates the screen to show the correctness of the user's answers.\n         */\n        updateScreenAfterAnswerMultichoice() {\n            const correctAnswers = this.correct.split(\",\"); // Split correct answer IDs into an array\n\n            for (let i = 0; i < this.answersID.length; i++) {\n                const label = this.aItemLabel[i];\n                const isChecked = this.aItemAnswer[i].classList.contains(\"checked\");\n                const isCorrect = correctAnswers.includes(this.answersID[i]);\n\n                // Skip answers that are neither checked nor correct\n                if (!isCorrect && !isChecked) {\n                    continue;\n                }\n\n                // Adjust label styling and add correct/incorrect icon\n                const labelWidth = label.scrollWidth - this.radioSize;\n                label.style.left = `${parseInt(label.style.left) + this.radioSize}px`;\n                label.style.width = `${labelWidth}px`;\n\n                if (isCorrect) {\n                    label.innerHTML = `<b>${label.innerHTML}</b>`;\n                }\n\n                const top = parseInt(this.aItemAnswer[i].style.top);\n                const feedbackDiv = this.createDiv(this.area, 'mmogame-quiz-correct',\n                    this.aItemCorrectX[i], top, this.radioSize, this.radioSize);\n                feedbackDiv.innerHTML = this.getSVGcorrect(this.radioSize, isCorrect, this.colorScore, this.colorScore);\n            }\n        }\n\n        /**\n         * Disables all answer inputs to prevent further interaction.\n         */\n        disableInput() {\n            if (!this.aItemAnswer) {\n                return;\n            }\n\n            for (const item of this.aItemAnswer) {\n                item.classList.add(\"disabled\"); // Add 'disabled' class to each input\n                this.drawRadio(item, this.colorScore, this.colorDefinition); // Update styling\n            }\n        }\n        /**\n         * Sends periodic fast JSON updates to the server.\n         */\n        sendFastJSON() {\n            // Clear existing timeout if any\n            if (this.timeoutFastJSON !== undefined) {\n                clearTimeout(this.timeoutFastJSON);\n            }\n\n            this.timeoutFastJSON = setTimeout(() => {\n                const xhr = new XMLHttpRequest();\n                xhr.onreadystatechange = () => {\n                    this.timeoutFastJSON = undefined;\n                    if (xhr.readyState === 4 && xhr.status === 200) {\n                        this.onServerFastJson(xhr.response);\n                    }\n                };\n\n                const url = `${this.url}/state.php`;\n                xhr.open(\"POST\", url, true);\n\n                const data = new FormData();\n                data.set('fastjson', this.fastjson);\n                data.set('type', this.type);\n\n                xhr.send(data); // Send the fast JSON data\n            }, this.timeForSendAnswer);\n        }\n\n\n        onClickHelp() {\n            if (this.helpUrl !== '') {\n                window.open(this.helpUrl, \"_blank\");\n            }\n        }\n\n        getStringT(name) {\n            return M.util.get_string(name, 'mmogametype_quiz');\n        }\n\n        /**\n         * Creates a percentage-based score display using createDOMElement.\n         *\n         * @param {string} prefixclassname\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} color\n         * @param {boolean} createAddScore\n         */\n        createDivScorePercent(prefixclassname, left, top, color, createAddScore) {\n            // Create the main button container\n            const main = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${prefixclassname}-main`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                    border: \"0px solid \" + this.getColorHex(0xFFFFFF),\n                    boxShadow: \"inset 0 0 0.125em rgba(255, 255, 255, 0.75)\",\n                    color: color,\n                },\n                attributes: {\n                    disabled: true,\n                    innerHTML: '',\n                },\n            });\n\n            // Create the main score label\n            const scoreLabel = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${prefixclassname}-score`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top + this.iconSize / 4}px`,\n                    width: `${this.iconSize / 2}px`,\n                    height: `${this.iconSize / 2}px`,\n                    lineHeight: `${this.iconSize / 2}px`,\n                    textAlign: 'center',\n                    color: this.getContrastingColor(this.colorScore),\n                },\n                attributes: {\n                    title: this.getStringM('js_grade'),\n                },\n            });\n\n            // Create the ranking grade label\n            const rankLabel = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${prefixclassname}-rank`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize / 2}px`,\n                    height: `${this.iconSize / 3}px`,\n                    textAlign: 'center',\n                    color: this.getContrastingColor(this.colorScore),\n                },\n                attributes: {\n                    title: this.getStringM('js_ranking_grade'),\n                },\n            });\n\n            // Create the percentage label\n            const percentLabel = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${prefixclassname}-percent`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left + this.iconSize / 2}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize / 2}px`,\n                    height: `${this.iconSize / 3}px`,\n                    textAlign: 'center',\n                    fontSize: `${this.iconSize / 3}px`,\n                    lineHeight: `${this.iconSize / 3}px`,\n                    color: rankLabel.style.color,\n                },\n                attributes: {\n                    title: this.getStringM('js_ranking_percent'),\n                },\n            });\n\n            // Create the additional score label\n            let addScoreLabel = null;\n            if (createAddScore) {\n                addScoreLabel = this.createDOMElement('div', {\n                    parent: this.body,\n                    classnames: `${prefixclassname}-addscore`,\n                    styles: {\n                        position: 'absolute',\n                        left: `${left + this.iconSize / 2}px`,\n                        top: `${top + this.iconSize - this.iconSize / 3}px`,\n                        width: `${this.iconSize / 2}px`,\n                        height: `${this.iconSize / 3}px`,\n                        textAlign: 'center',\n                        fontWeight: 'bold',\n                        color: color,\n                    },\n                    attributes: {\n                        title: this.getStringM('js_percent'),\n                    },\n                });\n            }\n\n            return {main, scoreLabel, rankLabel, percentLabel, addScoreLabel};\n        }\n\n        /**\n         * Creates and displays the definition area for the question.\n         *\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} width - The width of the definition area.\n         * @param {boolean} onlyMetrics - Whether to only measure size.\n         * @param {number} fontSize - The font size for the definition text.\n         * @returns {Array} The width and height of the definition area.\n         */\n        createDefinition(left, top, width, onlyMetrics, fontSize) {\n            width -= 2 * this.padding;\n\n            const definitionDiv = document.createElement(\"div\");\n            definitionDiv.style.position = \"absolute\";\n            definitionDiv.style.width = `${width}px`;\n            definitionDiv.style.fontSize = `${fontSize}px`;\n            definitionDiv.innerHTML = this.definition;\n\n            if (onlyMetrics) {\n                this.body.appendChild(definitionDiv);\n                const size = [definitionDiv.scrollWidth, definitionDiv.scrollHeight];\n                this.body.removeChild(definitionDiv);\n                return size;\n            }\n\n            // Apply styling and position\n            definitionDiv.style.background = this.getColorHex(this.colorDefinition);\n            definitionDiv.style.color = this.getContrastingColor(this.colorDefinition);\n            definitionDiv.style.left = `${left}px`;\n            definitionDiv.style.top = `${top}px`;\n            definitionDiv.style.paddingLeft = `${this.padding}px`;\n            definitionDiv.style.paddingRight = `${this.padding}px`;\n\n            this.area.appendChild(definitionDiv);\n\n            const height = definitionDiv.scrollHeight + this.padding;\n            definitionDiv.style.height = `${height}px`;\n\n            this.definitionHeight = height;\n            this.divDefinition = definitionDiv;\n\n            return [definitionDiv.scrollWidth, definitionDiv.scrollHeight];\n        }\n\n        /**\n         * Displays the current score and ranking on the screen.\n         *\n         * @param {Object} scoreData - The data containing score, rank, and percentages.\n         * @param {string} scoreData.addscore\n         * @param {int} scoreData.completedrank\n         * @param {int} scoreData.percentcompleted\n         * @param {int} scoreData.rank\n         * @param {int} scoreData.sumscore\n         * @param {string} scoreData.usercode\n         */\n        showScore({addscore, completedrank, percentcompleted, rank, sumscore, usercode}) {\n            // Update total score display\n            const scoreText = sumscore !== undefined ? `<b>${sumscore}</b>` : '';\n            if (this.labelScore.innerHTML !== scoreText) {\n                this.labelScore.innerHTML = scoreText;\n                this.autoResizeText(this.labelScore, this.iconSize - 2 * this.padding, this.iconSize / 2, false, 0, 0, 1);\n            }\n\n            // Update rank display\n            if (this.labelScoreRank.innerHTML !== rank) {\n                this.labelScoreRank.innerHTML = rank || '';\n                this.autoResizeText(this.labelScoreRank, this.iconSize, this.iconSize / 3, true, 0, 0, 1);\n            }\n\n            // Update document title if applicable\n            if (usercode !== undefined) {\n                document.title = `${usercode} ${name || ''}`;\n            }\n\n            // Update additional score\n            const addScoreText = addscore !== undefined ? addscore : '';\n            if (this.labelAddScore.innerHTML !== addScoreText) {\n                this.labelAddScore.innerHTML = addScoreText;\n                this.autoResizeText(this.labelAddScore, this.iconSize - 2 * this.padding, this.iconSize / 3, false, 0, 0, 1);\n            }\n\n            // Update completed rank display\n            if (this.labelScoreRankB.innerHTML !== completedrank) {\n                this.labelScoreRankB.innerHTML = completedrank || '';\n                this.autoResizeText(this.labelScoreRankB, 0.9 * this.iconSize / 2, this.iconSize / 3, true, 0, 0, 1);\n            }\n\n            // Update percentage completed\n            const percentageText = percentcompleted !== undefined ? `${Math.round(100 * percentcompleted)}%` : '';\n            if (this.labelScoreB.innerHTML !== percentageText) {\n                this.labelScoreB.innerHTML = percentageText;\n                this.autoResizeText(this.labelScoreB, 0.8 * this.iconSize / 2, this.iconSize / 3, true, 0, 0, 1);\n            }\n        }\n\n        /**\n         * Sends the selected answer to the server using Moodle's AJAX API.\n         */\n        callSetAnswer() {\n            // Clear existing timeout\n            if (this.timerTimeout !== undefined) {\n                clearTimeout(this.timerTimeout);\n            }\n\n            this.timerTimeout = undefined;\n\n            require(['core/ajax'], (Ajax) => {\n                const params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    attempt: this.attempt,\n                    answer: this.answer || null,\n                    answerid: this.answerid || null,\n                    subcommand: '',\n                };\n\n                Ajax.call([{\n                    methodname: 'mmogametype_quiz_set_answer', // API endpoint\n                    args: params,\n                }])[0].done((response) => {\n                    this.processSetAnswer(JSON.parse(response)); // Process the server's response\n                }).fail((error) => {\n                    this.showError(error); // Handle errors\n                });\n            });\n        }\n\n    };\n    });"],"names":["define","MmoGameUI","constructor","hideSubmit","timeForSendAnswer","setColors","colors","repairColors","colorDefinition","this","colorScore","colorCopyright","colorScore2","openGame","audioYes","Audio","load","audioNo","processGetAttempt","json","computeDifClock","time","timestart","timeclose","setColorsString","createIconBar","name","document","title","helpurl","helpUrl","errorcode","createDivMessage","state","parseInt","fastjson","timefastjson","updateButtonsAvatar","avatar","nickname","attempt","qtype","answers","answersID","answerids","forEach","answer","index","repairP","undefined","endofgame","definition","createScreen","updateLabelTimer","sendFastJSON","labelTimer","now","Date","remainingTime","Math","max","innerHTML","onTimeout","minutes","floor","seconds","String","padStart","timerTimeout","setTimeout","disableInput","sendTimeout","disabled","createArea","getStringM","showScore","vertical","createScreenVertical","createScreenHorizontal","nickNameHeight","round","iconSize","padding","maxHeight","areaHeight","maxWidth","areaWidth","fontSize","findbest","minFontSize","maxFontSize","defSize","createDefinition","ansSize","createAnswer","radioSize","nextTop","space","btnSubmit","createImageButton","area","addEventListener","removeChild","sendAnswer","stripLeft","stripWidth","stripHeight","width","step","body","left","top","onlyMetrics","createAnswerMultichoice","n","length","aChecked","split","filter","Boolean","retSize","checkboxSize","aItemAnswer","Array","aItemLabel","aItemCorrectX","i","label","createElement","style","position","color","getContrastingColor","colorBackground","classList","add","appendChild","newSize","scrollWidth","scrollHeight","htmlFor","align","checked","includes","item","createRadiobox","id","contains","onClickRadio","colorBack","callSendAnswer","isDisabled","answerid","remove","drawRadio","autosave","callSetAnswer","xmlhttp","XMLHttpRequest","onreadystatechange","readyState","status","sendGetAttempt","open","url","setRequestHeader","data","JSON","stringify","mmogameid","pin","kinduser","user","send","getSVGcorrect","size","iscorrect","colorCorrect","colorError","getColorHex","updateScreenAfterAnswerMultichoice","correctAnswers","correct","isChecked","isCorrect","labelWidth","createDiv","timeoutFastJSON","clearTimeout","xhr","onServerFastJson","response","FormData","set","type","onClickHelp","window","getStringT","M","util","get_string","createDivScorePercent","prefixclassname","createAddScore","main","createDOMElement","parent","classnames","styles","height","border","boxShadow","attributes","scoreLabel","lineHeight","textAlign","rankLabel","percentLabel","addScoreLabel","fontWeight","definitionDiv","background","paddingLeft","paddingRight","definitionHeight","divDefinition","addscore","completedrank","percentcompleted","rank","sumscore","usercode","scoreText","labelScore","autoResizeText","labelScoreRank","addScoreText","labelAddScore","labelScoreRankB","percentageText","labelScoreB","require","Ajax","params","subcommand","call","methodname","args","done","processSetAnswer","parse","fail","error","showError"],"mappings":"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"}