{"version":3,"file":"mmogameui.min.js","sources":["../src/mmogameui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mod_mmogame/mmogame'], function(MmoGame) {\n    return class MmoGameUI extends MmoGame {\n\n        isVertical;\n        kindSound; // Type: Number (0 = on, 1 = off, 2 = speak)\n        buttonSound;\n        colorBackground = 0xFFFFFF;\n        colorDefinition;\n        colorScore;\n\n        // Other\n        definition;\n        nickname;\n        user;\n        paletteid;\n        avatarid;\n\n        // Form fields\n        edtCode;\n        edtNickname;\n\n        constructor() {\n            super();\n            this.isVertical = window.innerWidth < window.innerHeight;\n        }\n\n        /**\n         * Returns the appropriate file for mute/unmute.\n         * @returns {string} The file path.\n         */\n        getMuteFile() {\n            return this.kindSound === 0 ? 'assets/sound-on-flat.png' : 'assets/sound-off-flat.png';\n        }\n\n        /**\n         * Plays a sound file if sound is enabled.\n         *\n         * @param {HTMLAudioElement} audioElement - The audio element to play.\n         */\n        playAudio(audioElement) {\n            if (this.kindSound !== 0 && audioElement) {\n                if (audioElement.networkState === 1) {\n                    audioElement.play();\n                }\n            }\n        }\n\n        createButtonSound(left, top, size) {\n            this.buttonSound = this.createDOMElement('img', {\n                parent: this.body,\n                classnames: 'mmogame-button-sound',\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${size}px`,\n                    height: `${size}px`,\n                },\n                attributes: {\n                    src: this.getMuteFile(),\n                    alt: this.getStringM('js_sound'),\n                    role: 'button',\n                },\n            });\n            this.buttonSound.addEventListener(\"click\", () => this.onClickSound(this.buttonSound));\n        }\n\n        /**\n         * Toggles sound on or off when clicked.\n         * @param {HTMLElement} button - The sound toggle button.\n         */\n        onClickSound(button) {\n            this.kindSound = (this.kindSound + 1) % 2;\n            button.src = this.getMuteFile();\n            this.setOptions({kindSound: this.kindSound});\n        }\n\n        /**\n         * Opens the gate UI, computes sizes, and initializes settings based on the user type.\n         * @param {number} mmogameid - The game ID.\n         * @param {string} pin - The game PIN.\n         * @param {string} kinduser - The type of user (e.g., \"moodle\" or \"guid\").\n         * @param {string} user - The user identifier.\n         * @param {string} url - The game URL.\n         */\n        gateOpen(mmogameid, pin, kinduser, user, url) {\n            const instance = this;\n\n            try {\n                // Initialize class variables\n                this.url = url;\n                this.mmogameid = mmogameid;\n                this.pin = pin;\n                this.kinduser = kinduser;\n                instance.user = user;\n\n                // Adjust font sizes\n                this.minFontSize *= 2;\n                this.maxFontSize *= 2;\n\n                // Compute sizes and layout\n                this.gateComputeSizes();\n                this.areaRect = {\n                    top: this.padding,\n                    width: Math.round(window.innerWidth - 2 * this.padding),\n                    height: Math.round(window.innerHeight - this.areaTop - this.padding),\n                };\n\n                // Load options and initialize UI\n                this.getOptions()\n                    .then((options) => {\n                        // Set default options if undefined\n                        options.kindsound = options.kindsound || 0;\n                        options.nickname = options.nickname || '';\n                        options.avatarid = options.avatarid || 0;\n                        options.paletteid = options.paletteid || 0;\n\n                        // Assign kindSound within valid range\n                        this.kindSound = [1, 2].includes(options.kindSound) ? options.kindSound : 0;\n\n                        const isReady = options.nickname && options.avatarid && options.paletteid;\n\n                        if (kinduser === 'moodle' && isReady) {\n                            this.gatePlayGame(false, options.nickname, options.paletteid, options.avatarid);\n                        } else if (kinduser === 'guid') {\n                            options.userGUID = options.userGUID || '';\n\n                            if (options.userGUID.length >= 10 && isReady) {\n                                instance.user = options.userGUID;\n                                this.gatePlayGame(false, options.nickname, options.paletteid, options.avatarid);\n                            } else {\n                                this.gateCreateScreen();\n                            }\n                        } else {\n                            this.gateCreateScreen();\n                        }\n\n                        return true;\n                    })\n                    .catch((error) => {\n                        this.showError('gateOpen unexpected', error);\n                    });\n            } catch (error) {\n                this.showError('gateOpen', error);\n            }\n        }\n\n        gatePlayGame(save, nickname, paletteid, avatarid) {\n            let instance = this;\n\n            if (instance.kinduser === 'guid' && instance.user === '') {\n                this.uuid4();\n            }\n\n            if (!save) {\n                instance.nickname = nickname;\n                instance.paletteid = paletteid;\n                instance.avatarid = avatarid;\n                instance.callGetAttempt({nickname: nickname, colorpaletteid: paletteid, avatarid: avatarid});\n                return;\n            }\n\n            let options = {nickname: nickname, avatarid: avatarid, paletteid: paletteid};\n\n            this.setOptions(options)\n                .then(() => {\n                    this.nickname = nickname;\n                    this.paletteid = paletteid;\n                    this.avatarid = avatarid;\n                    this.callGetAttempt();\n                    return true;\n                })\n                .catch(error => {\n                    this.showError(error.message);\n                    return false;\n                });\n        }\n\n        gateCreateScreen() {\n            this.createArea();\n\n            if (this.isVertical) {\n                this.gateCreateScreenVertical();\n            } else {\n                this.gateCreateScreenHorizontal();\n            }\n        }\n\n        gateCreateScreenVertical() {\n            const instance = this;\n\n            let maxHeight = instance.areaRect.height - 5 * instance.padding - instance.iconSize;\n            let maxWidth = instance.areaRect.width;\n            let size;\n\n            const labels = [\n                `${instance.getStringM('js_name')}: `,\n                instance.getStringM('js_code'),\n                instance.getStringM('js_palette')\n            ];\n\n            instance.fontSize = instance.findbest(instance.minFontSize, instance.maxFontSize, (fontSize) => {\n                size = instance.gateComputeLabelSize(fontSize, labels);\n\n                if (size[0] >= maxWidth) {\n                    return 1;\n                }\n                const heightCode = instance.kinduser !== 'guid' && instance.kinduser !== 'moodle' ?\n                    size[1] + instance.padding : 0;\n\n                const heightColors = (maxHeight - 4 * fontSize) * 2 / 5;\n                let n = Math.floor(heightColors / instance.iconSize);\n                if (n === 0) {\n                    return 1;\n                }\n                const heightAvatars = (maxHeight - 4 * fontSize + heightColors) * 3 / 5;\n                const computedHeight = heightCode + 3 * size[1] + 8 * instance.padding + heightColors + heightAvatars;\n\n                return computedHeight < maxHeight ? -1 : 1;\n            });\n\n            instance.gateCreateScreenVerticalDo(maxWidth, maxHeight, size);\n        }\n\n        gateCreateScreenVerticalDo(maxWidth, maxHeight, size) {\n            const instance = this;\n\n            let gridWidthColors = maxWidth - instance.padding;\n            let gridWidthAvatars = maxWidth - instance.padding;\n            let gridHeightColors = (maxHeight - 4 * instance.fontSize) * 2 / 5;\n            let newHeight = Math.floor(gridHeightColors / instance.iconSize) * instance.iconSize;\n            let newWidth = Math.floor(gridWidthColors / instance.iconSize) * instance.iconSize;\n            let rest = gridHeightColors - newHeight;\n            gridHeightColors = newHeight;\n            let gridHeightAvatars = (maxHeight - 4 * instance.fontSize + rest) * 3 / 5;\n\n            // Creates the \"Code\" field.\n            let bottom;\n            if (instance.kinduser !== 'guid' && instance.kinduser !== 'moodle') {\n                // A bottom = this.gateCreateCode(0, 0, maxWidth, this.fontSize, size[0]);\n                bottom = instance.gateCreateLabelEditVertical(0, 0, maxWidth, instance.fontSize,\n                    size[0], instance.getStringM('js_code') + \": \",\n                    'mmogame-gate-code-label', 'mmogame-gate-code') + 2 * this.padding;\n                instance.edtCode = instance.edt;\n                instance.edtCode.addEventListener(\"keyup\", instance.debounce(() => instance.gateUpdateSubmit(), 300));\n            } else {\n                bottom = 0;\n            }\n\n            bottom = instance.gateCreateLabelEditVertical(0, bottom,\n                newWidth - 2 * instance.padding, instance.fontSize, size[0],\n                instance.getStringM('js_name') + \": \",\n                'mmogame-gate-name-label', 'mmogame-gate-name') + 2 * instance.padding;\n            instance.edtNickname = instance.edt;\n            instance.edtNickname.addEventListener(\"keyup\", instance.debounce(() => instance.gateUpdateSubmit(), 300));\n\n            instance.gateCreateScreenPalette(bottom, gridWidthColors, gridHeightColors,\n                gridWidthAvatars, gridHeightAvatars);\n\n            bottom += this.fontSize + instance.padding;\n\n            // Vertical\n            instance.gateSendGetColorsAvatars(0, bottom, gridWidthColors, gridHeightColors,\n                0, bottom + gridHeightColors + instance.fontSize + instance.padding, gridWidthAvatars,\n                gridHeightAvatars);\n\n            const bottom2 = bottom + gridHeightColors + instance.fontSize + instance.padding + gridHeightAvatars;\n\n            instance.gateCreateButtonSubmit(maxWidth, bottom2);\n        }\n\n        gateCreateScreenHorizontal() {\n            const instance = this;\n\n            let maxHeight = instance.areaHeight - 7 * instance.padding - instance.iconSize;\n            let maxWidth = instance.areaWidth;\n            let size;\n\n            const sName = instance.getStringM('js_name') + \": \";\n            let labels = [instance.getStringM('js_code'), sName, instance.getStringM('js_palette')];\n\n            instance.fontSize = instance.findbest(instance.minFontSize, instance.maxFontSize, (fontSize) => {\n                size = instance.gateComputeLabelSize(fontSize, labels);\n\n                if (size[0] >= maxWidth) {\n                    return 1;\n                }\n                let heightCode = instance.kinduser !== 'guid' && instance.kinduser !== 'moodle' ? size[1] + instance.padding : 0;\n\n                let heightColors = (maxHeight - 4 * fontSize) * 2 / 5;\n                let n = Math.floor(heightColors / instance.iconSize);\n                if (n === 0) {\n                    return 1;\n                }\n                let heightAvatars = (maxHeight - 4 * fontSize + heightColors) * 3 / 5;\n                let computedHeight = heightCode + 2 * size[1] + 7 * instance.padding + heightColors + heightAvatars;\n\n                return computedHeight < maxHeight ? -1 : 1;\n            });\n\n            instance.gateCreateScreenHorizontalDo(maxWidth, maxHeight, size, sName);\n        }\n\n        gateCreateScreenHorizontalDo(maxWidth, maxHeight, size, sName) {\n            const instance = this;\n\n            const gridWidthColors = maxWidth - instance.padding;\n            const gridWidthAvatars = maxWidth - instance.padding;\n            let gridHeightColors = (maxHeight - 4 * instance.fontSize) * 2 / 5;\n            const newHeight = Math.floor(gridHeightColors / instance.iconSize) * instance.iconSize;\n            const newWidth = Math.floor(gridWidthColors / instance.iconSize) * instance.iconSize;\n            let rest = gridHeightColors - newHeight;\n            gridHeightColors = newHeight;\n            const gridHeightAvatars = Math.floor((maxHeight - 4 * instance.fontSize) * 3 / 5 + rest);\n\n            // Creates the \"Code\" field.\n            let bottom;\n            if (instance.kinduser !== 'guid' && instance.kinduser !== 'moodle') {\n                bottom = instance.gateCreateLabelEditVertical(0, 0, maxWidth, instance.fontSize, size[0],\n                    instance.getStringM('js_code')) + 2 * instance.padding;\n                instance.edtCode = instance.edt;\n                instance.edtCode.addEventListener(\"keyup\", instance.debounce(() => instance.gateUpdateSubmit(), 300));\n            } else {\n                bottom = 0;\n            }\n\n            // Creates the \"nickname\" field.\n            let sizeLabel = instance.gateComputeLabelSize(instance.fontSize, [sName]);\n            bottom = this.gateCreateLabelEditHorizontal(0, bottom,\n                newWidth - 2 * instance.padding, instance.fontSize,\n                sizeLabel[0], instance.getStringM('js_name') + \": \",\n                'mmogame-gate-name-label', 'mmogame-gate-name');\n\n            instance.edtNickname = this.edt;\n            instance.edtNickname.addEventListener(\"keyup\", instance.debounce(() => instance.gateUpdateSubmit(), 300));\n\n            let label1 = document.createElement(\"label\");\n            label1.style.position = \"absolute\";\n            label1.style.color = instance.getContrastingColor(instance.colorBackground);\n            label1.innerHTML = instance.getStringM('js_palette');\n            label1.style.font = \"FontAwesome\";\n            label1.style.fontSize = instance.fontSize + \"px\";\n            label1.style.width = \"0px\";\n            label1.style.whiteSpace = \"nowrap\";\n            instance.area.appendChild(label1);\n\n            // Button refresh color palettes\n            let btn = instance.createImageButton(instance.area, 'mmogame-button-gate-refresh',\n                label1.scrollWidth + instance.padding, bottom, instance.iconSize, instance.fontSize,\n                'assets/refresh.svg', false, 'refresh');\n            instance.addEventListenerRefresh(btn, bottom, gridWidthColors, gridHeightColors,\n                gridWidthAvatars, gridHeightAvatars, true, false);\n\n            label1.style.left = 0;\n            label1.style.color = instance.getContrastingColor(instance.colorBackground);\n            label1.style.top = bottom + \"px\";\n            bottom += instance.fontSize + instance.padding;\n\n            let label = document.createElement(\"label\");\n            label.style.position = \"absolute\";\n            label.innerHTML = instance.getStringM('js_avatars');\n            label.style.font = \"FontAwesome\";\n            label.style.fontSize = instance.fontSize + \"px\";\n            label.style.width = \"0 px\";\n            label.style.whiteSpace = \"nowrap\";\n            instance.area.appendChild(label);\n\n            // Button refresh avatars\n            btn = instance.createImageButton(instance.area, 'mmogame-button-gate-refresh-avatars',\n                label.scrollWidth + instance.padding, bottom + gridHeightColors, instance.iconSize,\n                instance.fontSize, 'assets/refresh.svg', false, 'refresh');\n            btn.addEventListener(\"click\", () => {\n                let elements = instance.area.getElementsByClassName(\"mmogame_avatar\");\n\n                while (elements[0]) {\n                    elements[0].parentNode.removeChild(elements[0]);\n                }\n\n                instance.gateSendGetColorsAvatars(0, bottom, gridWidthColors, gridHeightColors, 0,\n                    bottom + gridHeightColors + instance.fontSize + instance.padding, gridWidthAvatars, gridHeightAvatars,\n                    false, true);\n            });\n\n            // Avatar\n            label.style.left = \"0 px\";\n            label.style.color = instance.getContrastingColor(instance.colorBackground);\n            label.style.top = (bottom + gridHeightColors) + \"px\";\n\n            // Horizontal\n            instance.gateSendGetColorsAvatars(0, bottom, gridWidthColors, gridHeightColors,\n                0, bottom + gridHeightColors + instance.fontSize + instance.padding, gridWidthAvatars,\n                gridHeightAvatars);\n\n            let bottom2 = bottom + gridHeightColors + instance.fontSize + instance.padding + gridHeightAvatars;\n            instance.btnSubmit = instance.createImageButton(instance.area, 'mmogame-button-gate-submit',\n                (maxWidth - instance.iconSize) / 2, bottom2, 0, instance.iconSize,\n                'assets/submit.svg', false, 'submit');\n            instance.btnSubmit.style.visibility = 'hidden';\n            instance.btnSubmit.addEventListener(\"click\", () => {\n                if (instance.edtCode !== undefined) {\n                    instance.user = instance.edtCode.value;\n                }\n                instance.gatePlayGame(true, this.edtNickname.value, this.paletteid, this.avatarid);\n            });\n        }\n\n        gateComputeLabelSize(fontSize, aLabel) {\n            const instance = this;\n            let maxWidth = 0;\n            let maxHeight = 0;\n\n            for (let i = 0; i < aLabel.length; i++) {\n                const label = document.createElement(\"label\");\n                label.style.position = \"absolute\";\n                label.innerHTML = aLabel[i];\n                label.style.whiteSpace = \"nowrap\";\n                label.style.font = \"FontAwesome\";\n                label.style.fontSize = fontSize + \"px\";\n                label.style.width = \"0px\";\n                label.style.height = \"0px\";\n                instance.area.appendChild(label);\n\n                if (label.scrollWidth > maxWidth) {\n                    maxWidth = label.scrollWidth;\n                }\n\n                if (label.scrollHeight > maxHeight) {\n                    maxHeight = label.scrollHeight;\n                }\n                instance.area.removeChild(label);\n            }\n\n            return [maxWidth, maxHeight];\n        }\n\n        gateCreateLabelEditVertical(left, top, width, fontSize, labelWidth, title, classnamesLabel, classnamesEdit) {\n            const instance = this;\n\n            const label = instance.createLabel(instance.area, classnamesLabel, left, top, labelWidth, fontSize, title);\n            label.style.color = this.getContrastingColor(instance.colorBackground);\n\n            top += label.scrollHeight;\n\n            instance.edt = instance.gateCreateInput(classnamesEdit, left, top, width, fontSize);\n\n            return top + fontSize + instance.padding;\n        }\n\n        gateShowAvatars(left, top, width, height, countX, avatarids, avatars) {\n            const instance = this;\n            if (!avatars || avatars.length === 0) {\n                return; // Exit early if no avatars exist\n            }\n\n            const fragment = document.createDocumentFragment();\n\n            instance.avatar = undefined;\n            const count = avatars.length;\n            let leftOriginal = left;\n            let w = Math.round(this.padding / 2) + \"px\";\n            for (let i = 0; i < count; i++) {\n                let avatarImagePath = 'assets/avatars/' + avatars[i];\n                let btn = instance.createCenterImageButton(\n                    fragment,\n                    left, top,\n                    instance.iconSize - instance.padding, instance.iconSize - instance.padding,\n                    'mmogame-avatar',\n                    avatarImagePath\n                );\n                btn.classList.add(\"mmogame-avatar\");\n                let id = avatarids[i];\n                btn.addEventListener(\"click\", () => {\n                    instance.gateUpdateAvatar(btn, id, w);\n                });\n\n                // Move left position after placing the button\n                left += instance.iconSize;\n\n                // Reset left and move to the next row after filling countX buttons\n                if ((i + 1) % countX === 0) {\n                    top += instance.iconSize;\n                    left = leftOriginal;\n                }\n            }\n            instance.area.appendChild(fragment);\n        }\n\n        gateSendGetColorsAvatars(leftColors, topColors, gridWidthColors, gridHeightColors, leftAvatars, topAvatars,\n                                 gridWidthAvatars, gridHeightAvatars, updateColors = true, updateAvatars = true) {\n            const instance = this;\n\n            let countXcolors = Math.floor(gridWidthColors / instance.iconSize);\n            let countYcolors = Math.floor(gridHeightColors / instance.iconSize);\n\n            let countXavatars = Math.floor(gridWidthAvatars / instance.iconSize);\n            let countYavatars = Math.floor((gridHeightAvatars + 2 * instance.padding) / instance.iconSize);\n\n            if (!updateColors) {\n                countXcolors = countYcolors = 0;\n            }\n            if (!updateAvatars) {\n                countXavatars = countYavatars = 0;\n            }\n\n            require(['core/ajax'], (Ajax) => {\n                // Defining the parameters to be passed to the service\n                let params = {\n                    mmogameid: instance.mmogameid,\n                    kinduser: instance.kinduser,\n                    user: instance.user,\n                    avatars: countXavatars * countYavatars,\n                    colorpalettes: countXcolors * countYcolors,\n                };\n\n                // Calling the service through the Moodle AJAX API\n                let getAssets = Ajax.call([{\n                    methodname: 'mod_mmogame_get_assets',\n                    args: params\n                }]);\n\n                // Handling the response\n                getAssets[0].done(({avatarids, avatars, colorpaletteids, colorpalettes}) => {\n                    if (updateColors) {\n                        instance.gateShowColorPalettes(leftColors, topColors, gridWidthColors,\n                            gridHeightColors, countXcolors, countYcolors, colorpaletteids, colorpalettes);\n                    }\n                    if (updateAvatars) {\n                        instance.gateShowAvatars(leftAvatars, topAvatars, gridWidthAvatars, gridHeightAvatars, countXavatars,\n                            avatarids, avatars);\n                    }\n                }).fail((error) => {\n                    return error;\n                });\n            });\n        }\n\n        gateShowColorPalettes(left, top, width, height, countX, countY, colorpaletteids, colorpalettes) {\n            const instance = this;\n\n            let i = 0; // Counter for color palettes\n            const count = colorpalettes.length;\n            this.canvasColor = undefined;\n            const canvasSize = instance.iconSize - instance.padding * 3 / 2;\n            const parsedPalettes = colorpalettes.map(palette =>\n                palette.split(\",\").map(value => parseInt(value, 10) || 0)\n            );\n            const fragment = document.createDocumentFragment();\n            for (let iy = 0; iy < countY; iy++) {\n                for (let ix = 0; ix < countX; ix++) {\n                    // Check if we exceed available palettes or encounter invalid data\n                    if (i >= count || !parsedPalettes[i] || !colorpaletteids[i]) {\n                        i++; // Increment and continue if invalid\n                        continue;\n                    }\n\n                    // Create a new canvas element\n                    let canvas = document.createElement('canvas');\n                    canvas.style.position = \"absolute\";\n                    canvas.style.left = `${left + ix * instance.iconSize}px`;\n                    canvas.style.top = `${top + iy * instance.iconSize}px`;\n                    canvas.width = canvasSize;\n                    canvas.height = canvasSize;\n                    canvas.style.cursor = 'pointer';\n                    canvas.classList.add(\"mmogame_color\");\n\n                    // Append canvas to the area\n                    fragment.appendChild(canvas);\n\n                    // Render the color palette on the canvas\n                    instance.showColorPalette(canvas, parsedPalettes[i]);\n\n                    // Get the palette ID and attach a click event listener\n                    let id = colorpaletteids[i];\n                    canvas.addEventListener(\"click\", () => {\n                        instance.gateUpdateColorPalette(canvas, id);\n                    });\n\n                    i++;\n                }\n            }\n            instance.area.appendChild(fragment);\n        }\n\n        gateUpdateColorPalette(canvas, id) {\n            const instance = this;\n\n            if (instance.canvasColor !== undefined) {\n                instance.canvasColor.style.borderStyle = \"none\";\n            }\n            this.canvasColor = canvas;\n            let w = Math.round(instance.padding / 2) + \"px\";\n\n            Object.assign(canvas.style, {\n                borderStyle: \"outset\",\n                borderLeftWidth: w,\n                borderTopWidth: w,\n                borderRightWidth: w,\n                borderBottomWidth: w,\n            });\n            instance.paletteid = id;\n\n            instance.gateUpdateSubmit();\n        }\n\n        gateUpdateAvatar(avatar, id, w) {\n            const instance = this;\n\n            if (instance.avatar !== undefined) {\n                instance.avatar.style.borderStyle = \"none\";\n            }\n            instance.avatar = avatar;\n            avatar.style.borderStyle = \"outset\";\n\n            avatar.style.borderLeftWidth = w;\n            avatar.style.borderTopWidth = w;\n            avatar.style.borderRightWidth = w;\n            avatar.style.borderBottomWidth = w;\n\n            instance.avatarid = id;\n\n            instance.gateUpdateSubmit();\n        }\n\n        /**\n         * Updates the visibility of the submit button based on form input validation.\n         */\n        gateUpdateSubmit() {\n            const instance = this;\n\n            const isCodeValid = instance.edtCode?.value ? Number(instance.edtCode.value) > 0 : true;\n            const hasAvatar = instance.avatarid !== undefined;\n            const hasPalette = instance.paletteid !== undefined;\n            const hasNickname = instance.edtNickname?.value?.length > 0;\n\n            instance.btnSubmit.style.visibility =\n                isCodeValid && hasAvatar && hasPalette && hasNickname\n                    ? 'visible'\n                    : 'hidden';\n        }\n\n        gateComputeSizes() {\n            const instance = this;\n\n            instance.computeSizes();\n            instance.iconSize = Math.round(0.8 * instance.iconSize);\n            instance.padding = Math.round(0.8 * instance.padding);\n        }\n\n        gateCreateLabelEditHorizontal(left, top, width, fontSize, labelWidth, title, classnamesLabel, classnamesEdit) {\n            const instance = this;\n\n            const label = this.createLabel(instance.area, classnamesLabel, left, top, labelWidth, fontSize, title);\n            label.style.color = this.getContrastingColor(instance.colorBackground);\n\n            let ret = top + Math.max(label.scrollHeight, fontSize) + instance.padding;\n\n            let leftEdit = (left + labelWidth + this.padding);\n            this.edt = instance.gateCreateInput(classnamesEdit, leftEdit, top, width - leftEdit - this.padding, fontSize);\n\n            return ret;\n        }\n\n        gateCreateInput(classnames, left, top, width, fontSize) {\n            const instance = this;\n\n            const div = document.createElement(\"input\");\n            div.style.position = \"absolute\";\n            div.style.width = width + \"px\";\n            div.style.type = \"text\";\n            div.style.fontSize = fontSize + \"px\";\n\n            div.style.left = left + \"px\";\n            div.style.top = top + \"px\";\n            div.autofocus = true;\n\n            div.classList.add(...classnames.split(/\\s+/));\n\n            instance.area.appendChild(div);\n\n            return div;\n        }\n\n        /**\n         * Creates the screen palette UI with a label and a refresh button.\n         * @param {number} bottom - The vertical position for the elements.\n         * @param {number} gridWidthColors - The width of the color grid in pixels.\n         * @param {number} gridHeightColors - The height of the color grid in pixels.\n         * @param {number} gridWidthAvatars - The width of the avatar grid in pixels.\n         * @param {number} gridHeightAvatars - The height of the avatar grid in pixels.\n         */\n        gateCreateScreenPalette(bottom, gridWidthColors, gridHeightColors, gridWidthAvatars, gridHeightAvatars) {\n            const instance = this;\n\n            // Create and configure the label\n            const label = instance.createDOMElement('label', {\n                parent: instance.area,\n                styles: {\n                    position: 'absolute',\n                    font: 'FontAwesome',\n                    fontSize: `${instance.fontSize}px`,\n                    width: '0px',\n                    whiteSpace: 'nowrap',\n                    color: instance.getContrastingColor(instance.colorBackground),\n                    top: `${bottom}px`,\n                    left: '0px',\n                },\n                attributes: {\n                    innerHTML: instance.getStringM('js_palette'),\n                },\n            });\n\n            // Create the refresh button\n            const btn = instance.createImageButton(\n                instance.area,\n                'mmogame-gate-palette',\n                label.scrollWidth + instance.padding, bottom,\n                instance.iconSize, instance.fontSize,\n                'assets/refresh.svg',\n                false, 'refresh'\n            );\n\n            // Add event listener to refresh button\n            this.addEventListenerRefresh(btn, bottom, gridWidthColors, gridHeightColors,\n                gridWidthAvatars, gridHeightAvatars, true, false);\n        }\n\n        gateCreateButtonSubmit = (maxWidth, bottom2) => {\n            this.btnSubmit = this.createImageButton(this.area, 'mmogame-gate-submit',\n                (maxWidth - this.iconSize) / 2, bottom2, 0, this.iconSize,\n                'assets/submit.svg', false, 'submit');\n            this.btnSubmit.style.visibility = 'hidden';\n            this.btnSubmit.addEventListener(\"click\", () => {\n                if (this.edtCode !== undefined) {\n                    this.user = this.edtCode.value;\n                }\n                this.gatePlayGame(true, this.edtNickname.value, this.paletteid, this.avatarid);\n            });\n        };\n\n\n        /**\n         * Adds an event listener to refresh colors and avatars.\n         *\n         * @param {HTMLElement} btn - The button to attach the event listener to.\n         * @param {number} bottom - The Y-coordinate offset for grid positioning.\n         * @param {number} gridWidthColors - Width of the color grid.\n         * @param {number} gridHeightColors - Height of the color grid.\n         * @param {number} gridWidthAvatars - Width of the avatar grid.\n         * @param {number} gridHeightAvatars - Height of the avatar grid.\n         * @param {boolean} updateColors - Callback to update colors.\n         * @param {boolean} updateAvatars - Callback to update avatars.\n         */\n        addEventListenerRefresh(btn, bottom, gridWidthColors, gridHeightColors, gridWidthAvatars, gridHeightAvatars,\n                                updateColors, updateAvatars) {\n            btn.addEventListener(\"click\", () => {\n                const elements = Array.from(this.area.getElementsByClassName(\"mmogame_color\"));\n                elements.forEach(element => element.remove());\n\n                this.gateSendGetColorsAvatars(0, bottom, gridWidthColors, gridHeightColors,\n                    0, bottom + gridHeightColors + this.fontSize + this.padding, gridWidthAvatars, gridHeightAvatars,\n                    updateColors, updateAvatars);\n            });\n        }\n\n        /**\n         * Creates the main game area.\n         */\n        createArea() {\n            const instance = this;\n\n            if (instance.area) {\n                instance.body.removeChild(instance.area);\n            }\n\n            instance.area = this.createDiv(\n                instance.body,\n                'mmogame-area',\n                instance.padding,\n                instance.areaTop,\n                instance.areaWidth,\n                instance.areaHeight\n            );\n        }\n\n        /**\n         * Creates a modal dialog.\n         * @param {string} classnames - The CSS class for the modal.\n         * @param {string} title - The title of the modal.\n         * @param {string} content - The content of the modal.\n         * @returns {HTMLElement} - The modal element.\n         */\n        createModal(classnames, title, content) {\n            const modal = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${classnames} modal`,\n                styles: {\n                    position: 'fixed',\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%, -50%)',\n                    backgroundColor: '#fff',\n                    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\n                    padding: '20px',\n                    zIndex: 1000,\n                },\n            });\n\n            const header = this.createDOMElement('div', {\n                parent: modal,\n                classnames: `${classnames}-header`,\n                styles: {\n                    fontWeight: 'bold',\n                    marginBottom: '10px',\n                },\n            });\n            header.innerText = title;\n\n            const body = this.createDOMElement('div', {\n                parent: modal,\n                classnames: `${classnames}-body`,\n            });\n            body.innerHTML = content;\n\n            const closeButton = this.createDOMElement('button', {\n                parent: modal,\n                classnames: `${classnames}-close`,\n                styles: {\n                    marginTop: '10px',\n                    display: 'block',\n                    marginLeft: 'auto',\n                    marginRight: 'auto',\n                },\n                attributes: {type: 'button'},\n            });\n            closeButton.innerText = 'Close';\n\n            closeButton.addEventListener('click', () => {\n                this.body.removeChild(modal);\n            });\n\n            return modal;\n        }\n\n\n        createDivMessage(classnames, message) {\n            const instance = this;\n\n            if (instance.area !== undefined) {\n                instance.body.removeChild(instance.area);\n                instance.area = undefined;\n            }\n\n            if (instance.divMessageHelp !== undefined) {\n                instance.body.removeChild(instance.divMessageHelp);\n                instance.divMessageHelp = undefined;\n            }\n\n            let left = instance.padding;\n            let top = instance.areaTop;\n            let width = window.innerWidth - 2 * instance.padding;\n            let height = window.innerHeight - instance.getCopyrightHeight() - instance.padding - top;\n\n            instance.createDivMessageDo(classnames, left, top, width, height, message, height);\n\n            instance.divMessage.style.top = (height - instance.divMessage.scrollHeight) / 2 + \"px\";\n        }\n\n        createButtonAvatar(prefixclassname, left, topNickName, widthNickName, heightNickName, topAvatar, widthAvatar, title) {\n            const nickname = this.createDOMElement('div', {\n                classname: `${prefixclassname}-nickname`,\n                parent: this.body,\n                styles: {\n                    left: left,\n                    top: topNickName,\n                    width: widthNickName\n                },\n                attributes: {\n                    title: title\n                }\n            });\n\n            const avatar = this.createDOMElement('img', {\n                classname: `${prefixclassname}-avatar`,\n                parent: this.body,\n                styles: {\n                    left: left,\n                    top: topAvatar,\n                    width: widthAvatar,\n                },\n                attributes: {\n                    title: title\n                }\n            });\n\n\n            return {nickname: nickname, avatar: avatar};\n        }\n\n\n        createDivMessageStart(message) {\n            const instance = this;\n\n            if (instance.area !== undefined) {\n                instance.body.removeChild(instance.area);\n                instance.area = undefined;\n            }\n\n            let left = instance.padding;\n            let top = instance.areaTop;\n            let width = window.innerWidth - 2 * instance.padding;\n            let height = window.innerHeight - instance.getCopyrightHeight() - instance.padding - top;\n\n            let height1 = height / 8;\n\n            instance.createDivMessageDo('mmogame-message-start', left, top, width, height, message, height1);\n\n            top += (height1 - instance.divMessage.scrollHeight) / 2;\n            instance.divMessage.style.top = top + \"px\";\n\n            if (instance.divMessageHelp === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"left\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.color = instance.getContrastingColor(instance.colorDefinition);\n                let top = instance.iconSize + 3 * instance.padding + height1;\n                div.style.top = (top + instance.padding) + \"px\";\n                div.style.height = (height - height1) + \"px\";\n                instance.divMessageHelp = div;\n                instance.body.appendChild(instance.divMessageHelp);\n\n                instance.showHelpScreen(div, (width - 2 * instance.padding), (height - height1));\n            }\n        }\n\n        updateButtonsAvatar(num, avatar, nickname) {\n            if (avatar === undefined) {\n                avatar = \"\";\n            }\n            if (nickname === undefined) {\n                nickname = \"\";\n            }\n\n            if (avatar === \"\" && nickname === \"\") {\n                this.buttonsAvatar[num].style.visibility = 'hidden';\n                this.divNicknames[num].style.visibility = 'hidden';\n                return;\n            }\n\n            if (this.nicknames[num] !== nickname || nickname === \"\") {\n                this.nicknames[num] = nickname;\n                let s = nickname;\n\n                if (nickname.length === 0) {\n                    s = avatar;\n                    let pos = s.lastIndexOf(\"/\");\n                    if (pos >= 0) {\n                        s = s.slice(pos + 1);\n                    }\n                    pos = s.lastIndexOf(\".\");\n                    if (pos >= 0) {\n                        s = s.slice(0, pos);\n                    }\n                    const filenameWithExt = avatar.split('/').pop(); // Extract the file name with its extension\n                    s = filenameWithExt.split('.').slice(0, -1).join('.'); // Remove the extension from the file name\n                }\n                s = this.repairNickname(s);\n                if (this.divNicknames[num] !== undefined && this.divNicknames[num].innerHTML !== s) {\n                    this.divNicknames[num].innerHTML = s;\n                    this.divNicknames[num].style.textAlign = \"center\";\n                    this.divNicknames[num].style.color = this.getContrastingColor(this.colorsBackground);\n                    this.autoResizeText(this.divNicknames[num], this.divNicknamesWidth[num], this.divNicknamesHeight[num], true,\n                        0, 0, 1);\n                }\n            }\n\n            if (avatar !== this.buttonsAvatarSrc[num]) {\n                this.updateImageButton(this.buttonsAvatar[num], avatar !== \"\" ? \"assets/avatars/\" + avatar : \"\");\n                this.buttonsAvatarSrc[num] = avatar;\n            }\n\n            this.buttonsAvatar[num].alt = this.divNicknames[num].innerHTML;\n\n            this.buttonsAvatar[num].style.visibility = 'visible';\n            this.divNicknames[num].style.visibility = 'visible';\n        }\n\n        /**\n         * Calls the Moodle Web Service 'mmogametype_quiz_get_attempt' and processes the response.\n         *\n         * @param {Object} extraparams - Additional parameters to override default ones.\n         */\n        callGetAttempt(extraparams = undefined) {\n            require(['core/ajax'], (Ajax) => {\n                let params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    nickname: null,\n                    colorpaletteid: null,\n                    avatarid: null,\n                };\n                if (extraparams !== undefined) {\n                    params = {...params, ...extraparams};\n                }\n                // Calling the service through the Moodle AJAX API\n                let getAttempt = Ajax.call([{\n                    methodname: 'mmogametype_quiz_get_attempt',\n                    args: params,\n                }]);\n\n                // Handling the response\n                getAttempt[0].done((response) => {\n                    if (extraparams !== undefined && extraparams.colorpaletteid !== undefined) {\n                        this.openGame();\n                        this.colors = undefined;\n                    }\n                    this.processGetAttempt(JSON.parse(response));\n                }).fail((error) => {\n                    this.createDivMessage('mmogame-error', error.message);\n                    return error;\n                });\n            });\n        }\n\n        createDivMessageDo(classnames, left, top, width, height, message, heightmessage) {\n            if (this.divMessageBackground === undefined) {\n                let div = this.createDiv(this.body, classnames, left, top, width, height);\n                div.style.background = this.getColorHex(this.colorDefinition);\n                this.divMessageBackground = div;\n            }\n\n            if (this.divMessage === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"center\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.background = this.getColorHex(this.colorDefinition);\n                div.style.color = this.getContrastingColor(this.colorDefinition);\n                this.divMessage = div;\n            }\n            this.divMessage.innerHTML = message;\n            this.body.appendChild(this.divMessage);\n            this.autoResizeText(this.divMessage, width, heightmessage, false, this.minFontSize, this.maxFontSize, 0.5);\n        }\n\n        /**\n         * Displays an error message on the screen.\n         * @param {string} name - The name of the error context.\n         * @param {Error} [error] - The error object to display.\n         */\n        showError(name, error) {\n            const message = error?.message || 'An unknown error occurred.';\n            this.createDivMessage('mmogame-error', message);\n        }\n};\n});"],"names":["define","MmoGame","constructor","super","_defineProperty","this","maxWidth","bottom2","btnSubmit","createImageButton","area","iconSize","style","visibility","addEventListener","undefined","edtCode","user","value","gatePlayGame","edtNickname","paletteid","avatarid","isVertical","window","innerWidth","innerHeight","getMuteFile","kindSound","playAudio","audioElement","networkState","play","createButtonSound","left","top","size","buttonSound","createDOMElement","parent","body","classnames","styles","position","concat","width","height","attributes","src","alt","getStringM","role","onClickSound","button","setOptions","gateOpen","mmogameid","pin","kinduser","url","instance","minFontSize","maxFontSize","gateComputeSizes","areaRect","padding","Math","round","areaTop","getOptions","then","options","kindsound","nickname","includes","isReady","userGUID","length","gateCreateScreen","catch","error","showError","save","uuid4","callGetAttempt","colorpaletteid","message","createArea","gateCreateScreenVertical","gateCreateScreenHorizontal","maxHeight","labels","fontSize","findbest","gateComputeLabelSize","heightCode","heightColors","floor","heightAvatars","gateCreateScreenVerticalDo","gridWidthColors","gridWidthAvatars","gridHeightColors","newHeight","newWidth","rest","bottom","gridHeightAvatars","gateCreateLabelEditVertical","edt","debounce","gateUpdateSubmit","gateCreateScreenPalette","gateSendGetColorsAvatars","gateCreateButtonSubmit","areaHeight","areaWidth","sName","gateCreateScreenHorizontalDo","sizeLabel","gateCreateLabelEditHorizontal","label1","document","createElement","color","getContrastingColor","colorBackground","innerHTML","font","whiteSpace","appendChild","btn","scrollWidth","addEventListenerRefresh","label","elements","getElementsByClassName","parentNode","removeChild","aLabel","i","scrollHeight","labelWidth","title","classnamesLabel","classnamesEdit","createLabel","gateCreateInput","gateShowAvatars","countX","avatarids","avatars","fragment","createDocumentFragment","avatar","count","leftOriginal","w","avatarImagePath","createCenterImageButton","classList","add","id","gateUpdateAvatar","leftColors","topColors","leftAvatars","topAvatars","updateColors","arguments","updateAvatars","countXcolors","countYcolors","countXavatars","countYavatars","require","Ajax","params","colorpalettes","call","methodname","args","done","_ref","colorpaletteids","gateShowColorPalettes","fail","countY","canvasColor","canvasSize","parsedPalettes","map","palette","split","parseInt","iy","ix","canvas","cursor","showColorPalette","gateUpdateColorPalette","borderStyle","Object","assign","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","_instance$edtCode","_instance$edtNickname","_instance$edtNickname2","isCodeValid","Number","hasAvatar","hasPalette","hasNickname","computeSizes","ret","max","leftEdit","div","type","autofocus","Array","from","forEach","element","remove","createDiv","createModal","content","modal","transform","backgroundColor","boxShadow","zIndex","fontWeight","marginBottom","innerText","closeButton","marginTop","display","marginLeft","marginRight","createDivMessage","divMessageHelp","getCopyrightHeight","createDivMessageDo","divMessage","createButtonAvatar","prefixclassname","topNickName","widthNickName","heightNickName","topAvatar","widthAvatar","classname","createDivMessageStart","height1","textAlign","paddingLeft","paddingRight","colorDefinition","showHelpScreen","updateButtonsAvatar","num","buttonsAvatar","divNicknames","nicknames","s","pos","lastIndexOf","slice","pop","join","repairNickname","colorsBackground","autoResizeText","divNicknamesWidth","divNicknamesHeight","buttonsAvatarSrc","updateImageButton","extraparams","_objectSpread","response","openGame","colors","processGetAttempt","JSON","parse","heightmessage","divMessageBackground","background","getColorHex","name"],"mappings":"w6BA6BAA,+BAAO,CAAC,wBAAwB,SAASC,SACrC,OAAO,cAAwBA,QAoB3BC,WAAAA,GACIC,QAAQC,gBAAAC,KAAA,kBAAA,GAAAD,gBAAAC,KAAA,iBAAA,GAAAD,gBAAAC,KAAA,mBAAA,GAAAD,uCAhBM,UAAQA,gBAAAC,KAAA,uBAAA,GAAAD,gBAAAC,KAAA,kBAAA,GAAAD,gBAAAC,KAAA,kBAAA,GAAAD,gBAAAC,KAAA,gBAAA,GAAAD,gBAAAC,KAAA,YAAA,GAAAD,gBAAAC,KAAA,iBAAA,GAAAD,gBAAAC,KAAA,gBAAA,GAAAD,gBAAAC,KAAA,eAAA,GAAAD,gBAAAC,KAAA,mBAAA,GAAAD,gBAgtBDC,KAAA,0BAAA,CAACC,SAAUC,WAChCF,KAAKG,UAAYH,KAAKI,kBAAkBJ,KAAKK,KAAM,uBAC9CJ,SAAWD,KAAKM,UAAY,EAAGJ,QAAS,EAAGF,KAAKM,SACjD,qBAAqB,EAAO,UAChCN,KAAKG,UAAUI,MAAMC,WAAa,SAClCR,KAAKG,UAAUM,iBAAiB,SAAS,UAChBC,IAAjBV,KAAKW,UACLX,KAAKY,KAAOZ,KAAKW,QAAQE,OAE7Bb,KAAKc,cAAa,EAAMd,KAAKe,YAAYF,MAAOb,KAAKgB,UAAWhB,KAAKiB,SAAS,GAChF,IAzsBFjB,KAAKkB,WAAaC,OAAOC,WAAaD,OAAOE,WACjD,CAMAC,WAAAA,GACI,OAA0B,IAAnBtB,KAAKuB,UAAkB,2BAA6B,2BAC/D,CAOAC,SAAAA,CAAUC,cACiB,IAAnBzB,KAAKuB,WAAmBE,cACU,IAA9BA,aAAaC,cACbD,aAAaE,MAGzB,CAEAC,iBAAAA,CAAkBC,KAAMC,IAAKC,MACzB/B,KAAKgC,YAAchC,KAAKiC,iBAAiB,MAAO,CAC5CC,OAAQlC,KAAKmC,KACbC,WAAY,uBACZC,OAAQ,CACJC,SAAU,WACVT,KAAIU,GAAAA,OAAKV,KAAQ,MACjBC,IAAGS,GAAAA,OAAKT,IAAO,MACfU,MAAKD,GAAAA,OAAKR,KAAQ,MAClBU,OAAM,GAAAF,OAAKR,KAAI,OAEnBW,WAAY,CACRC,IAAK3C,KAAKsB,cACVsB,IAAK5C,KAAK6C,WAAW,YACrBC,KAAM,YAGd9C,KAAKgC,YAAYvB,iBAAiB,SAAS,IAAMT,KAAK+C,aAAa/C,KAAKgC,cAC5E,CAMAe,YAAAA,CAAaC,QACThD,KAAKuB,WAAavB,KAAKuB,UAAY,GAAK,EACxCyB,OAAOL,IAAM3C,KAAKsB,cAClBtB,KAAKiD,WAAW,CAAC1B,UAAWvB,KAAKuB,WACrC,CAUA2B,QAAAA,CAASC,UAAWC,IAAKC,SAAUzC,KAAM0C,KACrC,MAAMC,SAAWvD,KAEjB,IAEIA,KAAKsD,IAAMA,IACXtD,KAAKmD,UAAYA,UACjBnD,KAAKoD,IAAMA,IACXpD,KAAKqD,SAAWA,SAChBE,SAAS3C,KAAOA,KAGhBZ,KAAKwD,aAAe,EACpBxD,KAAKyD,aAAe,EAGpBzD,KAAK0D,mBACL1D,KAAK2D,SAAW,CACZ7B,IAAK9B,KAAK4D,QACVpB,MAAOqB,KAAKC,MAAM3C,OAAOC,WAAa,EAAIpB,KAAK4D,SAC/CnB,OAAQoB,KAAKC,MAAM3C,OAAOE,YAAcrB,KAAK+D,QAAU/D,KAAK4D,UAIhE5D,KAAKgE,aACAC,MAAMC,UAEHA,QAAQC,UAAYD,QAAQC,WAAa,EACzCD,QAAQE,SAAWF,QAAQE,UAAY,GACvCF,QAAQjD,SAAWiD,QAAQjD,UAAY,EACvCiD,QAAQlD,UAAYkD,QAAQlD,WAAa,EAGzChB,KAAKuB,UAAY,CAAC,EAAG,GAAG8C,SAASH,QAAQ3C,WAAa2C,QAAQ3C,UAAY,EAE1E,MAAM+C,QAAUJ,QAAQE,UAAYF,QAAQjD,UAAYiD,QAAQlD,UAiBhE,MAfiB,WAAbqC,UAAyBiB,QACzBtE,KAAKc,cAAa,EAAOoD,QAAQE,SAAUF,QAAQlD,UAAWkD,QAAQjD,UAClD,SAAboC,UACPa,QAAQK,SAAWL,QAAQK,UAAY,GAEnCL,QAAQK,SAASC,QAAU,IAAMF,SACjCf,SAAS3C,KAAOsD,QAAQK,SACxBvE,KAAKc,cAAa,EAAOoD,QAAQE,SAAUF,QAAQlD,UAAWkD,QAAQjD,WAEtEjB,KAAKyE,oBAGTzE,KAAKyE,oBAGF,CAAI,IAEdC,OAAOC,QACJ3E,KAAK4E,UAAU,sBAAuBD,MAAM,GAEvD,CAAC,MAAOA,OACL3E,KAAK4E,UAAU,WAAYD,MAC/B,CACJ,CAEA7D,YAAAA,CAAa+D,KAAMT,SAAUpD,UAAWC,UACpC,IAAIsC,SAAWvD,KAMf,GAJ0B,SAAtBuD,SAASF,UAAyC,KAAlBE,SAAS3C,MACzCZ,KAAK8E,SAGJD,KAKD,OAJAtB,SAASa,SAAWA,SACpBb,SAASvC,UAAYA,UACrBuC,SAAStC,SAAWA,cACpBsC,SAASwB,eAAe,CAACX,SAAUA,SAAUY,eAAgBhE,UAAWC,SAAUA,WAItF,IAAIiD,QAAU,CAACE,SAAUA,SAAUnD,SAAUA,SAAUD,UAAWA,WAElEhB,KAAKiD,WAAWiB,SACXD,MAAK,KACFjE,KAAKoE,SAAWA,SAChBpE,KAAKgB,UAAYA,UACjBhB,KAAKiB,SAAWA,SAChBjB,KAAK+E,kBACE,KAEVL,OAAMC,QACH3E,KAAK4E,UAAUD,MAAMM,UACd,IAEnB,CAEAR,gBAAAA,GACIzE,KAAKkF,aAEDlF,KAAKkB,WACLlB,KAAKmF,2BAELnF,KAAKoF,4BAEb,CAEAD,wBAAAA,GACI,MAAM5B,SAAWvD,KAEjB,IAEI+B,KAFAsD,UAAY9B,SAASI,SAASlB,OAAS,EAAIc,SAASK,QAAUL,SAASjD,SACvEL,SAAWsD,SAASI,SAASnB,MAGjC,MAAM8C,OAAS,CAAA,GAAA/C,OACRgB,SAASV,WAAW,WAAU,MACjCU,SAASV,WAAW,WACpBU,SAASV,WAAW,eAGxBU,SAASgC,SAAWhC,SAASiC,SAASjC,SAASC,YAAaD,SAASE,aAAc8B,WAG/E,GAFAxD,KAAOwB,SAASkC,qBAAqBF,SAAUD,QAE3CvD,KAAK,IAAM9B,SACX,OAAO,EAEX,MAAMyF,WAAmC,SAAtBnC,SAASF,UAA6C,WAAtBE,SAASF,SACxDtB,KAAK,GAAKwB,SAASK,QAAU,EAE3B+B,aAA4C,GAA5BN,UAAY,EAAIE,UAAgB,EAEtD,GAAU,IADF1B,KAAK+B,MAAMD,aAAepC,SAASjD,UAEvC,OAAO,EAEX,MAAMuF,cAA4D,GAA3CR,UAAY,EAAIE,SAAWI,cAAoB,EAGtE,OAFuBD,WAAa,EAAI3D,KAAK,GAAK,EAAIwB,SAASK,QAAU+B,aAAeE,cAEhER,WAAa,EAAI,CAAC,IAG9C9B,SAASuC,2BAA2B7F,SAAUoF,UAAWtD,KAC7D,CAEA+D,0BAAAA,CAA2B7F,SAAUoF,UAAWtD,MAC5C,MAAMwB,SAAWvD,KAEjB,IAAI+F,gBAAkB9F,SAAWsD,SAASK,QACtCoC,iBAAmB/F,SAAWsD,SAASK,QACvCqC,iBAAyD,GAArCZ,UAAY,EAAI9B,SAASgC,UAAgB,EAC7DW,UAAYrC,KAAK+B,MAAMK,iBAAmB1C,SAASjD,UAAYiD,SAASjD,SACxE6F,SAAWtC,KAAK+B,MAAMG,gBAAkBxC,SAASjD,UAAYiD,SAASjD,SACtE8F,KAAOH,iBAAmBC,UAC9BD,iBAAmBC,UACnB,IAGIG,OAHAC,kBAAiE,GAA5CjB,UAAY,EAAI9B,SAASgC,SAAWa,MAAY,EAI/C,SAAtB7C,SAASF,UAA6C,WAAtBE,SAASF,UAEzCgD,OAAS9C,SAASgD,4BAA4B,EAAG,EAAGtG,SAAUsD,SAASgC,SACnExD,KAAK,GAAIwB,SAASV,WAAW,WAAa,KAC1C,0BAA2B,qBAAuB,EAAI7C,KAAK4D,QAC/DL,SAAS5C,QAAU4C,SAASiD,IAC5BjD,SAAS5C,QAAQF,iBAAiB,QAAS8C,SAASkD,UAAS,IAAMlD,SAASmD,oBAAoB,OAEhGL,OAAS,EAGbA,OAAS9C,SAASgD,4BAA4B,EAAGF,OAC7CF,SAAW,EAAI5C,SAASK,QAASL,SAASgC,SAAUxD,KAAK,GACzDwB,SAASV,WAAW,WAAa,KACjC,0BAA2B,qBAAuB,EAAIU,SAASK,QACnEL,SAASxC,YAAcwC,SAASiD,IAChCjD,SAASxC,YAAYN,iBAAiB,QAAS8C,SAASkD,UAAS,IAAMlD,SAASmD,oBAAoB,MAEpGnD,SAASoD,wBAAwBN,OAAQN,gBAAiBE,iBACtDD,iBAAkBM,mBAEtBD,QAAUrG,KAAKuF,SAAWhC,SAASK,QAGnCL,SAASqD,yBAAyB,EAAGP,OAAQN,gBAAiBE,iBAC1D,EAAGI,OAASJ,iBAAmB1C,SAASgC,SAAWhC,SAASK,QAASoC,iBACrEM,mBAEJ,MAAMpG,QAAUmG,OAASJ,iBAAmB1C,SAASgC,SAAWhC,SAASK,QAAU0C,kBAEnF/C,SAASsD,uBAAuB5G,SAAUC,QAC9C,CAEAkF,0BAAAA,GACI,MAAM7B,SAAWvD,KAEjB,IAEI+B,KAFAsD,UAAY9B,SAASuD,WAAa,EAAIvD,SAASK,QAAUL,SAASjD,SAClEL,SAAWsD,SAASwD,UAGxB,MAAMC,MAAQzD,SAASV,WAAW,WAAa,KAC/C,IAAIyC,OAAS,CAAC/B,SAASV,WAAW,WAAYmE,MAAOzD,SAASV,WAAW,eAEzEU,SAASgC,SAAWhC,SAASiC,SAASjC,SAASC,YAAaD,SAASE,aAAc8B,WAG/E,GAFAxD,KAAOwB,SAASkC,qBAAqBF,SAAUD,QAE3CvD,KAAK,IAAM9B,SACX,OAAO,EAEX,IAAIyF,WAAmC,SAAtBnC,SAASF,UAA6C,WAAtBE,SAASF,SAAwBtB,KAAK,GAAKwB,SAASK,QAAU,EAE3G+B,aAA4C,GAA5BN,UAAY,EAAIE,UAAgB,EAEpD,GAAU,IADF1B,KAAK+B,MAAMD,aAAepC,SAASjD,UAEvC,OAAO,EAEX,IAAIuF,cAA4D,GAA3CR,UAAY,EAAIE,SAAWI,cAAoB,EAGpE,OAFqBD,WAAa,EAAI3D,KAAK,GAAK,EAAIwB,SAASK,QAAU+B,aAAeE,cAE9DR,WAAa,EAAI,CAAC,IAG9C9B,SAAS0D,6BAA6BhH,SAAUoF,UAAWtD,KAAMiF,MACrE,CAEAC,4BAAAA,CAA6BhH,SAAUoF,UAAWtD,KAAMiF,OACpD,MAAMzD,SAAWvD,KAEX+F,gBAAkB9F,SAAWsD,SAASK,QACtCoC,iBAAmB/F,SAAWsD,SAASK,QAC7C,IAAIqC,iBAAyD,GAArCZ,UAAY,EAAI9B,SAASgC,UAAgB,EACjE,MAAMW,UAAYrC,KAAK+B,MAAMK,iBAAmB1C,SAASjD,UAAYiD,SAASjD,SACxE6F,SAAWtC,KAAK+B,MAAMG,gBAAkBxC,SAASjD,UAAYiD,SAASjD,SAC5E,IAAI8F,KAAOH,iBAAmBC,UAC9BD,iBAAmBC,UACnB,MAAMI,kBAAoBzC,KAAK+B,MAA4C,GAArCP,UAAY,EAAI9B,SAASgC,UAAgB,EAAIa,MAGnF,IAAIC,OACsB,SAAtB9C,SAASF,UAA6C,WAAtBE,SAASF,UACzCgD,OAAS9C,SAASgD,4BAA4B,EAAG,EAAGtG,SAAUsD,SAASgC,SAAUxD,KAAK,GAClFwB,SAASV,WAAW,YAAc,EAAIU,SAASK,QACnDL,SAAS5C,QAAU4C,SAASiD,IAC5BjD,SAAS5C,QAAQF,iBAAiB,QAAS8C,SAASkD,UAAS,IAAMlD,SAASmD,oBAAoB,OAEhGL,OAAS,EAIb,IAAIa,UAAY3D,SAASkC,qBAAqBlC,SAASgC,SAAU,CAACyB,QAClEX,OAASrG,KAAKmH,8BAA8B,EAAGd,OAC3CF,SAAW,EAAI5C,SAASK,QAASL,SAASgC,SAC1C2B,UAAU,GAAI3D,SAASV,WAAW,WAAa,KAC/C,0BAA2B,qBAE/BU,SAASxC,YAAcf,KAAKwG,IAC5BjD,SAASxC,YAAYN,iBAAiB,QAAS8C,SAASkD,UAAS,IAAMlD,SAASmD,oBAAoB,MAEpG,IAAIU,OAASC,SAASC,cAAc,SACpCF,OAAO7G,MAAM+B,SAAW,WACxB8E,OAAO7G,MAAMgH,MAAQhE,SAASiE,oBAAoBjE,SAASkE,iBAC3DL,OAAOM,UAAYnE,SAASV,WAAW,cACvCuE,OAAO7G,MAAMoH,KAAO,cACpBP,OAAO7G,MAAMgF,SAAWhC,SAASgC,SAAW,KAC5C6B,OAAO7G,MAAMiC,MAAQ,MACrB4E,OAAO7G,MAAMqH,WAAa,SAC1BrE,SAASlD,KAAKwH,YAAYT,QAG1B,IAAIU,IAAMvE,SAASnD,kBAAkBmD,SAASlD,KAAM,8BAChD+G,OAAOW,YAAcxE,SAASK,QAASyC,OAAQ9C,SAASjD,SAAUiD,SAASgC,SAC3E,sBAAsB,EAAO,WACjChC,SAASyE,wBAAwBF,IAAKzB,OAAQN,gBAAiBE,iBAC3DD,iBAAkBM,mBAAmB,GAAM,GAE/Cc,OAAO7G,MAAMsB,KAAO,EACpBuF,OAAO7G,MAAMgH,MAAQhE,SAASiE,oBAAoBjE,SAASkE,iBAC3DL,OAAO7G,MAAMuB,IAAMuE,OAAS,KAC5BA,QAAU9C,SAASgC,SAAWhC,SAASK,QAEvC,IAAIqE,MAAQZ,SAASC,cAAc,SACnCW,MAAM1H,MAAM+B,SAAW,WACvB2F,MAAMP,UAAYnE,SAASV,WAAW,cACtCoF,MAAM1H,MAAMoH,KAAO,cACnBM,MAAM1H,MAAMgF,SAAWhC,SAASgC,SAAW,KAC3C0C,MAAM1H,MAAMiC,MAAQ,OACpByF,MAAM1H,MAAMqH,WAAa,SACzBrE,SAASlD,KAAKwH,YAAYI,OAG1BH,IAAMvE,SAASnD,kBAAkBmD,SAASlD,KAAM,sCAC5C4H,MAAMF,YAAcxE,SAASK,QAASyC,OAASJ,iBAAkB1C,SAASjD,SAC1EiD,SAASgC,SAAU,sBAAsB,EAAO,WACpDuC,IAAIrH,iBAAiB,SAAS,KAC1B,IAAIyH,SAAW3E,SAASlD,KAAK8H,uBAAuB,kBAEpD,KAAOD,SAAS,IACZA,SAAS,GAAGE,WAAWC,YAAYH,SAAS,IAGhD3E,SAASqD,yBAAyB,EAAGP,OAAQN,gBAAiBE,iBAAkB,EAC5EI,OAASJ,iBAAmB1C,SAASgC,SAAWhC,SAASK,QAASoC,iBAAkBM,mBACpF,GAAO,EAAK,IAIpB2B,MAAM1H,MAAMsB,KAAO,OACnBoG,MAAM1H,MAAMgH,MAAQhE,SAASiE,oBAAoBjE,SAASkE,iBAC1DQ,MAAM1H,MAAMuB,IAAOuE,OAASJ,iBAAoB,KAGhD1C,SAASqD,yBAAyB,EAAGP,OAAQN,gBAAiBE,iBAC1D,EAAGI,OAASJ,iBAAmB1C,SAASgC,SAAWhC,SAASK,QAASoC,iBACrEM,mBAEJ,IAAIpG,QAAUmG,OAASJ,iBAAmB1C,SAASgC,SAAWhC,SAASK,QAAU0C,kBACjF/C,SAASpD,UAAYoD,SAASnD,kBAAkBmD,SAASlD,KAAM,8BAC1DJ,SAAWsD,SAASjD,UAAY,EAAGJ,QAAS,EAAGqD,SAASjD,SACzD,qBAAqB,EAAO,UAChCiD,SAASpD,UAAUI,MAAMC,WAAa,SACtC+C,SAASpD,UAAUM,iBAAiB,SAAS,UAChBC,IAArB6C,SAAS5C,UACT4C,SAAS3C,KAAO2C,SAAS5C,QAAQE,OAErC0C,SAASzC,cAAa,EAAMd,KAAKe,YAAYF,MAAOb,KAAKgB,UAAWhB,KAAKiB,SAAS,GAE1F,CAEAwE,oBAAAA,CAAqBF,SAAU+C,QAC3B,MAAM/E,SAAWvD,KACjB,IAAIC,SAAW,EACXoF,UAAY,EAEhB,IAAK,IAAIkD,EAAI,EAAGA,EAAID,OAAO9D,OAAQ+D,IAAK,CACpC,MAAMN,MAAQZ,SAASC,cAAc,SACrCW,MAAM1H,MAAM+B,SAAW,WACvB2F,MAAMP,UAAYY,OAAOC,GACzBN,MAAM1H,MAAMqH,WAAa,SACzBK,MAAM1H,MAAMoH,KAAO,cACnBM,MAAM1H,MAAMgF,SAAWA,SAAW,KAClC0C,MAAM1H,MAAMiC,MAAQ,MACpByF,MAAM1H,MAAMkC,OAAS,MACrBc,SAASlD,KAAKwH,YAAYI,OAEtBA,MAAMF,YAAc9H,WACpBA,SAAWgI,MAAMF,aAGjBE,MAAMO,aAAenD,YACrBA,UAAY4C,MAAMO,cAEtBjF,SAASlD,KAAKgI,YAAYJ,MAC9B,CAEA,MAAO,CAAChI,SAAUoF,UACtB,CAEAkB,2BAAAA,CAA4B1E,KAAMC,IAAKU,MAAO+C,SAAUkD,WAAYC,MAAOC,gBAAiBC,gBACxF,MAEMX,MAFWjI,KAEM6I,YAFN7I,KAE2BK,KAAMsI,gBAAiB9G,KAAMC,IAAK2G,WAAYlD,SAAUmD,OAOpG,OANAT,MAAM1H,MAAMgH,MAAQvH,KAAKwH,oBAHRxH,KAGqCyH,iBAEtD3F,KAAOmG,MAAMO,aALIxI,KAORwG,IAPQxG,KAOO8I,gBAAgBF,eAAgB/G,KAAMC,IAAKU,MAAO+C,UAEnEzD,IAAMyD,SATIvF,KASgB4D,OACrC,CAEAmF,eAAAA,CAAgBlH,KAAMC,IAAKU,MAAOC,OAAQuG,OAAQC,UAAWC,SACzD,MAAM3F,SAAWvD,KACjB,IAAKkJ,SAA8B,IAAnBA,QAAQ1E,OACpB,OAGJ,MAAM2E,SAAW9B,SAAS+B,yBAE1B7F,SAAS8F,YAAS3I,EAClB,MAAM4I,MAAQJ,QAAQ1E,OACtB,IAAI+E,aAAe1H,KACf2H,EAAI3F,KAAKC,MAAM9D,KAAK4D,QAAU,GAAK,KACvC,IAAK,IAAI2E,EAAI,EAAGA,EAAIe,MAAOf,IAAK,CAC5B,IAAIkB,gBAAkB,kBAAoBP,QAAQX,GAC9CT,IAAMvE,SAASmG,wBACfP,SACAtH,KAAMC,IACNyB,SAASjD,SAAWiD,SAASK,QAASL,SAASjD,SAAWiD,SAASK,QACnE,iBACA6F,iBAEJ3B,IAAI6B,UAAUC,IAAI,kBAClB,IAAIC,GAAKZ,UAAUV,GACnBT,IAAIrH,iBAAiB,SAAS,KAC1B8C,SAASuG,iBAAiBhC,IAAK+B,GAAIL,EAAE,IAIzC3H,MAAQ0B,SAASjD,UAGZiI,EAAI,GAAKS,QAAW,IACrBlH,KAAOyB,SAASjD,SAChBuB,KAAO0H,aAEf,CACAhG,SAASlD,KAAKwH,YAAYsB,SAC9B,CAEAvC,wBAAAA,CAAyBmD,WAAYC,UAAWjE,gBAAiBE,iBAAkBgE,YAAaC,WACvElE,iBAAkBM,mBAA8D,IAA3C6D,eAAYC,UAAA5F,OAAA,QAAA9D,IAAA0J,UAAA,KAAAA,UAAA,GAASC,gBAAaD,UAAA5F,OAAA,QAAA9D,IAAA0J,UAAA,KAAAA,UAAA,GAC5F,MAAM7G,SAAWvD,KAEjB,IAAIsK,aAAezG,KAAK+B,MAAMG,gBAAkBxC,SAASjD,UACrDiK,aAAe1G,KAAK+B,MAAMK,iBAAmB1C,SAASjD,UAEtDkK,cAAgB3G,KAAK+B,MAAMI,iBAAmBzC,SAASjD,UACvDmK,cAAgB5G,KAAK+B,OAAOU,kBAAoB,EAAI/C,SAASK,SAAWL,SAASjD,UAEhF6J,eACDG,aAAeC,aAAe,GAE7BF,gBACDG,cAAgBC,cAAgB,GAGpCC,QAAQ,CAAC,cAAeC,OAEpB,IAAIC,OAAS,CACTzH,UAAWI,SAASJ,UACpBE,SAAUE,SAASF,SACnBzC,KAAM2C,SAAS3C,KACfsI,QAASsB,cAAgBC,cACzBI,cAAeP,aAAeC,cAIlBI,KAAKG,KAAK,CAAC,CACvBC,WAAY,yBACZC,KAAMJ,UAIA,GAAGK,MAAKC,OAA0D,IAAzDjC,UAACA,UAASC,QAAEA,QAAOiC,gBAAEA,gBAAeN,cAAEA,eAAcK,KAC/Df,cACA5G,SAAS6H,sBAAsBrB,WAAYC,UAAWjE,gBAClDE,iBAAkBqE,aAAcC,aAAcY,gBAAiBN,eAEnER,eACA9G,SAASwF,gBAAgBkB,YAAaC,WAAYlE,iBAAkBM,kBAAmBkE,cACnFvB,UAAWC,QACnB,IACDmC,MAAM1G,OACEA,OACT,GAEV,CAEAyG,qBAAAA,CAAsBvJ,KAAMC,IAAKU,MAAOC,OAAQuG,OAAQsC,OAAQH,gBAAiBN,eAC7E,MAAMtH,SAAWvD,KAEjB,IAAIuI,EAAI,EACR,MAAMe,MAAQuB,cAAcrG,OAC5BxE,KAAKuL,iBAAc7K,EACnB,MAAM8K,WAAajI,SAASjD,SAA8B,EAAnBiD,SAASK,QAAc,EACxD6H,eAAiBZ,cAAca,KAAIC,SACrCA,QAAQC,MAAM,KAAKF,KAAI7K,OAASgL,SAAShL,MAAO,KAAO,MAErDsI,SAAW9B,SAAS+B,yBAC1B,IAAK,IAAI0C,GAAK,EAAGA,GAAKR,OAAQQ,KAC1B,IAAK,IAAIC,GAAK,EAAGA,GAAK/C,OAAQ+C,KAAM,CAEhC,GAAIxD,GAAKe,QAAUmC,eAAelD,KAAO4C,gBAAgB5C,GAAI,CACzDA,IACA,QACJ,CAGA,IAAIyD,OAAS3E,SAASC,cAAc,UACpC0E,OAAOzL,MAAM+B,SAAW,WACxB0J,OAAOzL,MAAMsB,QAAIU,OAAMV,KAAOkK,GAAKxI,SAASjD,SAAY,MACxD0L,OAAOzL,MAAMuB,OAAGS,OAAMT,IAAMgK,GAAKvI,SAASjD,SAAY,MACtD0L,OAAOxJ,MAAQgJ,WACfQ,OAAOvJ,OAAS+I,WAChBQ,OAAOzL,MAAM0L,OAAS,UACtBD,OAAOrC,UAAUC,IAAI,iBAGrBT,SAAStB,YAAYmE,QAGrBzI,SAAS2I,iBAAiBF,OAAQP,eAAelD,IAGjD,IAAIsB,GAAKsB,gBAAgB5C,GACzByD,OAAOvL,iBAAiB,SAAS,KAC7B8C,SAAS4I,uBAAuBH,OAAQnC,GAAG,IAG/CtB,GACJ,CAEJhF,SAASlD,KAAKwH,YAAYsB,SAC9B,CAEAgD,sBAAAA,CAAuBH,OAAQnC,IAC3B,MAAMtG,SAAWvD,UAEYU,IAAzB6C,SAASgI,cACThI,SAASgI,YAAYhL,MAAM6L,YAAc,QAE7CpM,KAAKuL,YAAcS,OACnB,IAAIxC,EAAI3F,KAAKC,MAAMP,SAASK,QAAU,GAAK,KAE3CyI,OAAOC,OAAON,OAAOzL,MAAO,CACxB6L,YAAa,SACbG,gBAAiB/C,EACjBgD,eAAgBhD,EAChBiD,iBAAkBjD,EAClBkD,kBAAmBlD,IAEvBjG,SAASvC,UAAY6I,GAErBtG,SAASmD,kBACb,CAEAoD,gBAAAA,CAAiBT,OAAQQ,GAAIL,GACzB,MAAMjG,SAAWvD,UAEOU,IAApB6C,SAAS8F,SACT9F,SAAS8F,OAAO9I,MAAM6L,YAAc,QAExC7I,SAAS8F,OAASA,OAClBA,OAAO9I,MAAM6L,YAAc,SAE3B/C,OAAO9I,MAAMgM,gBAAkB/C,EAC/BH,OAAO9I,MAAMiM,eAAiBhD,EAC9BH,OAAO9I,MAAMkM,iBAAmBjD,EAChCH,OAAO9I,MAAMmM,kBAAoBlD,EAEjCjG,SAAStC,SAAW4I,GAEpBtG,SAASmD,kBACb,CAKAA,gBAAAA,GAAmB,IAAAiG,kBAAAC,sBAAAC,uBACf,MAEMC,YAA8B,QAAhBH,kBAFH3M,KAEYW,eAAO,IAAAgM,oBAAhBA,kBAAkB9L,OAAQkM,OAF7B/M,KAE6CW,QAAQE,OAAS,EACzEmM,eAAkCtM,IAHvBV,KAGUiB,SACrBgM,gBAAoCvM,IAJzBV,KAIWgB,UACtBkM,aAAkC,QAApBN,sBALH5M,KAKYe,mBAAW,IAAA6L,uBAAOC,QAAPA,uBAApBD,sBAAsB/L,iBAAKgM,4BAAP,EAApBA,uBAA6BrI,QAAS,EALzCxE,KAORG,UAAUI,MAAMC,WACrBsM,aAAeE,WAAaC,YAAcC,YACpC,UACA,QACd,CAEAxJ,gBAAAA,GACqB1D,KAERmN,eAFQnN,KAGRM,SAAWuD,KAAKC,MAAM,GAHd9D,KAG6BM,UAH7BN,KAIR4D,QAAUC,KAAKC,MAAM,GAJb9D,KAI4B4D,QACjD,CAEAuD,6BAAAA,CAA8BtF,KAAMC,IAAKU,MAAO+C,SAAUkD,WAAYC,MAAOC,gBAAiBC,gBAC1F,MAEMX,MAAQjI,KAAK6I,YAFF7I,KAEuBK,KAAMsI,gBAAiB9G,KAAMC,IAAK2G,WAAYlD,SAAUmD,OAChGT,MAAM1H,MAAMgH,MAAQvH,KAAKwH,oBAHRxH,KAGqCyH,iBAEtD,IAAI2F,IAAMtL,IAAM+B,KAAKwJ,IAAIpF,MAAMO,aAAcjD,UAL5BvF,KAKiD4D,QAE9D0J,SAAYzL,KAAO4G,WAAazI,KAAK4D,QAGzC,OAFA5D,KAAKwG,IARYxG,KAQG8I,gBAAgBF,eAAgB0E,SAAUxL,IAAKU,MAAQ8K,SAAWtN,KAAK4D,QAAS2B,UAE7F6H,GACX,CAEAtE,eAAAA,CAAgB1G,WAAYP,KAAMC,IAAKU,MAAO+C,UAC1C,MAEMgI,IAAMlG,SAASC,cAAc,SAcnC,OAbAiG,IAAIhN,MAAM+B,SAAW,WACrBiL,IAAIhN,MAAMiC,MAAQA,MAAQ,KAC1B+K,IAAIhN,MAAMiN,KAAO,OACjBD,IAAIhN,MAAMgF,SAAWA,SAAW,KAEhCgI,IAAIhN,MAAMsB,KAAOA,KAAO,KACxB0L,IAAIhN,MAAMuB,IAAMA,IAAM,KACtByL,IAAIE,WAAY,EAEhBF,IAAI5D,UAAUC,OAAOxH,WAAWwJ,MAAM,QAZrB5L,KAcRK,KAAKwH,YAAY0F,KAEnBA,GACX,CAUA5G,uBAAAA,CAAwBN,OAAQN,gBAAiBE,iBAAkBD,iBAAkBM,mBACjF,MAGM2B,MAHWjI,KAGMiC,iBAAiB,QAAS,CAC7CC,OAJalC,KAIIK,KACjBgC,OAAQ,CACJC,SAAU,WACVqF,KAAM,cACNpC,YAAQhD,OARCvC,KAQauF,SAAY,MAClC/C,MAAO,MACPoF,WAAY,SACZL,MAXSvH,KAWOwH,oBAXPxH,KAWoCyH,iBAC7C3F,IAAGS,GAAAA,OAAK8D,OAAU,MAClBxE,KAAM,OAEVa,WAAY,CACRgF,UAhBS1H,KAgBW6C,WAAW,iBAKjCiF,IArBW9H,KAqBII,kBArBJJ,KAsBJK,KACT,uBACA4H,MAAMF,YAxBO/H,KAwBgB4D,QAASyC,OAxBzBrG,KAyBJM,SAzBIN,KAyBeuF,SAC5B,sBACA,EAAO,WAIXvF,KAAKgI,wBAAwBF,IAAKzB,OAAQN,gBAAiBE,iBACvDD,iBAAkBM,mBAAmB,GAAM,EACnD,CA4BA0B,uBAAAA,CAAwBF,IAAKzB,OAAQN,gBAAiBE,iBAAkBD,iBAAkBM,kBAClE6D,aAAcE,eAClCvC,IAAIrH,iBAAiB,SAAS,KACTiN,MAAMC,KAAK3N,KAAKK,KAAK8H,uBAAuB,kBACpDyF,SAAQC,SAAWA,QAAQC,WAEpC9N,KAAK4G,yBAAyB,EAAGP,OAAQN,gBAAiBE,iBACtD,EAAGI,OAASJ,iBAAmBjG,KAAKuF,SAAWvF,KAAK4D,QAASoC,iBAAkBM,kBAC/E6D,aAAcE,cAAc,GAExC,CAKAnF,UAAAA,GACI,MAAM3B,SAAWvD,KAEbuD,SAASlD,MACTkD,SAASpB,KAAKkG,YAAY9E,SAASlD,MAGvCkD,SAASlD,KAAOL,KAAK+N,UACjBxK,SAASpB,KACT,eACAoB,SAASK,QACTL,SAASQ,QACTR,SAASwD,UACTxD,SAASuD,WAEjB,CASAkH,WAAAA,CAAY5L,WAAYsG,MAAOuF,SAC3B,MAAMC,MAAQlO,KAAKiC,iBAAiB,MAAO,CACvCC,OAAQlC,KAAKmC,KACbC,WAAUG,GAAAA,OAAKH,WAAkB,UACjCC,OAAQ,CACJC,SAAU,QACVR,IAAK,MACLD,KAAM,MACNsM,UAAW,wBACXC,gBAAiB,OACjBC,UAAW,+BACXzK,QAAS,OACT0K,OAAQ,OAIDtO,KAAKiC,iBAAiB,MAAO,CACxCC,OAAQgM,MACR9L,WAAUG,GAAAA,OAAKH,WAAmB,WAClCC,OAAQ,CACJkM,WAAY,OACZC,aAAc,UAGfC,UAAY/F,MAEN1I,KAAKiC,iBAAiB,MAAO,CACtCC,OAAQgM,MACR9L,WAAU,GAAAG,OAAKH,WAAU,WAExBsF,UAAYuG,QAEjB,MAAMS,YAAc1O,KAAKiC,iBAAiB,SAAU,CAChDC,OAAQgM,MACR9L,WAAUG,GAAAA,OAAKH,WAAkB,UACjCC,OAAQ,CACJsM,UAAW,OACXC,QAAS,QACTC,WAAY,OACZC,YAAa,QAEjBpM,WAAY,CAAC8K,KAAM,YAQvB,OANAkB,YAAYD,UAAY,QAExBC,YAAYjO,iBAAiB,SAAS,KAClCT,KAAKmC,KAAKkG,YAAY6F,MAAM,IAGzBA,KACX,CAGAa,gBAAAA,CAAiB3M,WAAY6C,SACzB,MAAM1B,SAAWvD,UAEKU,IAAlB6C,SAASlD,OACTkD,SAASpB,KAAKkG,YAAY9E,SAASlD,MACnCkD,SAASlD,UAAOK,QAGYA,IAA5B6C,SAASyL,iBACTzL,SAASpB,KAAKkG,YAAY9E,SAASyL,gBACnCzL,SAASyL,oBAAiBtO,GAG9B,IAAImB,KAAO0B,SAASK,QAChB9B,IAAMyB,SAASQ,QACfvB,MAAQrB,OAAOC,WAAa,EAAImC,SAASK,QACzCnB,OAAStB,OAAOE,YAAckC,SAAS0L,qBAAuB1L,SAASK,QAAU9B,IAErFyB,SAAS2L,mBAAmB9M,WAAYP,KAAMC,IAAKU,MAAOC,OAAQwC,QAASxC,QAE3Ec,SAAS4L,WAAW5O,MAAMuB,KAAOW,OAASc,SAAS4L,WAAW3G,cAAgB,EAAI,IACtF,CAEA4G,kBAAAA,CAAmBC,gBAAiBxN,KAAMyN,YAAaC,cAAeC,eAAgBC,UAAWC,YAAahH,OA4B1G,MAAO,CAACtE,SA3BSpE,KAAKiC,iBAAiB,MAAO,CAC1C0N,UAASpN,GAAAA,OAAK8M,gBAA0B,aACxCnN,OAAQlC,KAAKmC,KACbE,OAAQ,CACJR,KAAMA,KACNC,IAAKwN,YACL9M,MAAO+M,eAEX7M,WAAY,CACRgG,MAAOA,SAkBaW,OAdbrJ,KAAKiC,iBAAiB,MAAO,CACxC0N,UAASpN,GAAAA,OAAK8M,gBAAwB,WACtCnN,OAAQlC,KAAKmC,KACbE,OAAQ,CACJR,KAAMA,KACNC,IAAK2N,UACLjN,MAAOkN,aAEXhN,WAAY,CACRgG,MAAOA,SAMnB,CAGAkH,qBAAAA,CAAsB3K,SAClB,MAAM1B,SAAWvD,UAEKU,IAAlB6C,SAASlD,OACTkD,SAASpB,KAAKkG,YAAY9E,SAASlD,MACnCkD,SAASlD,UAAOK,GAGpB,IAAImB,KAAO0B,SAASK,QAChB9B,IAAMyB,SAASQ,QACfvB,MAAQrB,OAAOC,WAAa,EAAImC,SAASK,QACzCnB,OAAStB,OAAOE,YAAckC,SAAS0L,qBAAuB1L,SAASK,QAAU9B,IAEjF+N,QAAUpN,OAAS,EAOvB,GALAc,SAAS2L,mBAAmB,wBAAyBrN,KAAMC,IAAKU,MAAOC,OAAQwC,QAAS4K,SAExF/N,MAAQ+N,QAAUtM,SAAS4L,WAAW3G,cAAgB,EACtDjF,SAAS4L,WAAW5O,MAAMuB,IAAMA,IAAM,UAENpB,IAA5B6C,SAASyL,eAA8B,CACvC,IAAIzB,IAAMlG,SAASC,cAAc,OACjCiG,IAAIhN,MAAM+B,SAAW,WACrBiL,IAAIhN,MAAMsB,KAAOA,KAAO,KACxB0L,IAAIhN,MAAMuP,UAAY,OACtBvC,IAAIhN,MAAMiC,MAASA,MAAQ,EAAIxC,KAAK4D,QAAW,KAC/C2J,IAAIhN,MAAMwP,YAAc/P,KAAK4D,QAAU,KACvC2J,IAAIhN,MAAMyP,aAAehQ,KAAK4D,QAAU,KAExC2J,IAAIhN,MAAMgH,MAAQhE,SAASiE,oBAAoBjE,SAAS0M,iBACxD,IAAInO,IAAMyB,SAASjD,SAAW,EAAIiD,SAASK,QAAUiM,QACrDtC,IAAIhN,MAAMuB,IAAOA,IAAMyB,SAASK,QAAW,KAC3C2J,IAAIhN,MAAMkC,OAAUA,OAASoN,QAAW,KACxCtM,SAASyL,eAAiBzB,IAC1BhK,SAASpB,KAAK0F,YAAYtE,SAASyL,gBAEnCzL,SAAS2M,eAAe3C,IAAM/K,MAAQ,EAAIe,SAASK,QAAWnB,OAASoN,QAC3E,CACJ,CAEAM,mBAAAA,CAAoBC,IAAK/G,OAAQjF,UAQ7B,QAPe1D,IAAX2I,SACAA,OAAS,SAEI3I,IAAb0D,WACAA,SAAW,IAGA,KAAXiF,QAA8B,KAAbjF,SAGjB,OAFApE,KAAKqQ,cAAcD,KAAK7P,MAAMC,WAAa,cAC3CR,KAAKsQ,aAAaF,KAAK7P,MAAMC,WAAa,UAI9C,GAAIR,KAAKuQ,UAAUH,OAAShM,UAAyB,KAAbA,SAAiB,CACrDpE,KAAKuQ,UAAUH,KAAOhM,SACtB,IAAIoM,EAAIpM,SAER,GAAwB,IAApBA,SAASI,OAAc,CACvBgM,EAAInH,OACJ,IAAIoH,IAAMD,EAAEE,YAAY,KACpBD,KAAO,IACPD,EAAIA,EAAEG,MAAMF,IAAM,IAEtBA,IAAMD,EAAEE,YAAY,KAChBD,KAAO,IACPD,EAAIA,EAAEG,MAAM,EAAGF,MAGnBD,EADwBnH,OAAOuC,MAAM,KAAKgF,MACtBhF,MAAM,KAAK+E,MAAM,GAAI,GAAGE,KAAK,IACrD,CACAL,EAAIxQ,KAAK8Q,eAAeN,QACO9P,IAA3BV,KAAKsQ,aAAaF,MAAsBpQ,KAAKsQ,aAAaF,KAAK1I,YAAc8I,IAC7ExQ,KAAKsQ,aAAaF,KAAK1I,UAAY8I,EACnCxQ,KAAKsQ,aAAaF,KAAK7P,MAAMuP,UAAY,SACzC9P,KAAKsQ,aAAaF,KAAK7P,MAAMgH,MAAQvH,KAAKwH,oBAAoBxH,KAAK+Q,kBACnE/Q,KAAKgR,eAAehR,KAAKsQ,aAAaF,KAAMpQ,KAAKiR,kBAAkBb,KAAMpQ,KAAKkR,mBAAmBd,MAAM,EACnG,EAAG,EAAG,GAElB,CAEI/G,SAAWrJ,KAAKmR,iBAAiBf,OACjCpQ,KAAKoR,kBAAkBpR,KAAKqQ,cAAcD,KAAiB,KAAX/G,OAAgB,kBAAoBA,OAAS,IAC7FrJ,KAAKmR,iBAAiBf,KAAO/G,QAGjCrJ,KAAKqQ,cAAcD,KAAKxN,IAAM5C,KAAKsQ,aAAaF,KAAK1I,UAErD1H,KAAKqQ,cAAcD,KAAK7P,MAAMC,WAAa,UAC3CR,KAAKsQ,aAAaF,KAAK7P,MAAMC,WAAa,SAC9C,CAOAuE,cAAAA,GAAwC,IAAzBsM,YAAWjH,UAAA5F,OAAA,QAAA9D,IAAA0J,UAAA,GAAAA,UAAA,QAAG1J,EACzBgK,QAAQ,CAAC,cAAeC,OACpB,IAAIC,OAAS,CACTzH,UAAWnD,KAAKmD,UAChBE,SAAUrD,KAAKqD,SACfzC,KAAMZ,KAAKY,KACXwD,SAAU,KACVY,eAAgB,KAChB/D,SAAU,WAEMP,IAAhB2Q,cACAzG,OAAM0G,cAAAA,iBAAO1G,QAAWyG,cAGX1G,KAAKG,KAAK,CAAC,CACxBC,WAAY,+BACZC,KAAMJ,UAIC,GAAGK,MAAMsG,gBACI7Q,IAAhB2Q,kBAA4D3Q,IAA/B2Q,YAAYrM,iBACzChF,KAAKwR,WACLxR,KAAKyR,YAAS/Q,GAElBV,KAAK0R,kBAAkBC,KAAKC,MAAML,UAAU,IAC7ClG,MAAM1G,QACL3E,KAAK+O,iBAAiB,gBAAiBpK,MAAMM,SACtCN,QACT,GAEV,CAEAuK,kBAAAA,CAAmB9M,WAAYP,KAAMC,IAAKU,MAAOC,OAAQwC,QAAS4M,eAC9D,QAAkCnR,IAA9BV,KAAK8R,qBAAoC,CACzC,IAAIvE,IAAMvN,KAAK+N,UAAU/N,KAAKmC,KAAMC,WAAYP,KAAMC,IAAKU,MAAOC,QAClE8K,IAAIhN,MAAMwR,WAAa/R,KAAKgS,YAAYhS,KAAKiQ,iBAC7CjQ,KAAK8R,qBAAuBvE,GAChC,CAEA,QAAwB7M,IAApBV,KAAKmP,WAA0B,CAC/B,IAAI5B,IAAMlG,SAASC,cAAc,OACjCiG,IAAIhN,MAAM+B,SAAW,WACrBiL,IAAIhN,MAAMsB,KAAOA,KAAO,KACxB0L,IAAIhN,MAAMuP,UAAY,SACtBvC,IAAIhN,MAAMiC,MAASA,MAAQ,EAAIxC,KAAK4D,QAAW,KAC/C2J,IAAIhN,MAAMwP,YAAc/P,KAAK4D,QAAU,KACvC2J,IAAIhN,MAAMyP,aAAehQ,KAAK4D,QAAU,KAExC2J,IAAIhN,MAAMwR,WAAa/R,KAAKgS,YAAYhS,KAAKiQ,iBAC7C1C,IAAIhN,MAAMgH,MAAQvH,KAAKwH,oBAAoBxH,KAAKiQ,iBAChDjQ,KAAKmP,WAAa5B,GACtB,CACAvN,KAAKmP,WAAWzH,UAAYzC,QAC5BjF,KAAKmC,KAAK0F,YAAY7H,KAAKmP,YAC3BnP,KAAKgR,eAAehR,KAAKmP,WAAY3M,MAAOqP,eAAe,EAAO7R,KAAKwD,YAAaxD,KAAKyD,YAAa,GAC1G,CAOAmB,SAAAA,CAAUqN,KAAMtN,OACZ,MAAMM,SAAUN,iBAAK,EAALA,MAAOM,UAAW,6BAClCjF,KAAK+O,iBAAiB,gBAAiB9J,QAC3C,EAER"}