{"version":3,"file":"mmogameui.min.js","sources":["../src/mmogameui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mod_mmogame/mmogame'], function(MmoGame) {\n    return class MmoGameUI extends MmoGame {\n\n        isVertical;\n        kindSound; // Type: Number (0 = on, 1 = off, 2 = speak)\n        buttonSound;\n        colorBackground = 0xFFFFFF;\n        colorDefinition;\n        colorScore;\n\n        // Other\n        definition;\n        gate = {};\n\n        constructor() {\n            super();\n            this.isVertical = window.innerWidth < window.innerHeight;\n        }\n\n        /**\n         * Returns the appropriate file for mute/unmute.\n         * @returns {string} The file path.\n         */\n        getMuteFile() {\n            return this.kindSound === 0 ? 'assets/sound-on-flat.png' : 'assets/sound-off-flat.png';\n        }\n\n        /**\n         * Plays a sound file if sound is enabled.\n         *\n         * @param {HTMLAudioElement} audioElement - The audio element to play.\n         */\n        playAudio(audioElement) {\n            if (this.kindSound !== 0 && audioElement) {\n                if (audioElement.networkState === 1) {\n                    audioElement.play();\n                }\n            }\n        }\n\n        createButtonSound(left, top, size) {\n            this.buttonSound = this.createDOMElement('img', {\n                parent,\n                classnames: 'mmogame-button-sound',\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${size}px`,\n                    height: `${size}px`,\n                },\n                attributes: {\n                    src: this.getMuteFile(),\n                    alt: this.getStringM('js_sound'),\n                    role: 'button',\n                },\n            });\n            this.buttonSound.addEventListener(\"click\", () => this.onClickSound(this.buttonSound));\n        }\n\n        /**\n         * Toggles sound on or off when clicked.\n         * @param {HTMLElement} button - The sound toggle button.\n         */\n        onClickSound(button) {\n            this.kindSound = (this.kindSound + 1) % 2;\n            button.src = this.getMuteFile();\n            this.setOptions({kindSound: this.kindSound});\n        }\n\n        /**\n         * Opens the gate UI, computes sizes, and initializes settings based on the user type.\n         * @param {number} mmogameid - The game ID.\n         * @param {string} pin - The game PIN.\n         * @param {string} kinduser - The type of user (e.g., \"moodle\" or \"guid\").\n         * @param {string} user - The user identifier.\n         * @param {string} url - The game URL.\n         */\n        gateOpen(mmogameid, pin, kinduser, user, url) {\n            try {\n                // Initialize class variables\n                this.gate = {\n                    url: url,\n                    mmogameid: mmogameid,\n                    pin: pin,\n                    kinduser: kinduser,\n                    user: user,\n                };\n\n                // Adjust font sizes\n                this.minFontSize *= 2;\n                this.maxFontSize *= 2;\n\n                // Compute sizes and layout\n                this.gateComputeSizes();\n                this.areaRect = {\n                    top: this.padding,\n                    width: Math.round(window.innerWidth - 2 * this.padding),\n                    height: Math.round(window.innerHeight - this.areaTop - this.padding),\n                };\n\n                // Load options and initialize UI\n                this.getOptions()\n                    .then((options) => {\n                        // Set default options if undefined\n                        options.kindsound = options.kindsound || 0;\n                        options.nickname = options.nickname || '';\n                        options.avatarid = options.avatarid || 0;\n                        options.paletteid = options.paletteid || 0;\n\n                        // Assign kindSound within valid range\n                        this.kindSound = [1, 2].includes(options.kindSound) ? options.kindSound : 0;\n\n                        const isReady = options.nickname && options.avatarid && options.paletteid;\n\n                        if (kinduser === 'moodle' && isReady) {\n                            this.gatePlayGame(false, options.nickname, options.paletteid, options.avatarid);\n                        } else if (kinduser === 'guid') {\n                            options.userGUID = options.userGUID || '';\n\n                            if (options.userGUID.length >= 10 && isReady) {\n                                this.user = options.userGUID;\n                                this.gatePlayGame(false, options.nickname, options.paletteid, options.avatarid);\n                            } else {\n                                this.gateCreateScreen();\n                            }\n                        } else {\n                            this.gateCreateScreen();\n                        }\n\n                        return true;\n                    })\n                    .catch((error) => {\n                        this.showError('gateOpen unexpected', error);\n                    });\n            } catch (error) {\n                this.showError('gateOpen', error);\n            }\n        }\n\n        gatePlayGame(save, nickname, paletteid, avatarid) {\n            if (this.gate.kinduser === 'guid') {\n                if (this.gate.user === '') {\n                    this.uuid4();\n                }\n            }\n\n            if (!save) {\n                this.gate.nickname = nickname;\n                this.gate.paletteid = paletteid;\n                this.gate.avatarid = avatarid;\n                this.callGetAttempt({nickname: nickname, colorpaletteid: paletteid, avatarid: avatarid});\n                return;\n            }\n\n            let options = {nickname: nickname, avatarid: avatarid, paletteid: paletteid};\n\n            this.setOptions(options)\n                .then(() => {\n                    this.gate.nickname = nickname;\n                    this.gate.paletteid = paletteid;\n                    this.gate.avatarid = avatarid;\n                    this.callGetAttempt();\n                    return true;\n                })\n                .catch(error => {\n                    this.showError(error.message);\n                    return false;\n                });\n        }\n\n        gateCreateScreen() {\n            this.createArea();\n\n            if (this.isVertical) {\n                this.gateCreateScreenVertical();\n            } else {\n                this.gateCreateScreenHorizontal();\n            }\n        }\n\n        gateCreateScreenVertical() {\n            let maxHeight = this.areaRect.height - 5 * this.padding - this.iconSize;\n            let maxWidth = this.areaRect.width;\n            let size;\n\n            const labels = [\n                `${this.getStringM('js_name')}: `,\n                this.getStringM('js_code'),\n                this.getStringM('js_palette')\n            ];\n\n            this.fontSize = this.findbest(this.minFontSize, this.maxFontSize, (fontSize) => {\n                size = this.gateComputeLabelSize(fontSize, labels);\n\n                if (size[0] >= maxWidth) {\n                    return 1;\n                }\n                const heightCode = this.gate.kinduser !== 'guid' && this.gate.kinduser !== 'moodle' ?\n                    size[1] + this.padding : 0;\n\n                const heightColors = (maxHeight - 4 * fontSize) * 2 / 5;\n                let n = Math.floor(heightColors / this.iconSize);\n                if (n === 0) {\n                    return 1;\n                }\n                const heightAvatars = (maxHeight - 4 * fontSize + heightColors) * 3 / 5;\n                const computedHeight = heightCode + 3 * size[1] + 8 * this.padding + heightColors + heightAvatars;\n\n                return computedHeight < maxHeight ? -1 : 1;\n            });\n\n            this.gateCreateScreenVerticalDo(maxWidth, maxHeight, size);\n        }\n\n        gateCreateScreenVerticalDo(maxWidth, maxHeight, size) {\n            let gridWidthColors = maxWidth - this.padding;\n            let gridWidthAvatars = maxWidth - this.padding;\n            let gridHeightColors = (maxHeight - 4 * this.fontSize) * 2 / 5;\n            let newHeight = Math.floor(gridHeightColors / this.iconSize) * this.iconSize;\n            let newWidth = Math.floor(gridWidthColors / this.iconSize) * this.iconSize;\n            let rest = gridHeightColors - newHeight;\n            gridHeightColors = newHeight;\n            let gridHeightAvatars = (maxHeight - 4 * this.fontSize + rest) * 3 / 5;\n\n            // Creates the \"Code\" field.\n            let bottom;\n            if (this.gate.kinduser !== 'guid' && this.gate.kinduser !== 'moodle') {\n                // A bottom = this.gateCreateCode(0, 0, maxWidth, this.fontSize, size[0]);\n                bottom = this.gateCreateLabelEditVertical(0, 0, maxWidth, this.fontSize,\n                    size[0], this.getStringM('js_code') + \": \",\n                    'mmogame-gate-code-label', 'mmogame-gate-code') + 2 * this.padding;\n                this.edtCode = this.edt;\n                this.edtCode.addEventListener(\"keyup\", this.debounce(() => this.gateUpdateSubmit(), 300));\n            } else {\n                bottom = 0;\n            }\n\n            bottom = this.gateCreateLabelEditVertical(0, bottom,\n                newWidth - 2 * this.padding, this.fontSize, size[0],\n                this.getStringM('js_name') + \": \",\n                'mmogame-gate-name-label', 'mmogame-gate-name') + 2 * this.padding;\n            this.edtNickname = this.edt;\n            this.edtNickname.addEventListener(\"keyup\", this.debounce(() => this.gateUpdateSubmit(), 300));\n\n            this.gateCreateScreenPalette(bottom, gridWidthColors, gridHeightColors,\n                gridWidthAvatars, gridHeightAvatars);\n\n            bottom += this.fontSize + this.padding;\n\n            // Vertical\n            this.gateSendGetColorsAvatars(0, bottom, gridWidthColors, gridHeightColors,\n                0, bottom + gridHeightColors + this.fontSize + this.padding, gridWidthAvatars,\n                gridHeightAvatars);\n\n            let bottom2 = bottom + gridHeightColors + this.fontSize + this.padding + gridHeightAvatars;\n\n            this.gateCreateButtonSubmit(maxWidth, bottom2);\n        }\n\n        gateCreateScreenHorizontal() {\n            let maxHeight = this.areaHeight - 7 * this.padding - this.iconSize;\n            let maxWidth = this.areaWidth;\n            let size;\n\n            const sName = this.getStringM('js_name') + \": \";\n            let labels = [this.getStringM('js_code'), sName, this.getStringM('js_palette')];\n\n            this.fontSize = this.findbest(this.minFontSize, this.maxFontSize, (fontSize) => {\n                size = this.gateComputeLabelSize(fontSize, labels);\n\n                if (size[0] >= maxWidth) {\n                    return 1;\n                }\n                let heightCode = this.kinduser !== 'guid' && this.kinduser !== 'moodle' ? size[1] + this.padding : 0;\n\n                let heightColors = (maxHeight - 4 * fontSize) * 2 / 5;\n                let n = Math.floor(heightColors / this.iconSize);\n                if (n === 0) {\n                    return 1;\n                }\n                let heightAvatars = (maxHeight - 4 * fontSize + heightColors) * 3 / 5;\n                let computedHeight = heightCode + 2 * size[1] + 7 * this.padding + heightColors + heightAvatars;\n\n                return computedHeight < maxHeight ? -1 : 1;\n            });\n\n            this.gateCreateScreenHorizontalDo(maxWidth, maxHeight, size, sName);\n        }\n\n        gateCreateScreenHorizontalDo(maxWidth, maxHeight, size, sName) {\n            const gridWidthColors = maxWidth - this.padding;\n            const gridWidthAvatars = maxWidth - this.padding;\n            let gridHeightColors = (maxHeight - 4 * this.fontSize) * 2 / 5;\n            const newHeight = Math.floor(gridHeightColors / this.iconSize) * this.iconSize;\n            const newWidth = Math.floor(gridWidthColors / this.iconSize) * this.iconSize;\n            let rest = gridHeightColors - newHeight;\n            gridHeightColors = newHeight;\n            const gridHeightAvatars = Math.floor((maxHeight - 4 * this.fontSize) * 3 / 5 + rest);\n\n            // Creates the \"Code\" field.\n            let bottom;\n            if (this.gate.kinduser !== 'guid' && this.gate.kinduser !== 'moodle') {\n                bottom = this.gateCreateLabelEditVertical(0, 0, maxWidth, this.fontSize, size[0],\n                    this.getStringM('js_code')) + 2 * this.padding;\n                this.edtCode = this.edt;\n                this.edtCode.addEventListener(\"keyup\", this.debounce(() => this.gateUpdateSubmit(), 300));\n            } else {\n                bottom = 0;\n            }\n\n            // Creates the \"nickname\" field.\n            let sizeLabel = this.gateComputeLabelSize(this.fontSize, [sName]);\n            bottom = this.gateCreateLabelEditHorizontal(0, bottom,\n                newWidth - 2 * this.padding, this.fontSize,\n                sizeLabel[0], this.getStringM('js_name') + \": \",\n                'mmogame-gate-name-label', 'mmogame-gate-name');\n\n            this.edtNickname = this.edt;\n            this.edtNickname.addEventListener(\"keyup\", this.debounce(() => this.gateUpdateSubmit(), 300));\n\n            let label1 = document.createElement(\"label\");\n            label1.style.position = \"absolute\";\n            label1.style.color = this.getContrastingColor(this.colorBackground);\n            label1.innerHTML = this.getStringM('js_palette');\n            label1.style.font = \"FontAwesome\";\n            label1.style.fontSize = this.fontSize + \"px\";\n            label1.style.width = \"0px\";\n            label1.style.whiteSpace = \"nowrap\";\n            this.area.appendChild(label1);\n\n            // Button refresh color palettes\n            let btn = this.createImageButton(this.area, 'mmogame-button-gate-refresh',\n                label1.scrollWidth + this.padding, bottom, this.iconSize, this.fontSize,\n                'assets/refresh.svg', false, 'refresh');\n            this.addEventListenerRefresh(btn, bottom, gridWidthColors, gridHeightColors,\n                gridWidthAvatars, gridHeightAvatars, true, false);\n\n            label1.style.left = 0;\n            label1.style.color = this.getContrastingColor(this.colorBackground);\n            label1.style.top = bottom + \"px\";\n            bottom += this.fontSize + this.padding;\n\n            let label = document.createElement(\"label\");\n            label.style.position = \"absolute\";\n            label.innerHTML = this.getStringM('js_avatars');\n            label.style.font = \"FontAwesome\";\n            label.style.fontSize = this.fontSize + \"px\";\n            label.style.width = \"0 px\";\n            label.style.whiteSpace = \"nowrap\";\n            this.area.appendChild(label);\n\n            // Button refresh avatars\n            btn = this.createImageButton(this.area, 'mmogame-button-gate-refresh-avatars',\n                label.scrollWidth + this.padding, bottom + gridHeightColors, this.iconSize,\n                this.fontSize, 'assets/refresh.svg', false, 'refresh');\n            btn.addEventListener(\"click\", () => {\n                let elements = this.area.getElementsByClassName(\"mmogame_avatar\");\n\n                while (elements[0]) {\n                    elements[0].parentNode.removeChild(elements[0]);\n                }\n\n                this.gateSendGetColorsAvatars(0, bottom, gridWidthColors, gridHeightColors, 0,\n                    bottom + gridHeightColors + this.fontSize + this.padding, gridWidthAvatars, gridHeightAvatars,\n                    false, true);\n            });\n\n            // Avatar\n            label.style.left = \"0 px\";\n            label.style.color = this.getContrastingColor(this.colorBackground);\n            label.style.top = (bottom + gridHeightColors) + \"px\";\n\n            // Horizontal\n            this.gateSendGetColorsAvatars(0, bottom, gridWidthColors, gridHeightColors,\n                0, bottom + gridHeightColors + this.fontSize + this.padding, gridWidthAvatars,\n                gridHeightAvatars);\n\n            let bottom2 = bottom + gridHeightColors + this.fontSize + this.padding + gridHeightAvatars;\n            this.btnSubmit = this.createImageButton(this.area, 'mmogame-button-gate-submit',\n                (maxWidth - this.iconSize) / 2, bottom2, 0, this.iconSize,\n                'assets/submit.svg', false, 'submit');\n            this.btnSubmit.style.visibility = 'hidden';\n            this.btnSubmit.addEventListener(\"click\", () => {\n                if (this.edtCode !== undefined) {\n                    this.user = this.edtCode.value;\n                }\n                this.gatePlayGame(true, this.gate.edtNickname.value, this.gate.paletteid, this.gate.avatarid);\n                }\n            );\n        }\n\n        gateComputeLabelSize(fontSize, aLabel) {\n            let maxWidth = 0;\n            let maxHeight = 0;\n\n            for (let i = 0; i < aLabel.length; i++) {\n                const label = document.createElement(\"label\");\n                label.style.position = \"absolute\";\n                label.innerHTML = aLabel[i];\n                label.style.whiteSpace = \"nowrap\";\n                label.style.font = \"FontAwesome\";\n                label.style.fontSize = fontSize + \"px\";\n                label.style.width = \"0px\";\n                label.style.height = \"0px\";\n                this.area.appendChild(label);\n\n                if (label.scrollWidth > maxWidth) {\n                    maxWidth = label.scrollWidth;\n                }\n\n                if (label.scrollHeight > maxHeight) {\n                    maxHeight = label.scrollHeight;\n                }\n                this.area.removeChild(label);\n            }\n\n            return [maxWidth, maxHeight];\n        }\n\n        gateCreateLabelEditVertical(left, top, width, fontSize, labelWidth, title, classnamesLabel, classnamesEdit) {\n            const label = this.createLabel(this.area, classnamesLabel, left, top, labelWidth, fontSize, title);\n            label.style.color = this.getContrastingColor(this.colorBackground);\n\n            top += label.scrollHeight;\n\n            this.edt = this.gateCreateInput(classnamesEdit, left, top, width, fontSize);\n\n            return top + fontSize + this.padding;\n        }\n\n        gateShowAvatars(left, top, width, height, countX, avatarids, avatars) {\n            if (!avatars || avatars.length === 0) {\n                return; // Exit early if no avatars exist\n            }\n\n            const fragment = document.createDocumentFragment();\n\n            this.avatar = undefined;\n            const count = avatars.length;\n            let leftOriginal = left;\n            let w = Math.round(this.padding / 2) + \"px\";\n            for (let i = 0; i < count; i++) {\n                let avatarImagePath = 'assets/avatars/' + avatars[i];\n                let btn = this.createCenterImageButton(\n                    fragment,\n                    left, top,\n                    this.iconSize - this.padding, this.iconSize - this.padding,\n                    'mmogame-avatar',\n                    avatarImagePath\n                );\n                btn.classList.add(\"mmogame_avatar\");\n                let id = avatarids[i];\n                btn.addEventListener(\"click\", () => {\n                    this.gateUpdateAvatar(btn, id, w);\n                });\n\n                // Move left position after placing the button\n                left += this.iconSize;\n\n                // Reset left and move to the next row after filling countX buttons\n                if ((i + 1) % countX === 0) {\n                    top += this.iconSize;\n                    left = leftOriginal;\n                }\n            }\n            this.area.appendChild(fragment);\n        }\n\n        gateSendGetColorsAvatars(leftColors, topColors, gridWidthColors, gridHeightColors, leftAvatars, topAvatars,\n                                 gridWidthAvatars, gridHeightAvatars, updateColors = true, updateAvatars = true) {\n\n            let countXcolors = Math.floor(gridWidthColors / this.iconSize);\n            let countYcolors = Math.floor(gridHeightColors / this.iconSize);\n\n            let countXavatars = Math.floor(gridWidthAvatars / this.iconSize);\n            let countYavatars = Math.floor((gridHeightAvatars + 2 * this.padding) / this.iconSize);\n\n            if (!updateColors) {\n                countXcolors = countYcolors = 0;\n            }\n            if (!updateAvatars) {\n                countXavatars = countYavatars = 0;\n            }\n\n            require(['core/ajax'], (Ajax) => {\n                // Defining the parameters to be passed to the service\n                let params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.gate.kinduser,\n                    user: this.gate.user,\n                    avatars: countXavatars * countYavatars,\n                    colorpalettes: countXcolors * countYcolors,\n                };\n\n                // Calling the service through the Moodle AJAX API\n                let getAssets = Ajax.call([{\n                    methodname: 'mod_mmogame_get_assets',\n                    args: params\n                }]);\n\n                // Handling the response\n                getAssets[0].done(({ avatarids, avatars, colorpaletteids, colorpalettes }) => {\n                    if (updateColors) {\n                        this.gateShowColorPalettes(leftColors, topColors, gridWidthColors,\n                            gridHeightColors, countXcolors, countYcolors, colorpaletteids, colorpalettes);\n                    }\n                    if (updateAvatars) {\n                        this.gateShowAvatars(leftAvatars, topAvatars, gridWidthAvatars, gridHeightAvatars, countXavatars,\n                            avatarids, avatars);\n                    }\n                }).fail((error) => {\n                    return error;\n                });\n            });\n        }\n\n        gateShowColorPalettes(left, top, width, height, countX, countY, colorpaletteids, colorpalettes) {\n            let i = 0; // Counter for color palettes\n            const count = colorpalettes.length;\n            this.canvasColor = undefined;\n            const canvasSize = this.iconSize - this.padding * 3 / 2;\n            const parsedPalettes = colorpalettes.map(palette =>\n                palette.split(\",\").map(value => parseInt(value, 10) || 0)\n            );\n            const fragment = document.createDocumentFragment();\n            for (let iy = 0; iy < countY; iy++) {\n                for (let ix = 0; ix < countX; ix++) {\n                    // Check if we exceed available palettes or encounter invalid data\n                    if (i >= count || !parsedPalettes[i] || !colorpaletteids[i]) {\n                        i++; // Increment and continue if invalid\n                        continue;\n                    }\n\n                    // Create a new canvas element\n                    let canvas = document.createElement('canvas');\n                    canvas.style.position = \"absolute\";\n                    canvas.style.left = `${left + ix * this.iconSize}px`;\n                    canvas.style.top = `${top + iy * this.iconSize}px`;\n                    canvas.width = canvasSize;\n                    canvas.height = canvasSize;\n                    canvas.style.cursor = 'pointer';\n                    canvas.classList.add(\"mmogame_color\");\n\n                    // Append canvas to the area\n                    fragment.appendChild(canvas);\n\n                    // Render the color palette on the canvas\n                    this.showColorPalette(canvas, parsedPalettes[i]);\n\n                    // Get the palette ID and attach a click event listener\n                    let id = colorpaletteids[i];\n                    canvas.addEventListener(\"click\", () => {\n                        this.gateUpdateColorPalette(canvas, id);\n                    });\n\n                    i++;\n                }\n            }\n            this.area.appendChild(fragment);\n        }\n\n        gateUpdateColorPalette(canvas, id) {\n            if (this.canvasColor !== undefined) {\n                this.canvasColor.style.borderStyle = \"none\";\n            }\n            this.canvasColor = canvas;\n            let w = Math.round(this.padding / 2) + \"px\";\n\n            Object.assign(canvas.style, {\n                borderStyle: \"outset\",\n                borderLeftWidth: w,\n                borderTopWidth: w,\n                borderRightWidth: w,\n                borderBottomWidth: w,\n            });\n            this.paletteid = id;\n\n            this.gateUpdateSubmit();\n        }\n\n        gateUpdateAvatar(avatar, id, w) {\n            if (this.avatar !== undefined) {\n                this.avatar.style.borderStyle = \"none\";\n            }\n            this.avatar = avatar;\n            avatar.style.borderStyle = \"outset\";\n\n            avatar.style.borderLeftWidth = w;\n            avatar.style.borderTopWidth = w;\n            avatar.style.borderRightWidth = w;\n            avatar.style.borderBottomWidth = w;\n\n            this.avatarid = id;\n\n            this.gateUpdateSubmit();\n        }\n\n        /**\n         * Updates the visibility of the submit button based on form input validation.\n         */\n        gateUpdateSubmit() {\n            const isCodeValid = this.edtCode?.value ? Number(this.edtCode.value) > 0 : true;\n            const hasAvatar = this.avatarid !== undefined;\n            const hasPalette = this.paletteid !== undefined;\n            const hasNickname = this.edtNickname?.value?.length > 0;\n\n            this.btnSubmit.style.visibility =\n                isCodeValid && hasAvatar && hasPalette && hasNickname\n                    ? 'visible'\n                    : 'hidden';\n        }\n\n        gateComputeSizes() {\n            this.computeSizes();\n            this.iconSize = Math.round(0.8 * this.iconSize);\n            this.padding = Math.round(0.8 * this.padding);\n        }\n\n        gateCreateLabelEditHorizontal(left, top, width, fontSize, labelWidth, title, classnamesLabel, classnamesEdit) {\n            const label = this.createLabel(this.area, classnamesLabel, left, top, labelWidth, fontSize, title);\n            label.style.color = this.getContrastingColor(this.colorBackground);\n\n            let ret = top + Math.max(label.scrollHeight, fontSize) + this.padding;\n\n            let leftEdit = (left + labelWidth + this.padding);\n            this.edt = this.gateCreateInput(classnamesEdit, leftEdit, top, width - leftEdit - this.padding, fontSize);\n\n            return ret;\n        }\n\n        gateCreateInput(classnames, left, top, width, fontSize) {\n            const div = document.createElement(\"input\");\n            div.style.position = \"absolute\";\n            div.style.width = width + \"px\";\n            div.style.type = \"text\";\n            div.style.fontSize = fontSize + \"px\";\n\n            div.style.left = left + \"px\";\n            div.style.top = top + \"px\";\n            div.autofocus = true;\n\n            div.classList.add(...classnames.split(/\\s+/));\n\n            this.area.appendChild(div);\n            this.edt = div;\n\n            return div;\n        }\n\n        /**\n         * Creates the screen palette UI with a label and a refresh button.\n         * @param {number} bottom - The vertical position for the elements.\n         * @param {number} gridWidthColors - The width of the color grid in pixels.\n         * @param {number} gridHeightColors - The height of the color grid in pixels.\n         * @param {number} gridWidthAvatars - The width of the avatar grid in pixels.\n         * @param {number} gridHeightAvatars - The height of the avatar grid in pixels.\n         */\n        gateCreateScreenPalette(bottom, gridWidthColors, gridHeightColors, gridWidthAvatars, gridHeightAvatars) {\n            // Create and configure the label\n            const label = this.createDOMElement('label', {\n                parent: this.area,\n                styles: {\n                    position: 'absolute',\n                    font: 'FontAwesome',\n                    fontSize: `${this.fontSize}px`,\n                    width: '0px',\n                    whiteSpace: 'nowrap',\n                    color: this.getContrastingColor(this.colorBackground),\n                    top: `${bottom}px`,\n                    left: '0px',\n                },\n                attributes: {\n                    innerHTML: this.getStringM('js_palette'),\n                },\n            });\n\n            // Create the refresh button\n            const btn = this.createImageButton(\n                this.area,\n                'mmogame-gate-palette',\n                label.scrollWidth + this.padding, bottom,\n                this.iconSize, this.fontSize,\n                'assets/refresh.svg',\n                false, 'refresh'\n            );\n\n            // Add event listener to refresh button\n            this.addEventListenerRefresh(btn, bottom, gridWidthColors, gridHeightColors, gridWidthAvatars, gridHeightAvatars);\n        }\n\n        gateCreateButtonSubmit = (maxWidth, bottom2) => {\n            this.btnSubmit = this.createImageButton(this.area, 'mmogame-gate-submit',\n                (maxWidth - this.iconSize) / 2, bottom2, 0, this.iconSize,\n                'assets/submit.svg', false, 'submit');\n            this.btnSubmit.style.visibility = 'hidden';\n            this.btnSubmit.addEventListener(\"click\", () => {\n                if (this.edtCode !== undefined) {\n                    this.gate.user = this.gate.edtCode.value;\n                }\n                this.gatePlayGame(true, this.edtNickname.value, this.paletteid, this.avatarid);\n            });\n        };\n\n\n        /**\n         * Adds an event listener to refresh colors and avatars.\n         *\n         * @param {HTMLElement} btn - The button to attach the event listener to.\n         * @param {number} bottom - The Y-coordinate offset for grid positioning.\n         * @param {number} gridWidthColors - Width of the color grid.\n         * @param {number} gridHeightColors - Height of the color grid.\n         * @param {number} gridWidthAvatars - Width of the avatar grid.\n         * @param {number} gridHeightAvatars - Height of the avatar grid.\n         * @param {boolean} updateColors - Callback to update colors.\n         * @param {boolean} updateAvatars - Callback to update avatars.\n         */\n        addEventListenerRefresh(btn, bottom, gridWidthColors, gridHeightColors, gridWidthAvatars, gridHeightAvatars,\n                                updateColors, updateAvatars) {\n            btn.addEventListener(\"click\", () => {\n                const elements = Array.from(this.area.getElementsByClassName(\"mmogame_color\"));\n                elements.forEach(element => element.remove());\n\n                this.gateSendGetColorsAvatars(0, bottom, gridWidthColors, gridHeightColors,\n                    0, bottom + gridHeightColors + this.fontSize + this.padding, gridWidthAvatars, gridHeightAvatars,\n                    updateColors, updateAvatars);\n            });\n        }\n\n        /**\n         * Creates the main game area.\n         */\n        createArea() {\n            if (this.area) {\n                this.body.removeChild(this.area);\n            }\n\n            this.area = this.createDiv(\n                this.body,\n                'mmogame-area',\n                this.padding,\n                this.areaTop,\n                this.areaWidth,\n                this.areaHeight\n            );\n        }\n\n        /**\n         * Creates a modal dialog.\n         * @param {string} classnames - The CSS class for the modal.\n         * @param {string} title - The title of the modal.\n         * @param {string} content - The content of the modal.\n         * @returns {HTMLElement} - The modal element.\n         */\n        createModal(classnames, title, content) {\n            const modal = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${classnames} modal`,\n                styles: {\n                    position: 'fixed',\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%, -50%)',\n                    backgroundColor: '#fff',\n                    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\n                    padding: '20px',\n                    zIndex: 1000,\n                },\n            });\n\n            const header = this.createDOMElement('div', {\n                parent: modal,\n                classnames: `${classnames}-header`,\n                styles: {\n                    fontWeight: 'bold',\n                    marginBottom: '10px',\n                },\n            });\n            header.innerText = title;\n\n            const body = this.createDOMElement('div', {\n                parent: modal,\n                classnames: `${classnames}-body`,\n            });\n            body.innerHTML = content;\n\n            const closeButton = this.createDOMElement('button', {\n                parent: modal,\n                classnames: `${classnames}-close`,\n                styles: {\n                    marginTop: '10px',\n                    display: 'block',\n                    marginLeft: 'auto',\n                    marginRight: 'auto',\n                },\n                attributes: {type: 'button'},\n            });\n            closeButton.innerText = 'Close';\n\n            closeButton.addEventListener('click', () => {\n                this.body.removeChild(modal);\n            });\n\n            return modal;\n        }\n\n\n        createDivMessage(classnames, message) {\n            if (this.area !== undefined) {\n                this.body.removeChild(this.area);\n                this.area = undefined;\n            }\n\n            if (this.divMessageHelp !== undefined) {\n                this.body.removeChild(this.divMessageHelp);\n                this.divMessageHelp = undefined;\n            }\n\n            let left = this.padding;\n            let top = this.areaTop;\n            let width = window.innerWidth - 2 * this.padding;\n            let height = window.innerHeight - this.getCopyrightHeight() - this.padding - top;\n\n            this.createDivMessageDo(classnames, left, top, width, height, message, height);\n\n            this.divMessage.style.top = (height - this.divMessage.scrollHeight) / 2 + \"px\";\n        }\n\n\n        createButtonAvatar(prefixclassname, left, topNickName, widthNickName, heightNickName, topAvatar, widthAvatar, title) {\n            const nickname = this.createDOMElement('div', {\n                classname: `${prefixclassname}-nickname`,\n                parent: this.body,\n            }, {\n                left: left,\n                top: topNickName,\n                width: widthNickName\n            }, {\n                title: title\n            });\n\n            const avatar = this.createDOMElement('img', {\n                classname: `${prefixclassname}-avatar`,\n                parent: this.body,\n                styles: {\n                    left: left,\n                    top: topAvatar,\n                    width: widthAvatar,\n                },\n                attributes: {\n                    title: title\n                }\n            });\n\n\n            return {nickname: nickname, avatar: avatar};\n        }\n\n\n        createDivMessageStart(message) {\n            if (this.area !== undefined) {\n                this.body.removeChild(this.area);\n                this.area = undefined;\n            }\n\n            let left = this.padding;\n            let top = this.areaTop;\n            let width = window.innerWidth - 2 * this.padding;\n            let height = window.innerHeight - this.getCopyrightHeight() - this.padding - top;\n\n            let height1 = height / 8;\n\n            this.createDivMessageDo('mmogame-message-start', left, top, width, height, message, height1);\n\n            top += (height1 - this.divMessage.scrollHeight) / 2;\n            this.divMessage.style.top = top + \"px\";\n\n            if (this.divMessageHelp === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"left\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.color = this.getContrastingColor(this.colorDefinition);\n                let top = this.iconSize + 3 * this.padding + height1;\n                div.style.top = (top + this.padding) + \"px\";\n                div.style.height = (height - height1) + \"px\";\n                this.divMessageHelp = div;\n                this.body.appendChild(this.divMessageHelp);\n\n                this.showHelpScreen(div, (width - 2 * this.padding), (height - height1));\n            }\n        }\n\n        updateButtonsAvatar(num, avatar, nickname) {\n            if (avatar === undefined) {\n                avatar = \"\";\n            }\n            if (nickname === undefined) {\n                nickname = \"\";\n            }\n\n            if (avatar === \"\" && nickname === \"\") {\n                this.buttonsAvatar[num].style.visibility = 'hidden';\n                this.divNicknames[num].style.visibility = 'hidden';\n                return;\n            }\n\n            if (this.nicknames[num] !== nickname || nickname === \"\") {\n                this.nicknames[num] = nickname;\n                let s = nickname;\n\n                if (nickname.length === 0) {\n                    s = avatar;\n                    let pos = s.lastIndexOf(\"/\");\n                    if (pos >= 0) {\n                        s = s.slice(pos + 1);\n                    }\n                    pos = s.lastIndexOf(\".\");\n                    if (pos >= 0) {\n                        s = s.slice(0, pos);\n                    }\n                    const filenameWithExt = avatar.split('/').pop(); // Extract the file name with its extension\n                    s = filenameWithExt.split('.').slice(0, -1).join('.'); // Remove the extension from the file name\n                }\n                s = this.repairNickname(s);\n                if (this.divNicknames[num] !== undefined && this.divNicknames[num].innerHTML !== s) {\n                    this.divNicknames[num].innerHTML = s;\n                    this.divNicknames[num].style.textAlign = \"center\";\n                    this.divNicknames[num].style.color = this.getContrastingColor(this.colorsBackground);\n                    this.autoResizeText(this.divNicknames[num], this.divNicknamesWidth[num], this.divNicknamesHeight[num], true,\n                        0, 0, 1);\n                }\n            }\n\n            if (avatar !== this.buttonsAvatarSrc[num]) {\n                this.updateImageButton(this.buttonsAvatar[num], avatar !== \"\" ? \"assets/avatars/\" + avatar : \"\");\n                this.buttonsAvatarSrc[num] = avatar;\n            }\n\n            this.buttonsAvatar[num].alt = this.divNicknames[num].innerHTML;\n\n            this.buttonsAvatar[num].style.visibility = 'visible';\n            this.divNicknames[num].style.visibility = 'visible';\n        }\n\n        /**\n         * Calls the Moodle Web Service 'mmogametype_quiz_get_attempt' and processes the response.\n         *\n         * @param {Object} extraparams - Additional parameters to override default ones.\n         */\n        callGetAttempt(extraparams) {\n            require(['core/ajax'], (Ajax) => {\n                let params = {\n                    mmogameid: this.gate.mmogameid,\n                    kinduser: this.gate.kinduser,\n                    user: this.gate.user,\n                    nickname: null,\n                    colorpaletteid: null,\n                    avatarid: null,\n                };\n                if (extraparams !== undefined) {\n                    params = {...params, ...extraparams};\n                }\n                // Calling the service through the Moodle AJAX API\n                let getAttempt = Ajax.call([{\n                    methodname: 'mmogametype_quiz_get_attempt',\n                    args: params,\n                }]);\n\n                // Handling the response\n                getAttempt[0].done((response) => {\n                    if (extraparams !== undefined && extraparams.colorpaletteid !== undefined) {\n                        this.openGame();\n                        this.colors = undefined;\n                    }\n                    this.processGetAttempt(JSON.parse(response));\n                }).fail((error) => {\n                    this.createDivMessage('mmogame-error', error.message);\n                    return error;\n                });\n            });\n        }\n\n        /**\n         * Displays an error message on the screen.\n         * @param {string} name - The name of the error context.\n         * @param {Error} [error] - The error object to display.\n         */\n        showError(name, error) {\n            const message = error?.message || 'An unknown error occurred.';\n            this.createDivMessage('mmogame-error', message);\n        }\n\n        createDivMessageDo(classnames, left, top, width, height, message, heightmessage) {\n            if (this.divMessageBackground === undefined) {\n                let div = this.createDiv(this.body, classnames, left, top, width, height);\n                div.style.background = this.getColorHex(this.colorDefinition);\n                this.divMessageBackground = div;\n            }\n\n            if (this.divMessage === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"center\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.background = this.getColorHex(this.colorDefinition);\n                div.style.color = this.getContrastingColor(this.colorDefinition);\n                this.divMessage = div;\n            }\n            this.divMessage.innerHTML = message;\n            this.body.appendChild(this.divMessage);\n            this.autoResizeText(this.divMessage, width, heightmessage, false, this.minFontSize, this.maxFontSize, 0.5);\n        }\n};\n});"],"names":["define","MmoGame","constructor","maxWidth","bottom2","btnSubmit","this","createImageButton","area","iconSize","style","visibility","addEventListener","undefined","edtCode","gate","user","value","gatePlayGame","edtNickname","paletteid","avatarid","isVertical","window","innerWidth","innerHeight","getMuteFile","kindSound","playAudio","audioElement","networkState","play","createButtonSound","left","top","size","buttonSound","createDOMElement","parent","classnames","styles","position","width","height","attributes","src","alt","getStringM","role","onClickSound","button","setOptions","gateOpen","mmogameid","pin","kinduser","url","minFontSize","maxFontSize","gateComputeSizes","areaRect","padding","Math","round","areaTop","getOptions","then","options","kindsound","nickname","includes","isReady","userGUID","length","gateCreateScreen","catch","error","showError","save","uuid4","callGetAttempt","colorpaletteid","message","createArea","gateCreateScreenVertical","gateCreateScreenHorizontal","maxHeight","labels","fontSize","findbest","gateComputeLabelSize","heightCode","heightColors","floor","heightAvatars","gateCreateScreenVerticalDo","gridWidthColors","gridWidthAvatars","gridHeightColors","newHeight","newWidth","rest","bottom","gridHeightAvatars","gateCreateLabelEditVertical","edt","debounce","gateUpdateSubmit","gateCreateScreenPalette","gateSendGetColorsAvatars","gateCreateButtonSubmit","areaHeight","areaWidth","sName","gateCreateScreenHorizontalDo","sizeLabel","gateCreateLabelEditHorizontal","label1","document","createElement","color","getContrastingColor","colorBackground","innerHTML","font","whiteSpace","appendChild","btn","scrollWidth","addEventListenerRefresh","label","elements","getElementsByClassName","parentNode","removeChild","aLabel","i","scrollHeight","labelWidth","title","classnamesLabel","classnamesEdit","createLabel","gateCreateInput","gateShowAvatars","countX","avatarids","avatars","fragment","createDocumentFragment","avatar","count","leftOriginal","w","avatarImagePath","createCenterImageButton","classList","add","id","gateUpdateAvatar","leftColors","topColors","leftAvatars","topAvatars","updateColors","updateAvatars","countXcolors","countYcolors","countXavatars","countYavatars","require","Ajax","params","colorpalettes","call","methodname","args","done","_ref","colorpaletteids","gateShowColorPalettes","fail","countY","canvasColor","canvasSize","parsedPalettes","map","palette","split","parseInt","iy","ix","canvas","cursor","showColorPalette","gateUpdateColorPalette","borderStyle","Object","assign","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","isCodeValid","Number","hasAvatar","hasPalette","hasNickname","computeSizes","ret","max","leftEdit","div","type","autofocus","Array","from","forEach","element","remove","body","createDiv","createModal","content","modal","transform","backgroundColor","boxShadow","zIndex","fontWeight","marginBottom","innerText","closeButton","marginTop","display","marginLeft","marginRight","createDivMessage","divMessageHelp","getCopyrightHeight","createDivMessageDo","divMessage","createButtonAvatar","prefixclassname","topNickName","widthNickName","heightNickName","topAvatar","widthAvatar","classname","createDivMessageStart","height1","textAlign","paddingLeft","paddingRight","colorDefinition","showHelpScreen","updateButtonsAvatar","num","buttonsAvatar","divNicknames","nicknames","s","pos","lastIndexOf","slice","pop","join","repairNickname","colorsBackground","autoResizeText","divNicknamesWidth","divNicknamesHeight","buttonsAvatarSrc","updateImageButton","extraparams","response","openGame","colors","processGetAttempt","JSON","parse","name","heightmessage","divMessageBackground","background","getColorHex"],"mappings":"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"}