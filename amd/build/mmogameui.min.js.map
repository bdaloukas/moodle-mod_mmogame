{"version":3,"file":"mmogameui.min.js","sources":["../src/mmogameui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mod_mmogame/mmogame'], function(MmoGame) {\n    return class MmoGameUI extends MmoGame {\n\n        isVertical;\n        kindSound; // Type: Number (0 = on, 1 = off, 2 = speak)\n        buttonSound;\n        colorBackground2;\n\n        // Other\n        nickname;\n        user;\n        paletteid;\n        avatarid;\n\n        // Form fields\n        edtCode;\n        edtNickname;\n\n        constructor() {\n            super();\n            this.isVertical = window.innerWidth < window.innerHeight;\n        }\n\n        /**\n         * Returns the appropriate file for mute/unmute.\n         * @returns {string} The file path.\n         */\n        getMuteFile() {\n            return this.kindSound === 0 ? 'assets/sound-on-flat.png' : 'assets/sound-off-flat.png';\n        }\n\n        /**\n         * Plays a sound file if sound is enabled.\n         *\n         * @param {HTMLAudioElement} audioElement - The audio element to play.\n         */\n        playAudio(audioElement) {\n            if (this.kindSound !== 0 && audioElement) {\n                if (audioElement.networkState === 1) {\n                    audioElement.play();\n                }\n            }\n        }\n\n        createButtonSound(left, top, size) {\n            this.buttonSound = this.createDOMElement('img', {\n                parent: this.body,\n                classnames: 'mmogame-button-sound',\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${size}px`,\n                    height: `${size}px`,\n                },\n                attributes: {\n                    src: this.getMuteFile(),\n                    alt: this.getStringM('js_sound'),\n                    role: 'button',\n                },\n            });\n            this.buttonSound.addEventListener(\"click\", () => this.onClickSound(this.buttonSound));\n        }\n\n        /**\n         * Toggles sound on or off when clicked.\n         * @param {HTMLElement} button - The sound toggle button.\n         */\n        onClickSound(button) {\n            this.kindSound = (this.kindSound + 1) % 2;\n            button.src = this.getMuteFile();\n            this.setOptions({kindSound: this.kindSound});\n        }\n\n        /**\n         * Opens the gate UI, computes sizes, and initializes settings based on the user type.\n         * @param {number} mmogameid - The game ID.\n         * @param {string} pin - The game PIN.\n         * @param {string} kinduser - The type of user (e.g., \"moodle\" or \"guid\").\n         * @param {string} user - The user identifier.\n         * @param {string} url - The game URL.\n         */\n        gateOpen(mmogameid, pin, kinduser, user, url) {\n            const instance = this;\n\n            //try {\n                // Initialize class variables\n                this.url = url;\n                this.mmogameid = mmogameid;\n                this.pin = pin;\n                this.kinduser = kinduser;\n                instance.user = user;\n\n                // Adjust font sizes\n                this.minFontSize *= 2;\n                this.maxFontSize *= 2;\n\n                // Compute sizes and layout\n                this.gateComputeSizes();\n                this.areaRect = {\n                    left: this.padding,\n                    top: this.padding,\n                    width: Math.round(window.innerWidth - 2 * this.padding),\n                    height: Math.round(window.innerHeight - 2 * this.padding),\n                };\n\n                // Load options and initialize UI\n                this.getOptions()\n                    .then((options) => {\n                        // Set default options if undefined\n                        options.kindsound = options.kindsound || 0;\n                        options.nickname = options.nickname || '';\n                        options.avatarid = options.avatarid || 0;\n                        options.paletteid = options.paletteid || 0;\n\n                        // Assign kindSound within valid range\n                        this.kindSound = [1, 2].includes(options.kindSound) ? options.kindSound : 0;\n\n                        const isReady = options.nickname && options.avatarid && options.paletteid;\n\n                        if (kinduser === 'moodle' && isReady) {\n                            this.gatePlayGame(false, options.nickname, options.paletteid, options.avatarid);\n                        } else if (kinduser === 'guid') {\n                            options.userGUID = options.userGUID || '';\n\n                            if (options.userGUID.length >= 10 && isReady) {\n                                instance.user = options.userGUID;\n                                this.gatePlayGame(false, options.nickname, options.paletteid, options.avatarid);\n                            } else {\n                                this.gateCreateScreen();\n                            }\n                        } else {\n                            this.gateCreateScreen();\n                        }\n\n                        return true;\n                    });\n                    //.catch((error) => {\n                    //    this.showError('gateOpen unexpected', error);\n                    //});\n            //};//catch (error) {\n               // this.showError('gateOpen', error);\n            //}\n        }\n\n        gatePlayGame(save, nickname, paletteid, avatarid) {\n            let instance = this;\n\n            if (instance.kinduser === 'guid' && instance.user === '') {\n                this.uuid4();\n            }\n\n            if (!save) {\n                instance.nickname = nickname;\n                instance.paletteid = paletteid;\n                instance.avatarid = avatarid;\n                instance.callGetAttempt({nickname: nickname, colorpaletteid: paletteid, avatarid: avatarid});\n                return;\n            }\n\n            let options = {nickname: nickname, avatarid: avatarid, paletteid: paletteid};\n\n            this.setOptions(options)\n                .then(() => {\n                    this.nickname = nickname;\n                    this.paletteid = paletteid;\n                    this.avatarid = avatarid;\n                    this.callGetAttempt();\n                    return true;\n                });\n                //.catch(error => {\n                //    this.showError(error.message);\n                //    return false;\n                //});\n        }\n\n        gateCreateScreen() {\n            this.createArea();\n\n            let maxHeight = this.areaRect.height - 5 * this.padding - this.iconSize;\n            let maxWidth = this.areaRect.width;\n            let size;\n\n            const labels = [\n                `${this.getStringM('js_name')}: `,\n                this.getStringM('js_code'),\n                this.getStringM('js_palette')\n            ];\n\n            this.fontSize = this.findbest(this.minFontSize, this.maxFontSize, (fontSize) => {\n                size = this.gateComputeLabelSize(fontSize, labels);\n\n                if (size[0] >= maxWidth) {\n                    return 1;\n                }\n\n                const heightColors = (maxHeight - 4 * fontSize) * 2 / 5;\n                let n = Math.floor(heightColors / this.iconSize);\n                if (n === 0) {\n                    return 1;\n                }\n                const heightAvatars = (maxHeight - 4 * fontSize + heightColors) * 3 / 5;\n                const computedHeight = 3 * size[1] + 8 * this.padding + heightColors + heightAvatars;\n\n                return computedHeight < maxHeight ? -1 : 1;\n            });\n\n            this.gateCreateScreenDo(maxWidth, maxHeight);\n        }\n\n        gateCreateScreenDo(maxWidth, maxHeight) {\n            const instance = this;\n\n            let top = this.gateCreateNickName(0, maxWidth) + this.padding;\n            // Creates the \"nickname\" field.\n\n            // Palette\n            const [lblPalette, btnPalette] = instance.gateCreateLabelRefresh(top, instance.getStringM('js_palette'),\n                'mmogame-gate-palette-label', 'mmogame-gate-palette-refresh', 'assets/refresh.svg');\n            top += lblPalette.scrollHeight + instance.padding;\n            const topGridPalette = top;\n            let gridHeightPalette = (maxHeight - topGridPalette - lblPalette.scrollHeight) * 2 / 5;\n            const countX = Math.floor((maxWidth - this.padding) / this.iconSize);\n            const countYpalette = Math.floor(gridHeightPalette / this.iconSize);\n            gridHeightPalette = countYpalette * instance.iconSize;\n            top += gridHeightPalette + this.padding;\n            // Label Avatars\n            const [lblAvatars, btnAvatars] = instance.gateCreateLabelRefresh(top, instance.getStringM('js_avatars'),\n                'mmogame-gate-avatars-label', 'mmogame-gate-avatars-refresh', 'assets/refresh.svg');\n\n            top += lblAvatars.scrollHeight + instance.padding;\n\n            const gridHeightAvatars = Math.floor(maxHeight - top - this.padding);\n            const countYavatars = Math.floor(gridHeightAvatars / this.iconSize);\n\n            instance.addEventListenerRefresh(btnPalette, topGridPalette, countX, countYpalette,\n                top, countX, countYavatars, true, false);\n\n            instance.addEventListenerRefresh(btnAvatars, topGridPalette, countX, countYpalette,\n                top, countX, countYavatars, false, true);\n\n            // Horizontal\n            instance.gateSendGetColorsAvatars(0, topGridPalette, countX, countYpalette,\n                0, top, countX, countYavatars, true, true);\n            top += gridHeightPalette + instance.fontSize + instance.padding + gridHeightAvatars;\n\n            this.gateCreateSubmit(top);\n        }\n\n        gateCreateNickName(top, maxWidth) {\n            const lblNickName = this.createDOMElement('label', {\n                parent: this.area,\n                classnames: 'mmogame-gate-name-label',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: '0',\n                    top: `${top}px`,\n                    width: '0',\n                    color: this.getContrastingColor(this.colorBackground),\n                },\n            });\n            lblNickName.innerHTML = this.getStringM('js_name') + \": \";\n\n            if (this.isVertical) {\n                top += lblNickName.scrollHeight + this.padding;\n            }\n\n            const leftEdit = this.isVertical ? 0 : lblNickName.scrollWidth + this.padding;\n            const width = this.isVertical ? maxWidth : maxWidth - 2 * this.padding;\n            this.edtNickname = this.createDOMElement('input', {\n                parent: this.area,\n                classnames: 'mmogame-gate-name',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${leftEdit}px`,\n                    top: `${top}px`,\n                    width: `${width - leftEdit - this.padding}px`\n                },\n            });\n            this.edtNickname.addEventListener(\"keyup\", this.debounce(() => this.gateUpdateSubmit(), 300));\n            top += this.padding + (this.isVertical ? this.fontSize : Math.max(lblNickName.scrollHeight, this.fontSize));\n\n            return top;\n        }\n\n        gateCreateSubmit(top, maxWidth) {\n           this.btnSubmit = this.createDOMElement('img', {\n                parent: this.area,\n                classnames: 'mmogame-button-gate-submit',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${(maxWidth - this.iconSize) / 2}px`,\n                    top: `${top}px`,\n                    width: `0`,\n                    height: `${this.iconSize}`,\n                    color: this.getContrastingColor(this.colorBackground),\n                    cursor: 'pointer',\n                    visibility: 'hidden',\n                },\n                attributes: {\n                    src: 'assets/submit.svg',\n                }\n            });\n            this.btnSubmit.addEventListener(\"click\", () => {\n                if (this.edtCode !== undefined) {\n                    this.user = this.edtCode.value;\n                }\n                this.gatePlayGame(true, this.edtNickname.value, this.paletteid, this.avatarid);\n            });\n        }\n\n        gateComputeLabelSize(fontSize, aLabel) {\n            const instance = this;\n            let maxWidth = 0;\n            let maxHeight = 0;\n\n            for (let i = 0; i < aLabel.length; i++) {\n                const label = document.createElement(\"label\");\n                label.style.position = \"absolute\";\n                label.innerHTML = aLabel[i];\n                label.style.whiteSpace = \"nowrap\";\n                label.style.font = \"FontAwesome\";\n                label.style.fontSize = fontSize + \"px\";\n                label.style.width = \"0px\";\n                label.style.height = \"0px\";\n                instance.area.appendChild(label);\n\n                if (label.scrollWidth > maxWidth) {\n                    maxWidth = label.scrollWidth;\n                }\n\n                if (label.scrollHeight > maxHeight) {\n                    maxHeight = label.scrollHeight;\n                }\n                instance.area.removeChild(label);\n            }\n\n            return [maxWidth, maxHeight];\n        }\n\n        gateShowAvatars(left, top, countX, countY, avatarids, avatars) {\n            const instance = this;\n            if (!avatars || avatars.length === 0) {\n                return; // Exit early if no avatars exist\n            }\n\n            // Delete all previous avatar icons.\n            const elements = document.querySelectorAll('.mmogame-avatar');\n            elements.forEach(element => element.remove());\n\n            const fragment = document.createDocumentFragment();\n\n            instance.avatar = undefined;\n            const count = avatars.length;\n            let leftOriginal = left;\n            let w = Math.round(this.padding / 2) + \"px\";\n            for (let i = 0; i < count; i++) {\n                let avatarImagePath = 'assets/avatars/' + avatars[i];\n                let btn = instance.createCenterImageButton(\n                    fragment,\n                    left, top,\n                    instance.iconSize - instance.padding, instance.iconSize - instance.padding,\n                    'mmogame-avatar',\n                    avatarImagePath\n                );\n                btn.classList.add(\"mmogame-avatar\");\n                let id = avatarids[i];\n                btn.addEventListener(\"click\", () => {\n                    instance.gateUpdateAvatar(btn, id, w);\n                });\n\n                // Move left position after placing the button\n                left += instance.iconSize;\n\n                // Reset left and move to the next row after filling countX buttons\n                if ((i + 1) % countX === 0) {\n                    top += instance.iconSize;\n                    left = leftOriginal;\n                }\n            }\n            instance.area.appendChild(fragment);\n        }\n\n        gateSendGetColorsAvatars(leftPalette, topPalette, countXpalette, countYpalette,\n                                 leftAvatars, topAvatars, countXavatars, countYavatars,\n                                 updatePalette = true, updateAvatars = true) {\n            const instance = this;\n\n            require(['core/ajax'], (Ajax) => {\n                // Defining the parameters to be passed to the service\n                let params = {\n                    mmogameid: instance.mmogameid,\n                    kinduser: instance.kinduser,\n                    user: instance.user,\n                    avatars: updateAvatars ? countXavatars * countYavatars : 0,\n                    colorpalettes: updatePalette ? countXpalette * countYpalette : 0,\n                };\n                // Calling the service through the Moodle AJAX API\n                let getAssets = Ajax.call([{\n                    methodname: 'mod_mmogame_get_assets',\n                    args: params\n                }]);\n\n                // Handling the response\n                getAssets[0].done(({avatarids, avatars, colorpaletteids, colorpalettes}) => {\n                    if (updatePalette) {\n                        instance.gateShowColorPalettes(leftPalette, topPalette, countXpalette, countYpalette,\n                            colorpaletteids, colorpalettes);\n                    }\n                    if (updateAvatars) {\n                        instance.gateShowAvatars(leftAvatars, topAvatars, countXavatars, countYavatars,\n                            avatarids, avatars);\n                    }\n                }).fail((error) => {\n                    return error;\n                });\n            });\n        }\n\n        gateShowColorPalettes(left, top, countX, countY, colorpaletteids, colorpalettes) {\n            const instance = this;\n            let i = 0; // Counter for color palettes\n            const count = colorpalettes.length;\n            this.canvasColor = undefined;\n            const canvasSize = instance.iconSize - instance.padding * 3 / 2;\n            const parsedPalettes = colorpalettes.map(palette =>\n                palette.split(\",\").map(value => parseInt(value, 10) || 0)\n            );\n            const fragment = document.createDocumentFragment();\n            for (let iy = 0; iy < countY; iy++) {\n                for (let ix = 0; ix < countX; ix++) {\n                    // Check if we exceed available palettes or encounter invalid data\n                    if (i >= count || !parsedPalettes[i] || !colorpaletteids[i]) {\n                        i++; // Increment and continue if invalid\n                        continue;\n                    }\n\n                    // Create a new canvas element\n                    let canvas = document.createElement('canvas');\n                    canvas.style.position = \"absolute\";\n                    canvas.style.left = `${left + ix * instance.iconSize}px`;\n                    canvas.style.top = `${top + iy * instance.iconSize}px`;\n                    canvas.width = canvasSize;\n                    canvas.height = canvasSize;\n                    canvas.style.cursor = 'pointer';\n                    canvas.classList.add(\"mmogame_color\");\n\n                    // Append canvas to the area\n                    fragment.appendChild(canvas);\n\n                    // Render the color palette on the canvas\n                    instance.showColorPalette(canvas, parsedPalettes[i]);\n\n                    // Get the palette ID and attach a click event listener\n                    let id = colorpaletteids[i];\n                    canvas.addEventListener(\"click\", () => {\n                        instance.gateUpdateColorPalette(canvas, id);\n                    });\n\n                    i++;\n                }\n            }\n            instance.area.appendChild(fragment);\n        }\n\n        gateUpdateColorPalette(canvas, id) {\n            const instance = this;\n\n            if (instance.canvasColor !== undefined) {\n                instance.canvasColor.style.borderStyle = \"none\";\n            }\n            this.canvasColor = canvas;\n            let w = Math.round(instance.padding / 2) + \"px\";\n\n            Object.assign(canvas.style, {\n                borderStyle: \"outset\",\n                borderLeftWidth: w,\n                borderTopWidth: w,\n                borderRightWidth: w,\n                borderBottomWidth: w,\n            });\n            instance.paletteid = id;\n\n            instance.gateUpdateSubmit();\n        }\n\n        gateUpdateAvatar(avatar, id, w) {\n            const instance = this;\n\n            if (instance.avatar !== undefined) {\n                instance.avatar.style.borderStyle = \"none\";\n            }\n            instance.avatar = avatar;\n            avatar.style.borderStyle = \"outset\";\n\n            avatar.style.borderLeftWidth = w;\n            avatar.style.borderTopWidth = w;\n            avatar.style.borderRightWidth = w;\n            avatar.style.borderBottomWidth = w;\n\n            instance.avatarid = id;\n\n            instance.gateUpdateSubmit();\n        }\n\n        /**\n         * Updates the visibility of the submit button based on form input validation.\n         */\n        gateUpdateSubmit() {\n            const instance = this;\n\n            const isCodeValid = instance.edtCode?.value ? Number(instance.edtCode.value) > 0 : true;\n            const hasAvatar = instance.avatarid !== undefined;\n            const hasPalette = instance.paletteid !== undefined;\n            const hasNickname = instance.edtNickname?.value?.length > 0;\n\n            instance.btnSubmit.style.visibility =\n                isCodeValid && hasAvatar && hasPalette && hasNickname\n                    ? 'visible'\n                    : 'hidden';\n        }\n\n        gateComputeSizes() {\n            const instance = this;\n\n            instance.computeSizes();\n            instance.iconSize = Math.round(0.8 * instance.iconSize);\n            instance.padding = Math.round(0.8 * instance.padding);\n        }\n\n        /**\n         * Creates the screen palette UI with a label and a refresh button.\n         * @param {number} top - The vertical position for the elements.\n         * @param {string} title\n         * @param {string} classLabel\n         * @param {string} classButton\n         * @param {string} src\n         */\n        gateCreateLabelRefresh(top, title, classLabel, classButton, src) {\n            // Create and configure the label\n            const label = this.createDOMElement('label', {\n                parent: this.area,\n                classnames: classLabel,\n                styles: {\n                    position: 'absolute',\n                    font: 'FontAwesome',\n                    fontSize: `${this.fontSize}px`,\n                    width: '0px',\n                    whiteSpace: 'nowrap',\n                    color: this.getContrastingColor(this.colorBackground),\n                    top: `${top}px`,\n                    left: '0px',\n                },\n            });\n            label.innerHTML = title;\n\n            // Button refresh color palettes\n            let button = this.createDOMElement('img', {\n                parent: this.area,\n                classnames: classButton,\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${label.scrollWidth + this.padding}px`,\n                    top: `${top}px`,\n                    height: `${label.scrollHeight}px`,\n                    color: this.getContrastingColor(this.colorBackground),\n                    cursor: 'pointer',\n                },\n                attributes: {\n                    src: src,\n                }\n            });\n\n            return [label, button];\n        }\n/*\n        gateCreateButtonSubmit = (maxWidth, bottom2) => {\n            this.btnSubmit = this.createImageButton(this.area, 'mmogame-gate-submit',\n                (maxWidth - this.iconSize) / 2, bottom2, 0, this.iconSize,\n                'assets/submit.svg', false, 'submit');\n            this.btnSubmit.style.visibility = 'hidden';\n            this.btnSubmit.addEventListener(\"click\", () => {\n                if (this.edtCode !== undefined) {\n                    this.user = this.edtCode.value;\n                }\n                this.gatePlayGame(true, this.edtNickname.value, this.paletteid, this.avatarid);\n            });\n        };\n*/\n\n        /**\n         * Adds an event listener to refresh colors and avatars.\n         *\n         * @param {HTMLElement} btn - The button to attach the event listener to.\n         * @param {number} topPalette - The Y-coordinate offset for grid positioning.\n         * @param {number} countXpalette - Width of the color grid.\n         * @param {number} countYpalette - Height of the color grid.\n         * @param {number} topAvatars - The Y-coordinate offset for grid positioning.\n         * @param {number} countXavatars - Width of the avatar grid.\n         * @param {number} countYavatars - Height of the avatar grid.\n         * @param {boolean} updateColors - Callback to update colors.\n         * @param {boolean} updateAvatars - Callback to update avatars.\n         */\n        addEventListenerRefresh(btn, topPalette, countXpalette, countYpalette, topAvatars,\n                                countXavatars, countYavatars, updateColors, updateAvatars) {\n            btn.addEventListener(\"click\", () => {\n                const elements = Array.from(this.area.getElementsByClassName(\"mmogame-color\"));\n                elements.forEach(element => element.remove());\n\n                this.gateSendGetColorsAvatars(0, topPalette, countXpalette, countYpalette,\n                    0, topAvatars, countXavatars, countYavatars,\n                    updateColors, updateAvatars);\n            });\n        }\n\n        /**\n         * Creates the main game area.\n         */\n        createArea() {\n            if (this.area) {\n                this.body.removeChild(this.area);\n            }\n\n            this.area = this.createDiv(\n                this.body,\n                'mmogame-area',\n                this.padding,\n                this.areaRect.top,\n                this.areaRect.width,\n                this.areaRect.height\n            );\n        }\n\n        createDivMessage(classnames, message) {\n            const instance = this;\n\n            if (instance.area !== undefined) {\n                instance.body.removeChild(instance.area);\n                instance.area = undefined;\n            }\n\n            if (instance.divMessageHelp !== undefined) {\n                instance.body.removeChild(instance.divMessageHelp);\n                instance.divMessageHelp = undefined;\n            }\n\n            let left = instance.padding;\n            let top = instance.areaRect !== undefined ? instance.areaRect.top : 0;\n            let width = window.innerWidth - 2 * instance.padding;\n            let height = window.innerHeight - instance.getCopyrightHeight() - instance.padding - top;\n\n            instance.createDivMessageDo(classnames, left, top, width, height, message, height);\n\n            instance.divMessage.style.top = (height - instance.divMessage.scrollHeight) / 2 + \"px\";\n        }\n\n        createButtonAvatar(prefixclassname, left, topNickName, widthNickName, heightNickName, topAvatar, widthAvatar, title) {\n            const nickname = this.createDOMElement('div', {\n                classname: `${prefixclassname}-nickname`,\n                parent: this.body,\n                styles: {\n                    left: left,\n                    top: topNickName,\n                    width: widthNickName\n                },\n                attributes: {\n                    title: title\n                }\n            });\n\n            const avatar = this.createDOMElement('img', {\n                classname: `${prefixclassname}-avatar`,\n                parent: this.body,\n                styles: {\n                    left: left,\n                    top: topAvatar,\n                    width: widthAvatar,\n                },\n                attributes: {\n                    title: title\n                }\n            });\n\n\n            return {nickname: nickname, avatar: avatar};\n        }\n\n\n        createDivMessageStart(message) {\n            const instance = this;\n\n            if (instance.area !== undefined) {\n                instance.body.removeChild(instance.area);\n                instance.area = undefined;\n            }\n\n            let left = instance.padding;\n            let top = instance.areaRect.top;\n            let width = window.innerWidth - 2 * instance.padding;\n            let height = window.innerHeight - instance.getCopyrightHeight() - instance.padding - top;\n\n            let height1 = height / 8;\n\n            instance.createDivMessageDo('mmogame-message-start', left, top, width, height, message, height1);\n\n            top += (height1 - instance.divMessage.scrollHeight) / 2;\n            instance.divMessage.style.top = top + \"px\";\n\n            if (instance.divMessageHelp === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"left\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.color = instance.getContrastingColor(this.colorBackground2);\n                let top = instance.iconSize + 3 * instance.padding + height1;\n                div.style.top = (top + instance.padding) + \"px\";\n                div.style.height = (height - height1) + \"px\";\n                instance.divMessageHelp = div;\n                instance.body.appendChild(instance.divMessageHelp);\n\n                instance.showHelpScreen(div, (width - 2 * instance.padding), (height - height1));\n            }\n        }\n\n        updateButtonsAvatar(num, avatar, nickname) {\n            if (avatar === undefined) {\n                avatar = \"\";\n            }\n            if (nickname === undefined) {\n                nickname = \"\";\n            }\n\n            if (avatar === \"\" && nickname === \"\") {\n                this.buttonsAvatar[num].style.visibility = 'hidden';\n                this.divNicknames[num].style.visibility = 'hidden';\n                return;\n            }\n\n            if (this.nicknames[num] !== nickname || nickname === \"\") {\n                this.nicknames[num] = nickname;\n                let s = nickname;\n\n                if (nickname.length === 0) {\n                    s = avatar;\n                    let pos = s.lastIndexOf(\"/\");\n                    if (pos >= 0) {\n                        s = s.slice(pos + 1);\n                    }\n                    pos = s.lastIndexOf(\".\");\n                    if (pos >= 0) {\n                        s = s.slice(0, pos);\n                    }\n                    const filenameWithExt = avatar.split('/').pop(); // Extract the file name with its extension\n                    s = filenameWithExt.split('.').slice(0, -1).join('.'); // Remove the extension from the file name\n                }\n                s = this.repairNickname(s);\n                if (this.divNicknames[num] !== undefined && this.divNicknames[num].innerHTML !== s) {\n                    this.divNicknames[num].innerHTML = s;\n                    this.divNicknames[num].style.textAlign = \"center\";\n                    this.divNicknames[num].style.color = this.getContrastingColor(this.colorsBackground);\n                    this.autoResizeText(this.divNicknames[num], this.divNicknamesWidth[num], this.divNicknamesHeight[num], true,\n                        0, 0, 1);\n                }\n            }\n\n            if (avatar !== this.buttonsAvatarSrc[num]) {\n                this.updateImageButton(this.buttonsAvatar[num], avatar !== \"\" ? \"assets/avatars/\" + avatar : \"\");\n                this.buttonsAvatarSrc[num] = avatar;\n            }\n\n            this.buttonsAvatar[num].alt = this.divNicknames[num].innerHTML;\n\n            this.buttonsAvatar[num].style.visibility = 'visible';\n            this.divNicknames[num].style.visibility = 'visible';\n        }\n\n        /**\n         * Calls the Moodle Web Service 'mmogametype_quiz_get_attempt' and processes the response.\n         *\n         * @param {Object} extraparams - Additional parameters to override default ones.\n         */\n        callGetAttempt(extraparams = undefined) {\n            require(['core/ajax'], (Ajax) => {\n                let params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    nickname: null,\n                    colorpaletteid: null,\n                    avatarid: null,\n                };\n                if (extraparams !== undefined) {\n                    params = {...params, ...extraparams};\n                }\n                // Calling the service through the Moodle AJAX API\n                let getAttempt = Ajax.call([{\n                    methodname: 'mmogametype_quiz_get_attempt',\n                    args: params,\n                }]);\n\n                // Handling the response\n                getAttempt[0].done((response) => {\n                    if (extraparams !== undefined && extraparams.colorpaletteid !== undefined) {\n                        this.openGame();\n                        this.colors = undefined;\n                    }\n                    this.processGetAttempt(JSON.parse(response));\n                }).fail((error) => {\n                    this.createDivMessage('mmogame-error', error.message);\n                    return error;\n                });\n            });\n        }\n\n        createDivMessageDo(classnames, left, top, width, height, message, heightmessage) {\n            if (this.divMessageBackground === undefined) {\n                let div = this.createDiv(this.body, classnames, left, top, width, height);\n                div.style.background = this.getColorHex(this.colorBackground2);\n                this.divMessageBackground = div;\n            }\n\n            if (this.divMessage === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"center\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.background = this.getColorHex(this.colorBackground2);\n                div.style.color = this.getContrastingColor(this.colorBackground2);\n                this.divMessage = div;\n            }\n            this.divMessage.innerHTML = message;\n            this.body.appendChild(this.divMessage);\n            this.autoResizeText(this.divMessage, width, heightmessage, false, this.minFontSize, this.maxFontSize, 0.5);\n        }\n\n        setColors(colors) {\n            super.setColors(colors);\n\n            this.colorBackground2 = colors[1];\n        }\n\n        /**\n         * Displays an error message on the screen.\n         * @param {string} name - The name of the error context.\n         * @param {Error} [error] - The error object to display.\n         */\n        showError(name, error) {\n            const message = error?.message || 'An unknown error occurred.';\n            this.createDivMessage('mmogame-error', message);\n        }\n};\n});"],"names":["define","MmoGame","constructor","super","_defineProperty","this","isVertical","window","innerWidth","innerHeight","getMuteFile","kindSound","playAudio","audioElement","networkState","play","createButtonSound","left","top","size","buttonSound","createDOMElement","parent","body","classnames","styles","position","concat","width","height","attributes","src","alt","getStringM","role","addEventListener","onClickSound","button","setOptions","gateOpen","mmogameid","pin","kinduser","user","url","instance","minFontSize","maxFontSize","gateComputeSizes","areaRect","padding","Math","round","getOptions","then","options","kindsound","nickname","avatarid","paletteid","includes","isReady","gatePlayGame","userGUID","length","gateCreateScreen","save","uuid4","callGetAttempt","colorpaletteid","createArea","maxHeight","iconSize","maxWidth","labels","fontSize","findbest","gateComputeLabelSize","heightColors","floor","heightAvatars","gateCreateScreenDo","gateCreateNickName","lblPalette","btnPalette","gateCreateLabelRefresh","scrollHeight","topGridPalette","gridHeightPalette","countX","countYpalette","lblAvatars","btnAvatars","gridHeightAvatars","countYavatars","addEventListenerRefresh","gateSendGetColorsAvatars","gateCreateSubmit","lblNickName","area","color","getContrastingColor","colorBackground","innerHTML","leftEdit","scrollWidth","edtNickname","debounce","gateUpdateSubmit","max","btnSubmit","cursor","visibility","undefined","edtCode","value","aLabel","i","label","document","createElement","style","whiteSpace","font","appendChild","removeChild","gateShowAvatars","countY","avatarids","avatars","querySelectorAll","forEach","element","remove","fragment","createDocumentFragment","avatar","count","leftOriginal","w","avatarImagePath","btn","createCenterImageButton","classList","add","id","gateUpdateAvatar","leftPalette","topPalette","countXpalette","leftAvatars","topAvatars","countXavatars","updatePalette","arguments","updateAvatars","require","Ajax","params","colorpalettes","call","methodname","args","done","_ref","colorpaletteids","gateShowColorPalettes","fail","error","canvasColor","canvasSize","parsedPalettes","map","palette","split","parseInt","iy","ix","canvas","showColorPalette","gateUpdateColorPalette","borderStyle","Object","assign","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","_instance$edtCode","_instance$edtNickname","_instance$edtNickname2","isCodeValid","Number","hasAvatar","hasPalette","hasNickname","computeSizes","title","classLabel","classButton","updateColors","Array","from","getElementsByClassName","createDiv","createDivMessage","message","divMessageHelp","getCopyrightHeight","createDivMessageDo","divMessage","createButtonAvatar","prefixclassname","topNickName","widthNickName","heightNickName","topAvatar","widthAvatar","classname","createDivMessageStart","height1","div","textAlign","paddingLeft","paddingRight","colorBackground2","showHelpScreen","updateButtonsAvatar","num","buttonsAvatar","divNicknames","nicknames","s","pos","lastIndexOf","slice","pop","join","repairNickname","colorsBackground","autoResizeText","divNicknamesWidth","divNicknamesHeight","buttonsAvatarSrc","updateImageButton","extraparams","_objectSpread","response","openGame","colors","processGetAttempt","JSON","parse","heightmessage","divMessageBackground","background","getColorHex","setColors","showError","name"],"mappings":"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"}