{"version":3,"file":"mmogameui.min.js","sources":["../src/mmogameui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mod_mmogame/mmogame'], function(MmoGame) {\n    return class MmoGameUI extends MmoGame {\n\n        isVertical;\n        kindSound; // Type: Number (0 = on, 1 = off, 2 = speak)\n        buttonSound;\n        colorBackground2;\n\n        // Other\n        nickname;\n        user;\n        paletteid;\n        avatarid;\n        iconSize;\n        padding;\n\n        // Form fields\n        edtNickname;\n\n        // Gate variables\n        mmogameid;\n\n        constructor() {\n            super();\n            this.isVertical = window.innerWidth < window.innerHeight;\n        }\n\n        /**\n         * Returns the appropriate file for mute/unmute.\n         * @returns {string} The file path.\n         */\n        getMuteFile() {\n            return this.kindSound === 0 ? 'assets/sound-on-flat.png' : 'assets/sound-off-flat.png';\n        }\n\n        /**\n         * Plays a sound file if sound is enabled.\n         *\n         * @param {HTMLAudioElement} audioElement - The audio element to play.\n         */\n        playAudio(audioElement) {\n            if (this.kindSound !== 0 && audioElement) {\n                if (audioElement.networkState === 1) {\n                    audioElement.play();\n                }\n            }\n        }\n\n        createButtonSound(left, top) {\n            this.buttonSound = this.createDOMElement('img', {\n                parent: this.body,\n                classnames: 'mmogame-button-sound',\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                },\n                attributes: {\n                    src: this.getMuteFile(),\n                    alt: this.getStringM('js_sound'),\n                    role: 'button',\n                },\n            });\n            this.buttonSound.addEventListener(\"click\", () => this.onClickSound(this.buttonSound));\n        }\n\n        /**\n         * Toggles sound on or off when clicked.\n         * @param {HTMLElement} button - The sound toggle button.\n         */\n        onClickSound(button) {\n            this.kindSound = (this.kindSound + 1) % 2;\n            button.src = this.getMuteFile();\n            this.setOptions({kindSound: this.kindSound});\n        }\n\n        /**\n         * Opens the gate UI, computes sizes, and initializes settings based on the user type.\n         * @param {number} mmogameid - The game ID.\n         * @param {string} pin - The game PIN.\n         * @param {string} kinduser - The type of user (e.g., \"moodle\" or \"guid\").\n         * @param {string} user - The user identifier.\n         * @param {string} url - The game URL.\n         */\n        gateOpen(mmogameid, pin, kinduser, user, url) {\n            const instance = this;\n\n            try {\n                // Initialize class variables\n                this.url = url;\n                this.mmogameid = mmogameid;\n                this.pin = pin;\n                this.kinduser = kinduser;\n                instance.user = user;\n\n                // Adjust font sizes\n                this.minFontSize *= 2;\n                this.maxFontSize *= 2;\n\n                // Compute sizes and layout\n                this.gateComputeSizes();\n                this.areaRect = {\n                    left: this.padding,\n                    top: this.padding,\n                    width: Math.round(window.innerWidth - 2 * this.padding),\n                    height: Math.round(window.innerHeight - 2 * this.padding),\n                };\n\n                // Load options and initialize UI\n                this.getOptions()\n                    .then((options) => {\n                        // Set default options if undefined\n                        options.kindsound = options.kindsound || 0;\n                        options.nickname = options.nickname || '';\n                        options.avatarid = options.avatarid || 0;\n                        options.paletteid = options.paletteid || 0;\n\n                        // Assign kindSound within valid range\n                        this.kindSound = [1, 2].includes(options.kindSound) ? options.kindSound : 0;\n\n                        const isReady = options.nickname && options.avatarid && options.paletteid;\n\n                        if (kinduser === 'moodle' && isReady) {\n                            this.gatePlayGame(false, options.nickname, options.paletteid, options.avatarid);\n                        } else if (kinduser === 'guid') {\n                            options.userGUID = options.userGUID || '';\n\n                            if (options.userGUID.length >= 10 && isReady) {\n                                instance.user = options.userGUID;\n                                this.gatePlayGame(false, options.nickname, options.paletteid, options.avatarid);\n                            } else {\n                                this.gateCreateScreen();\n                            }\n                        } else {\n                            this.gateCreateScreen();\n                        }\n\n                        return true;\n                    })\n                    .catch((error) => {\n                        this.showError('gateOpen unexpected', error);\n                    });\n            } catch (error) {\n               this.showError('gateOpen', error);\n            }\n        }\n\n        gatePlayGame(save, nickname, paletteid, avatarid) {\n            let instance = this;\n\n            if (instance.kinduser === 'guid' && instance.user === '') {\n                this.uuid4();\n            }\n\n            if (!save) {\n                instance.nickname = nickname;\n                instance.paletteid = paletteid;\n                instance.avatarid = avatarid;\n                instance.callGetAttempt({nickname: nickname, colorpaletteid: paletteid, avatarid: avatarid});\n                return;\n            }\n\n            let options = {nickname: nickname, avatarid: avatarid, paletteid: paletteid};\n\n            this.setOptions(options)\n                .then(() => {\n                    return true;\n                })\n                .catch(error => {\n                    this.showError(error.message);\n                    return false;\n                });\n\n            this.nickname = nickname;\n            this.paletteid = paletteid;\n            this.avatarid = avatarid;\n            this.callGetAttempt();\n        }\n\n        gateCreateScreen() {\n            this.createArea();\n\n            let maxHeight = this.areaRect.height - 5 * this.padding - this.iconSize;\n            let maxWidth = this.areaRect.width;\n            let size;\n\n            const labels = [\n                `${this.getStringM('js_name')}: `,\n                this.getStringM('js_code'),\n                this.getStringM('js_palette')\n            ];\n\n            this.fontSize = this.findbest(this.minFontSize, this.maxFontSize, (fontSize) => {\n                size = this.gateComputeLabelSize(fontSize, labels);\n\n                if (size[0] >= maxWidth) {\n                    return 1;\n                }\n\n                const heightColors = (maxHeight - 4 * fontSize) * 2 / 5;\n                let n = Math.floor(heightColors / this.iconSize);\n                if (n === 0) {\n                    return 1;\n                }\n                const heightAvatars = (maxHeight - 4 * fontSize + heightColors) * 3 / 5;\n                const computedHeight = 3 * size[1] + 8 * this.padding + heightColors + heightAvatars;\n\n                return computedHeight < maxHeight ? -1 : 1;\n            });\n\n            this.gateCreateScreenDo(maxWidth, maxHeight);\n        }\n\n        gateCreateScreenDo(maxWidth, maxHeight) {\n            const instance = this;\n\n            let top = this.gateCreateNickName(0, maxWidth) + this.padding;\n            this.edtNickname.focus();\n            // Creates the \"nickname\" field.\n\n            // Palette\n            const [lblPalette, btnPalette] = instance.gateCreateLabelRefresh(top, instance.getStringM('js_palette'),\n                'mmogame-gate-palette-label', 'mmogame-gate-palette-refresh', 'assets/refresh.svg');\n            top += lblPalette.scrollHeight + instance.padding;\n            const topGridPalette = top;\n            let gridHeightPalette = (maxHeight - topGridPalette - lblPalette.scrollHeight) * 2 / 5;\n            const countX = Math.floor((maxWidth - this.padding) / this.iconSize);\n            const countYpalette = Math.floor(gridHeightPalette / this.iconSize);\n            gridHeightPalette = countYpalette * instance.iconSize;\n            top += gridHeightPalette + this.padding;\n            // Label Avatars\n            const [lblAvatars, btnAvatars] = instance.gateCreateLabelRefresh(top, instance.getStringM('js_avatars'),\n                'mmogame-gate-avatars-label', 'mmogame-gate-avatars-refresh', 'assets/refresh.svg');\n\n            top += lblAvatars.scrollHeight + instance.padding;\n\n            const countYavatars = Math.floor(Math.floor(maxHeight - top - this.padding) / this.iconSize);\n            const gridHeightAvatars = countYavatars * this.iconSize;\n\n            instance.addEventListenerRefresh(btnPalette, topGridPalette, countX, countYpalette,\n                top, countX, countYavatars, true, false);\n\n            instance.addEventListenerRefresh(btnAvatars, topGridPalette, countX, countYpalette,\n                top, countX, countYavatars, false, true);\n\n            // Horizontal\n            instance.gateSendGetColorsAvatars(0, topGridPalette, countX, countYpalette,\n                0, top, countX, countYavatars, true, true);\n\n            this.gateCreateSubmit(top + gridHeightAvatars + 2 * this.padding, maxWidth);\n        }\n\n        gateCreateNickName(top, maxWidth) {\n            const lblNickName = this.createDOMElement('label', {\n                parent: this.area,\n                classnames: 'mmogame-gate-name-label',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: '0',\n                    top: `${top}px`,\n                    width: '0',\n                    color: this.getContrastingColor(this.colorBackground),\n                },\n            });\n            lblNickName.innerHTML = this.getStringM('js_name') + \": \";\n\n            if (this.isVertical) {\n                top += lblNickName.scrollHeight + this.padding;\n            }\n\n            const leftEdit = this.isVertical ? 0 : lblNickName.scrollWidth + this.padding;\n            const width = this.isVertical ? maxWidth : maxWidth - 2 * this.padding;\n            this.edtNickname = this.createDOMElement('input', {\n                parent: this.area,\n                classnames: 'mmogame-gate-name',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${leftEdit}px`,\n                    top: `${top}px`,\n                    width: `${width - leftEdit - this.padding}px`\n                },\n            });\n            this.edtNickname.addEventListener(\"keyup\", this.debounce(() => this.gateUpdateSubmit(), 300));\n            top += this.padding + (this.isVertical ? this.fontSize : Math.max(lblNickName.scrollHeight, this.fontSize));\n\n            return top;\n        }\n\n        gateCreateSubmit(top, maxWidth) {\n           this.btnSubmit = this.createDOMElement('img', {\n                parent: this.area,\n                classnames: 'mmogame-button-gate-submit',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${(maxWidth - this.iconSize) / 2}px`,\n                    top: `${top}px`,\n                    height: `${this.iconSize}px`,\n                    color: this.getContrastingColor(this.colorBackground),\n                    cursor: 'pointer',\n                    visibility: 'hidden',\n                },\n                attributes: {\n                    src: 'assets/submit.svg',\n                }\n            });\n            this.btnSubmit.addEventListener(\"click\", () => {\n                this.gatePlayGame(true, this.edtNickname.value, this.paletteid, this.avatarid);\n            });\n        }\n\n        gateComputeLabelSize(fontSize, aLabel) {\n            const instance = this;\n            let maxWidth = 0;\n            let maxHeight = 0;\n\n            for (let i = 0; i < aLabel.length; i++) {\n                const label = document.createElement(\"label\");\n                label.style.position = \"absolute\";\n                label.innerHTML = aLabel[i];\n                label.style.whiteSpace = \"nowrap\";\n                label.style.font = \"FontAwesome\";\n                label.style.fontSize = fontSize + \"px\";\n                label.style.width = \"0px\";\n                label.style.height = \"0px\";\n                instance.area.appendChild(label);\n\n                if (label.scrollWidth > maxWidth) {\n                    maxWidth = label.scrollWidth;\n                }\n\n                if (label.scrollHeight > maxHeight) {\n                    maxHeight = label.scrollHeight;\n                }\n                instance.area.removeChild(label);\n            }\n\n            return [maxWidth, maxHeight];\n        }\n\n        gateShowAvatars(left, top, countX, countY, avatarids, avatars) {\n            const instance = this;\n            if (!avatars || avatars.length === 0) {\n                return; // Exit early if no avatars exist\n            }\n\n            // Delete all previous avatar icons.\n            const elements = document.querySelectorAll('.mmogame-avatar');\n            elements.forEach(element => element.remove());\n\n            const fragment = document.createDocumentFragment();\n\n            instance.avatar = undefined;\n            const count = avatars.length;\n            let leftOriginal = left;\n            let w = Math.round(this.padding / 2) + \"px\";\n            for (let i = 0; i < count; i++) {\n                let avatarImagePath = 'assets/avatars/' + avatars[i];\n                let btn = instance.createCenterImageButton(\n                    fragment,\n                    left, top,\n                    instance.iconSize - instance.padding, instance.iconSize - instance.padding,\n                    'mmogame-avatar',\n                    avatarImagePath\n                );\n                btn.classList.add(\"mmogame-avatar\");\n                let id = avatarids[i];\n                btn.addEventListener(\"click\", () => {\n                    instance.gateUpdateAvatar(btn, id, w);\n                });\n\n                // Move left position after placing the button\n                left += instance.iconSize;\n\n                // Reset left and move to the next row after filling countX buttons\n                if ((i + 1) % countX === 0) {\n                    top += instance.iconSize;\n                    left = leftOriginal;\n                }\n            }\n            instance.area.appendChild(fragment);\n        }\n\n        gateSendGetColorsAvatars(leftPalette, topPalette, countXpalette, countYpalette,\n                                 leftAvatars, topAvatars, countXavatars, countYavatars,\n                                 updatePalette = true, updateAvatars = true) {\n            const instance = this;\n\n            require(['core/ajax'], (Ajax) => {\n                // Defining the parameters to be passed to the service\n                let params = {\n                    mmogameid: instance.mmogameid,\n                    kinduser: instance.kinduser,\n                    user: instance.user,\n                    avatars: updateAvatars ? countXavatars * countYavatars : 0,\n                    colorpalettes: updatePalette ? countXpalette * countYpalette : 0,\n                };\n                // Calling the service through the Moodle AJAX API\n                let getAssets = Ajax.call([{\n                    methodname: 'mod_mmogame_get_assets',\n                    args: params\n                }]);\n\n                // Handling the response\n                getAssets[0].done(({avatarids, avatars, colorpaletteids, colorpalettes}) => {\n                    if (updatePalette) {\n                        instance.gateShowColorPalettes(leftPalette, topPalette, countXpalette, countYpalette,\n                            colorpaletteids, colorpalettes);\n                    }\n                    if (updateAvatars) {\n                        instance.gateShowAvatars(leftAvatars, topAvatars, countXavatars, countYavatars,\n                            avatarids, avatars);\n                    }\n                }).fail((error) => {\n                    return error;\n                });\n            });\n        }\n\n        gateShowColorPalettes(left, top, countX, countY, colorpaletteids, colorpalettes) {\n            const instance = this;\n            let i = 0; // Counter for color palettes\n            const count = colorpalettes.length;\n            this.canvasColor = undefined;\n            const canvasSize = instance.iconSize - instance.padding * 3 / 2;\n            const parsedPalettes = colorpalettes.map(palette =>\n                palette.split(\",\").map(value => parseInt(value, 10) || 0)\n            );\n            const fragment = document.createDocumentFragment();\n            for (let iy = 0; iy < countY; iy++) {\n                for (let ix = 0; ix < countX; ix++) {\n                    // Check if we exceed available palettes or encounter invalid data\n                    if (i >= count || !parsedPalettes[i] || !colorpaletteids[i]) {\n                        i++; // Increment and continue if invalid\n                        continue;\n                    }\n\n                    // Create a new canvas element\n                    let canvas = document.createElement('canvas');\n                    canvas.style.position = \"absolute\";\n                    canvas.style.left = `${left + ix * instance.iconSize}px`;\n                    canvas.style.top = `${top + iy * instance.iconSize}px`;\n                    canvas.width = canvasSize;\n                    canvas.height = canvasSize;\n                    canvas.style.cursor = 'pointer';\n                    canvas.classList.add(\"mmogame_color\");\n\n                    // Append canvas to the area\n                    fragment.appendChild(canvas);\n\n                    // Render the color palette on the canvas\n                    instance.showColorPalette(canvas, parsedPalettes[i]);\n\n                    // Get the palette ID and attach a click event listener\n                    let id = colorpaletteids[i];\n                    canvas.addEventListener(\"click\", () => {\n                        instance.gateUpdateColorPalette(canvas, id);\n                    });\n\n                    i++;\n                }\n            }\n            instance.area.appendChild(fragment);\n        }\n\n        gateUpdateColorPalette(canvas, id) {\n            if (this.canvasColor !== undefined) {\n                this.canvasColor.style.borderStyle = \"none\";\n            }\n            this.canvasColor = canvas;\n            let w = Math.round(this.padding / 2) + \"px\";\n\n            Object.assign(canvas.style, {\n                borderStyle: \"outset\",\n                borderLeftWidth: w,\n                borderTopWidth: w,\n                borderRightWidth: w,\n                borderBottomWidth: w,\n            });\n            this.paletteid = id;\n\n            this.gateUpdateSubmit();\n        }\n\n        gateUpdateAvatar(avatar, id, w) {\n            const instance = this;\n\n            if (instance.avatar !== undefined) {\n                instance.avatar.style.borderStyle = \"none\";\n            }\n            instance.avatar = avatar;\n            avatar.style.borderStyle = \"outset\";\n\n            avatar.style.borderLeftWidth = w;\n            avatar.style.borderTopWidth = w;\n            avatar.style.borderRightWidth = w;\n            avatar.style.borderBottomWidth = w;\n\n            instance.avatarid = id;\n\n            instance.gateUpdateSubmit();\n        }\n\n        /**\n         * Updates the visibility of the submit button based on form input validation.\n         */\n        gateUpdateSubmit() {\n            const hasAvatar = this.avatarid !== undefined;\n            const hasPalette = this.paletteid !== undefined;\n            const hasNickname = this.edtNickname?.value?.length > 0;\n\n            this.btnSubmit.style.visibility = hasAvatar && hasPalette && hasNickname ? 'visible' : 'hidden';\n        }\n\n        gateComputeSizes() {\n            const instance = this;\n\n            instance.computeSizes();\n            instance.iconSize = Math.round(0.8 * instance.iconSize);\n            instance.padding = Math.round(0.8 * instance.padding);\n        }\n\n        /**\n         * Creates the screen palette UI with a label and a refresh button.\n         * @param {number} top - The vertical position for the elements.\n         * @param {string} title\n         * @param {string} classLabel\n         * @param {string} classButton\n         * @param {string} src\n         */\n        gateCreateLabelRefresh(top, title, classLabel, classButton, src) {\n            // Create and configure the label\n            const label = this.createDOMElement('label', {\n                parent: this.area,\n                classnames: classLabel,\n                styles: {\n                    position: 'absolute',\n                    font: 'FontAwesome',\n                    fontSize: `${this.fontSize}px`,\n                    width: '0px',\n                    whiteSpace: 'nowrap',\n                    color: this.getContrastingColor(this.colorBackground),\n                    top: `${top}px`,\n                    left: '0px',\n                },\n            });\n            label.innerHTML = title;\n\n            // Button refresh color palettes\n            let button = this.createDOMElement('img', {\n                parent: this.area,\n                classnames: classButton,\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${label.scrollWidth + this.padding}px`,\n                    top: `${top}px`,\n                    height: `${label.scrollHeight}px`,\n                    color: this.getContrastingColor(this.colorBackground),\n                    cursor: 'pointer',\n                },\n                attributes: {\n                    src: src,\n                }\n            });\n\n            return [label, button];\n        }\n\n        /**\n         * Adds an event listener to refresh colors and avatars.\n         *\n         * @param {HTMLElement} btn - The button to attach the event listener to.\n         * @param {number} topPalette - The Y-coordinate offset for grid positioning.\n         * @param {number} countXpalette - Width of the color grid.\n         * @param {number} countYpalette - Height of the color grid.\n         * @param {number} topAvatars - The Y-coordinate offset for grid positioning.\n         * @param {number} countXavatars - Width of the avatar grid.\n         * @param {number} countYavatars - Height of the avatar grid.\n         * @param {boolean} updateColors - Callback to update colors.\n         * @param {boolean} updateAvatars - Callback to update avatars.\n         */\n        addEventListenerRefresh(btn, topPalette, countXpalette, countYpalette, topAvatars,\n                                countXavatars, countYavatars, updateColors, updateAvatars) {\n            btn.addEventListener(\"click\", () => {\n                const elements = Array.from(this.area.getElementsByClassName(\"mmogame-color\"));\n                elements.forEach(element => element.remove());\n\n                this.gateSendGetColorsAvatars(0, topPalette, countXpalette, countYpalette,\n                    0, topAvatars, countXavatars, countYavatars,\n                    updateColors, updateAvatars);\n            });\n        }\n\n        /**\n         * Creates the main game area.\n         */\n\n        createArea() {\n            if (this.area) {\n                this.body.removeChild(this.area);\n            }\n\n            this.area = this.createDiv(\n                this.body,\n                'mmogame-area',\n                this.padding,\n                this.areaRect.top,\n                this.areaRect.width,\n                this.areaRect.height\n            );\n        }\n\n        createDivMessage(classnames, message) {\n            const instance = this;\n\n            if (instance.area !== undefined) {\n                instance.body.removeChild(instance.area);\n                instance.area = undefined;\n            }\n\n            if (instance.divMessageHelp !== undefined) {\n                instance.body.removeChild(instance.divMessageHelp);\n                instance.divMessageHelp = undefined;\n            }\n\n            let left = instance.padding;\n            let top = instance.areaRect !== undefined ? instance.areaRect.top : 0;\n            let width = window.innerWidth - 2 * instance.padding;\n            let height = window.innerHeight - instance.padding - top;\n\n            instance.createDivMessageDo(classnames, left, top, width, height, message, height);\n\n            instance.divMessage.style.top = (height - instance.divMessage.scrollHeight) / 2 + \"px\";\n        }\n\n        createNicknameAvatar(prefixclassname, left, topNickname, widthNickname, heightNickname, topAvatar, widthAvatar) {\n            const nickname = this.createDOMElement('div', {\n                parent: this.body,\n                classname: `${prefixclassname}-nickname`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${topNickname}px`,\n                    width: `${widthNickname}px`,\n                }\n            });\n\n            let leftAvatar = Math.round(left + this.iconSize / 2);\n            const avatar = this.createDOMElement('img', {\n                classname: `${prefixclassname}-avatar`,\n                parent: this.body,\n                styles: {\n                    position: 'absolute',\n                    left: `${leftAvatar}px`,\n                    top: `${topAvatar}px`,\n                    height: `${widthAvatar}px`,\n                    maxWidth: `${widthAvatar}px`,\n                    transform: 'translateX(-50%)',\n                }\n            });\n\n            return [nickname, avatar];\n        }\n\n\n        createDivMessageStart(message) {\n            const instance = this;\n\n            if (instance.area !== undefined) {\n                instance.body.removeChild(instance.area);\n                instance.area = undefined;\n            }\n\n            let left = instance.padding;\n            let top = instance.areaRect.top;\n            let width = window.innerWidth - 2 * instance.padding;\n            let height = window.innerHeight - instance.padding - top;\n\n            let height1 = height / 8;\n\n            instance.createDivMessageDo('mmogame-message-start', left, top, width, height, message, height1);\n\n            top += (height1 - instance.divMessage.scrollHeight) / 2;\n            instance.divMessage.style.top = top + \"px\";\n\n            if (instance.divMessageHelp === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"left\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.color = instance.getContrastingColor(this.colorBackground2);\n                let top = instance.iconSize + 3 * instance.padding + height1;\n                div.style.top = (top + instance.padding) + \"px\";\n                div.style.height = (height - height1) + \"px\";\n                instance.divMessageHelp = div;\n                instance.body.appendChild(instance.divMessageHelp);\n\n                instance.showHelpScreen(div, (width - 2 * instance.padding), (height - height1));\n            }\n        }\n\n        /**\n         * Calls the Moodle Web Service 'mmogametype_quiz_get_attempt' and processes the response.\n         *\n         * @param {Object} extraparams - Additional parameters to override default ones.\n         */\n        callGetAttempt(extraparams = undefined) {\n            require(['core/ajax'], (Ajax) => {\n                let params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    nickname: null,\n                    colorpaletteid: null,\n                    avatarid: null,\n                };\n                if (extraparams !== undefined) {\n                    params = {...params, ...extraparams};\n                }\n                // Calling the service through the Moodle AJAX API\n                let getAttempt = Ajax.call([{\n                    methodname: 'mmogametype_quiz_get_attempt',\n                    args: params,\n                }]);\n\n                // Handling the response\n                getAttempt[0].done((response) => {\n                    if (extraparams !== undefined && extraparams.colorpaletteid !== undefined) {\n                        this.openGame();\n                        this.colors = undefined;\n                    }\n                    this.processGetAttempt(JSON.parse(response));\n                }).fail((error) => {\n                    this.createDivMessage('mmogame-error', error.message);\n                    return error;\n                });\n            });\n        }\n\n        createDivMessageDo(classnames, left, top, width, height, message, heightmessage) {\n            if (this.divMessageBackground === undefined) {\n                let div = this.createDiv(this.body, classnames, left, top, width, height);\n                div.style.background = this.getColorHex(this.colorBackground2);\n                this.divMessageBackground = div;\n            }\n\n            if (this.divMessage === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"center\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.background = this.getColorHex(this.colorBackground2);\n                div.style.color = this.getContrastingColor(this.colorBackground2);\n                this.divMessage = div;\n            }\n            this.divMessage.innerHTML = message;\n            this.body.appendChild(this.divMessage);\n            this.autoResizeText(this.divMessage, width, heightmessage, false, this.minFontSize, this.maxFontSize, 0.5);\n        }\n\n        setColors(colors) {\n            super.setColors(colors);\n\n            this.colorBackground2 = colors[1];\n        }\n\n        /**\n         * Displays an error message on the screen.\n         * @param {string} name - The name of the error context.\n         * @param {Error} [error] - The error object to display.\n         */\n        showError(name, error) {\n            const message = error?.message || 'An unknown error occurred.';\n            this.createDivMessage('mmogame-error', message);\n        }\n\n        createButtonHelp(left, top) {\n            this.buttonSound = this.createDOMElement('img', {\n                parent: this.body,\n                classnames: 'mmogame-button-sound',\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                },\n                attributes: {\n                    src: this.getMuteFile(),\n                    alt: this.getStringM('js_help'),\n                    role: 'button',\n                },\n            });\n            this.buttonHelp.addEventListener(\"click\", () => this.onClickHelp());\n        }\n\n        onClickHelp() {\n            this.createDivMessageStart('test');\n        }\n    };\n});"],"names":["define","MmoGame","isVertical","kindSound","buttonSound","colorBackground2","nickname","user","paletteid","avatarid","iconSize","padding","edtNickname","mmogameid","constructor","super","this","window","innerWidth","innerHeight","getMuteFile","playAudio","audioElement","networkState","play","createButtonSound","left","top","createDOMElement","parent","body","classnames","styles","position","width","height","attributes","src","alt","getStringM","role","addEventListener","onClickSound","button","setOptions","gateOpen","pin","kinduser","url","instance","minFontSize","maxFontSize","gateComputeSizes","areaRect","Math","round","getOptions","then","options","kindsound","includes","isReady","gatePlayGame","userGUID","length","gateCreateScreen","catch","error","showError","save","uuid4","callGetAttempt","colorpaletteid","message","createArea","size","maxHeight","maxWidth","labels","fontSize","findbest","gateComputeLabelSize","heightColors","floor","heightAvatars","gateCreateScreenDo","gateCreateNickName","focus","lblPalette","btnPalette","gateCreateLabelRefresh","scrollHeight","topGridPalette","gridHeightPalette","countX","countYpalette","lblAvatars","btnAvatars","countYavatars","gridHeightAvatars","addEventListenerRefresh","gateSendGetColorsAvatars","gateCreateSubmit","lblNickName","area","color","getContrastingColor","colorBackground","innerHTML","leftEdit","scrollWidth","debounce","gateUpdateSubmit","max","btnSubmit","cursor","visibility","value","aLabel","i","label","document","createElement","style","whiteSpace","font","appendChild","removeChild","gateShowAvatars","countY","avatarids","avatars","querySelectorAll","forEach","element","remove","fragment","createDocumentFragment","avatar","undefined","count","leftOriginal","w","avatarImagePath","btn","createCenterImageButton","classList","add","id","gateUpdateAvatar","leftPalette","topPalette","countXpalette","leftAvatars","topAvatars","countXavatars","updatePalette","arguments","updateAvatars","require","Ajax","params","colorpalettes","call","methodname","args","done","_ref","colorpaletteids","gateShowColorPalettes","fail","canvasColor","canvasSize","parsedPalettes","map","palette","split","parseInt","iy","ix","canvas","showColorPalette","gateUpdateColorPalette","borderStyle","Object","assign","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","hasAvatar","hasPalette","hasNickname","computeSizes","title","classLabel","classButton","updateColors","Array","from","getElementsByClassName","createDiv","createDivMessage","divMessageHelp","createDivMessageDo","divMessage","createNicknameAvatar","prefixclassname","topNickname","widthNickname","heightNickname","topAvatar","widthAvatar","classname","leftAvatar","transform","createDivMessageStart","height1","div","textAlign","paddingLeft","paddingRight","showHelpScreen","extraparams","response","openGame","colors","processGetAttempt","JSON","parse","heightmessage","divMessageBackground","background","getColorHex","autoResizeText","setColors","name","createButtonHelp","buttonHelp","onClickHelp"],"mappings":"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"}