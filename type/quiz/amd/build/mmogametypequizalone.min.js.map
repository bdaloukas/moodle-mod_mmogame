{"version":3,"file":"mmogametypequizalone.min.js","sources":["../src/mmogametypequizalone.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mmogametype_quiz/mmogametypequiz'],\n    function(MmoGameTypeQuiz) {\n    return class MmoGameTypeQuizAlone extends MmoGameTypeQuiz {\n\n        // Score variables.\n        player;\n\n        constructor() {\n            super('alone');\n            this.cIcons = this.hasHelp() ? 5 : 4;\n        }\n\n        createIconBar() {\n            let i = 0;\n            const step = this.iconSize + this.padding;\n\n            const nicknameHeight = Math.round(this.iconSize / 3);\n\n            const fragment = document.createDocumentFragment(); // Batch DOM updates\n\n            const [nickname, avatar] = this.createNicknameAvatar(fragment,\n                'mmogame-quiz-alone',\n                Math.round(this.padding + (i++) * step),\n                this.padding,\n                2 * this.iconSize + this.padding,\n                nicknameHeight,\n                this.padding + nicknameHeight,\n                this.iconSize);\n\n            this.player = this.createDivScorePercent(fragment,\n                'mmogame-quiz-alone',\n                this.padding + (i++) * step,\n                this.padding + nicknameHeight,\n                true,\n                this.colorScore);\n            this.player.avatarElement = avatar;\n            this.player.nicknameElement = nickname;\n            this.player.cacheAvatar = '';\n            this.player.cacheNickname = '';\n            this.player.lblScore.title = this.getStringM('js_grade');\n            this.player.lblRank.title = this.getStringM('js_ranking_grade');\n\n            this.createButtonSound(fragment, this.padding + (i++) * step,\n                this.padding + nicknameHeight, this.iconSize);\n\n            if (this.hasHelp()) {\n                const button = this.createButtonHelp(fragment, this.padding + (i++) * step, this.padding + nicknameHeight);\n                button.addEventListener(\"click\", () => this.onClickHelp());\n            }\n\n            this.areaRect = {top: 2 * this.padding + this.iconSize + nicknameHeight};\n\n            this.body.appendChild(fragment); // Batch insert into DOM\n        }\n\n        processSetAnswer(json) {\n            this.correct = json.correct;\n\n            if (json.correct !== undefined) {\n                if (this.qtype === \"multichoice\") {\n                    this.onServerAnswerMultichoice(json);\n                }\n            }\n\n            this.disableInput();\n\n            if (this.aItemAnswer !== undefined && json.correct !== undefined) {\n                for (let i = 0; i < this.aItemAnswer.length; i++) {\n                    this.aItemAnswer[i].classList.add(\"disabled\");\n                }\n            }\n\n            this.createNextButton(this.areaRect.width - this.iconSize - this.padding, this.stripTop);\n\n            this.showScore(json);\n        }\n\n        /**\n         * Creates the game screen layout based on the current state.\n         *\n         * @param {Object} json - The game data used to build the screen.\n         * @param {boolean} disabled - Determines whether user input should be disabled.\n         */\n        createScreen(json, disabled) {\n            if (this.endofgame) {\n                // Display end-of-game message and final score\n                this.createDivMessage('mmogame-quiz-alone-endofgame', this.getStringM('js_game_over'));\n                this.showScore(json);\n                return;\n            }\n\n            this.removeAreaChildren();\n\n            // Render the screen layout based on orientation (vertical or horizontal)\n            if (this.isVertical) {\n                this.createScreenVertical(json, disabled);\n            } else {\n                this.createScreenHorizontal(json, disabled);\n            }\n\n            // Display the current score\n            this.showScore(json);\n        }\n\n        /**\n         * Creates a horizontal layout for the quiz screen.\n         *\n         * @param {object} json\n         * @param {boolean} disabled - Whether user input should be disabled.\n         */\n        createScreenHorizontal(json, disabled) {\n            const [width] = this.computeBestFontSize(json);\n\n            this.radioSize = Math.round(this.fontSize);\n            this.stripTop = this.createAnswer(width, 0, width - this.padding, false, this.fontSize, disabled);\n\n            this.createDefinition(0, 0, width - this.padding, this.stripTop - this.padding,\n                false, this.fontSize, json.definition);\n\n            // Adjust strip dimensions\n            this.stripLeft = width + this.padding;\n        }\n\n        createScreenVertical(json, disabled) {\n            this.computeBestFontSize(json);\n\n            this.radioSize = Math.round(this.fontSize);\n\n            const defSize = this.createDefinition(0, 0, this.areaRect.width, 0, false, this.fontSize, json.definition);\n            this.stripTop = this.createAnswer(0, defSize[1] + this.padding, this.areaRect.width, false, this.fontSize, disabled);\n\n            // Adjust strip position\n            this.stripLeft = 0;\n        }\n\n        processGetAttempt(json) {\n            super.processGetAttempt(json);\n            if (json.name !== undefined) {\n                window.document.title = json.name;\n            }\n\n            const nicknameWidth = 2 * this.iconSize + this.padding;\n            const nicknameHeight = this.iconSize / 3;\n\n            // Update game state\n            this.state = parseInt(json.state, 10);\n            if (this.state === 0) {\n                json.qtype = '';\n                if (json.colors) {\n                    this.setColorsString(json.colors);\n                    this.createIconBar();\n                }\n                this.updateNicknameAvatar(this.player, json.avatar, json.nickname, nicknameWidth, nicknameHeight);\n                this.showScore(json);\n                this.createDivMessageStart(this.getStringM('js_wait_to_start'));\n                this.sendFastJSON(); // Send fast JSON updates\n                return;\n            }\n\n            if (this.player === undefined) {\n                this.setColorsString(json.colors);\n                this.createIconBar();\n            }\n\n            if (this.area === undefined) {\n                this.createArea(this.areaRect.top, 0);\n            }\n\n            // Update the window title if a name is provided\n            if (json.name) {\n                document.title = json.name;\n            }\n\n            // Handle error messages from the server\n            if (json.errorcode) {\n                this.createDivMessage('mmogame-error', json.errorcode);\n                return;\n            }\n\n            this.updateNicknameAvatar(this.player, json.avatar, json.nickname, nicknameWidth, nicknameHeight);\n            this.attempt = json.attempt;\n\n            // Process question type and answers\n            this.qtype = json.qtype;\n            if (this.qtype === 'multichoice') {\n                this.answers = [];\n                this.answersID = json.answerids;\n                json.answers.forEach((answer, index) => {\n                    this.answers[index] = this.repairP(answer); // Process each answer\n                });\n            }\n            this.answer = json.answer ?? undefined;\n\n            // Handle end-of-game scenarios\n            this.endofgame = json.endofgame !== undefined && json.endofgame !== 0;\n            json.definition = this.repairP(json.definition);\n            this.errorcode = json.errorcode;\n\n            if (json.state !== 0) {\n                this.createScreen(json, false);\n            }\n\n            this.sendFastJSON(); // Send fast JSON updates\n        }\n\n        showScore(json) {\n            super.showScore(this.player, json.sumscore, json.rank, json.percent, json.percentRank, true);\n            this.player.lblAddScore.innerHTML = json.addscore === undefined ? '' : json.addscore;\n            this.autoResizeText(this.player.lblAddScore, this.player.cellSize, this.player.cellSize, true, 0, 0, 1);\n        }\n\n        showHelpScreen(div) {\n            div.innerHTML = `\n                <br>\n                <div>${this.getStringT('js_alone_help')}</div><br>\n\n                <table class=\"mmogame-table-help\">\n                    <tr>\n                        <td><img height=\"83\" src=\"type/quiz/assets/aduel/example2.png\" alt=\"\" /></td>\n                        <td>${this.getStringT('js_aduel_example2')}</td>\n                    </tr>\n                </table>\n            `;\n        }\n\n        onServerAnswerMultichoice(json) {\n            let foundCorrect = false;\n\n            let aCorrect = json.correct.split(\",\");\n            for (let i = 0; i < this.answersID.length; i++) {\n                if (this.answersID[i] === '') {\n                    continue;\n                }\n\n                const label = this.aItemLabel[i];\n\n                let iscorrect1;\n\n                const iscorrect = aCorrect.includes(this.answersID[i]);\n\n                if (this.aItemAnswer[i].classList.contains(\"checked\")) {\n                    iscorrect1 = aCorrect.includes(this.answersID[i]);\n                }\n                if (iscorrect1) {\n                    foundCorrect = true;\n                }\n\n                if (iscorrect === false && iscorrect1 === undefined) {\n                    continue;\n                }\n\n                const height = this.aItemLabel[i].scrollHeight;\n\n                const move = iscorrect1 !== undefined ? this.radioSize : 0;\n                const width = this.labelWidth - move;\n\n                if (move !== 0) {\n                    label.style.left = (parseInt(label.style.left) + move) + \"px\";\n                }\n                this.aItemLabel[i].style.width = width + \"px\";\n                this.autoResizeText(this.aItemLabel[i], width, height, true, this.minFontSize, this.maxFontSize, 0.5);\n\n                this.onServerAnswerMultichoiceShowCorrect(i, iscorrect1);\n            }\n\n            this.playSound(foundCorrect ? this.audioYes : this.audioNo);\n        }\n\n        onServerAnswerMultichoiceShowCorrect(i, iscorrect1, iscorrect) {\n            if (iscorrect) {\n                this.aItemLabel[i].innerHTML = '<b><u>' + this.aItemLabel[i].innerHTML + '</b></u>';\n            }\n\n            if (iscorrect1 !== undefined) {\n                let t = parseInt(this.aItemAnswer[i].style.top);\n                let div = this.createDiv(this.area, 'mmogame-quiz-aduel-correct-answer',\n                    this.aItemCorrectX[i], t, this.radioSize, this.radioSize);\n                div.title = iscorrect1 ? this.getStringT('js_correct_answer') : this.getStringT('js_wrong_answer');\n                div.innerHTML = this.getSVGcorrect(this.radioSize, iscorrect1, this.colorScore, this.colorScore);\n            }\n        }\n\n        hasHelp() {\n            return true;\n        }\n    };\n});"],"names":["define","MmoGameTypeQuiz","player","constructor","cIcons","this","hasHelp","createIconBar","i","step","iconSize","padding","nicknameHeight","Math","round","fragment","document","createDocumentFragment","nickname","avatar","createNicknameAvatar","createDivScorePercent","colorScore","avatarElement","nicknameElement","cacheAvatar","cacheNickname","lblScore","title","getStringM","lblRank","createButtonSound","createButtonHelp","addEventListener","onClickHelp","areaRect","top","body","appendChild","processSetAnswer","json","correct","undefined","qtype","onServerAnswerMultichoice","disableInput","aItemAnswer","length","classList","add","createNextButton","width","stripTop","showScore","createScreen","disabled","endofgame","createDivMessage","removeAreaChildren","isVertical","createScreenVertical","createScreenHorizontal","computeBestFontSize","radioSize","fontSize","createAnswer","createDefinition","definition","stripLeft","defSize","processGetAttempt","name","window","nicknameWidth","state","parseInt","colors","setColorsString","updateNicknameAvatar","createDivMessageStart","sendFastJSON","area","createArea","errorcode","attempt","answers","answersID","answerids","forEach","answer","index","repairP","sumscore","rank","percent","percentRank","lblAddScore","innerHTML","addscore","autoResizeText","cellSize","showHelpScreen","div","getStringT","foundCorrect","aCorrect","split","label","aItemLabel","iscorrect1","iscorrect","includes","contains","height","scrollHeight","move","labelWidth","style","left","minFontSize","maxFontSize","onServerAnswerMultichoiceShowCorrect","playSound","audioYes","audioNo","t","createDiv","aItemCorrectX","getSVGcorrect"],"mappings":"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"}