{"version":3,"file":"mmogametypequizalone.min.js","sources":["../src/mmogametypequizalone.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mmogametype_quiz/mmogametypequiz'],\n    function(MmoGameTypeQuiz) {\n    return class MmoGameTypeQuizAlone extends MmoGameTypeQuiz {\n\n        // Score variables.\n        player;\n\n        constructor() {\n            super();\n            this.cIcons = this.hasHelp() ? 5 : 4;\n            this.type = 'alone';\n        }\n\n        createIconBar() {\n            let i = 0;\n            const step = this.iconSize + this.padding;\n\n            const nicknameHeight = Math.round(this.iconSize / 3);\n\n            const fragment = document.createDocumentFragment(); // Batch DOM updates\n\n            const [nickname, avatar] = this.createNicknameAvatar(fragment,\n                'mmogame-quiz-alone',\n                Math.round(this.padding + (i++) * step),\n                this.padding,\n                2 * this.iconSize + this.padding,\n                nicknameHeight,\n                this.padding + nicknameHeight,\n                this.iconSize);\n\n            this.player = this.createDivScorePercent(fragment,\n                'mmogame-quiz-alone',\n                this.padding + (i++) * step,\n                this.padding + nicknameHeight,\n                this.getContrastingColor(this.color),\n                true);\n            this.player.avatarElement = avatar;\n            this.player.nicknameElement = nickname;\n            this.player.cacheAvatar = '';\n            this.player.cacheNickname = '';\n            this.player.lblScore.title = this.getStringM('js_grade');\n            this.player.lblRank.title = this.getStringM('js_ranking_grade');\n\n            this.createButtonSound(fragment, this.padding + (i++) * step,\n                this.padding + nicknameHeight, this.iconSize);\n            if (this.hasHelp()) {\n                const button = this.createButtonHelp(fragment, this.padding + (i++) * step, this.padding);\n                button.addEventListener(\"click\", () => this.onClickHelp());\n            }\n            this.createArea(2 * this.padding + this.iconSize + nicknameHeight);\n\n            this.body.appendChild(fragment); // Batch insert into DOM\n        }\n\n        processSetAnswer(json) {\n            this.correct = json.correct;\n\n            this.playAudio(json.iscorrect !== 0 ? this.audioYes : this.audioNo);\n\n            if (json.correct !== undefined && this.qtype === \"multichoice\") {\n                this.updateScreenAfterAnswerMultichoice();\n            }\n\n            this.disableInput();\n\n            const btn = super.createImageButton(\n                this.area,\n                'mmogame-quiz-next',\n                this.nextLeft,\n                this.nextTop,\n                0,\n                this.iconSize,\n                'assets/next.svg'\n            );\n            btn.addEventListener(\"click\", () => {\n                this.callGetAttempt();\n                this.area.removeChild(btn);\n            });\n\n            this.showScore(json);\n        }\n\n        onServerFastJson(response) {\n            const [state, timefastjson] = response.split(\"-\").map(Number);\n            if (timefastjson !== this.timefastjson || state !== this.state) {\n                this.callGetAttempt();\n                return;\n            }\n\n            this.sendFastJSON();\n        }\n\n        /**\n         * Creates the game screen layout based on the current state.\n         *\n         * @param {Object} json - The game data used to build the screen.\n         * @param {boolean} disabled - Determines whether user input should be disabled.\n         */\n        createScreen(json, disabled) {\n            if (this.endofgame) {\n                // Display end-of-game message and final score\n                this.createDivMessage('mmogame-endofgame', this.getStringM('js_game_over'));\n                this.showScore(json);\n                return;\n            }\n\n            // Render the screen layout based on orientation (vertical or horizontal)\n            if (this.vertical) {\n                this.createScreenVertical(disabled);\n            } else {\n                this.createScreenHorizontal(json, disabled);\n            }\n\n            // Display the current score\n            this.showScore(json);\n        }\n\n        /**\n         * Creates a horizontal layout for the quiz screen.\n         *\n         * @param {object} json\n         * @param {boolean} disabled - Whether user input should be disabled.\n         */\n        createScreenHorizontal(json, disabled) {\n            let maxHeight = this.areaRect.height - 2 * this.padding;\n\n            maxHeight -= this.iconSize + this.padding; // Reserve space for next button\n\n            const width = Math.round((this.areaRect.width - this.padding) / 2);\n            for (let step = 1; step <= 2; step++) {\n                let defSize;\n                this.fontSize = this.findbest(step === 1 ? this.minFontSize : this.minFontSize / 2, this.maxFontSize,\n                    (fontSize) => {\n                        defSize = this.createDefinition(0, 0, width - this.padding, 0, true, fontSize,\n                            json.definition);\n\n                        if (defSize[0] >= width) {\n                            return 1;\n                        }\n                        let ansSize = this.createAnswer(0, 0, width - this.padding, true, fontSize, disabled);\n                        if (ansSize[0] >= width) {\n                            return 1;\n                        }\n                        return defSize[1] < maxHeight && ansSize[1] < maxHeight ? -1 : 1;\n                    }\n                );\n                if (defSize[0] <= width && defSize[1] <= this.areaRect.height) {\n                    break;\n                }\n            }\n\n            this.radioSize = Math.round(this.fontSize);\n            this.createDefinition(0, 0, width - this.padding, 0, false, this.fontSize, json.definition);\n\n            this.nextTop = this.createAnswer(width, 0, width - this.padding, false, this.fontSize, disabled) + this.padding;\n\n            // Adjust strip dimensions\n            this.stripLeft = width + this.padding;\n            this.stripWidth = 2 * this.iconSize;\n            this.stripHeight = this.iconSize;\n        }\n\n        processGetAttempt(json) {\n            // Calculate time difference and set up the clock\n            this.computeDifClock(json.time, json.timestart, json.timeclose);\n\n            if (parseInt(json.state) === 0) {\n                json.qtype = '';\n                if (json.colors) {\n                    this.setColorsString(json.colors);\n                    this.createIconBar();\n                }\n                this.showScore(json);\n                this.createDivMessageStart(this.getStringM('js_wait_to_start'));\n                return;\n            }\n\n            if (this.player === undefined) {\n                this.setColorsString(json.colors);\n                this.createIconBar();\n            }\n\n            // Update the window title if a name is provided\n            if (json.name) {\n                document.title = json.name;\n            }\n\n            // Handle error messages from the server\n            if (json.errorcode) {\n                this.createDivMessage('mmogame-error', json.errorcode);\n                return;\n            }\n\n            // Update game state and user-related data\n            this.state = parseInt(json.state, 10);\n            this.fastjson = json.fastjson;\n            this.timefastjson = parseInt(json.timefastjson, 10);\n\n            const nicknameWidth = 2 * this.iconSize + this.padding;\n            const nicknameHeight = this.iconSize / 3;\n            this.updateNicknameAvatar(this.player, json.avatar, json.nickname, nicknameWidth, nicknameHeight);\n            this.attempt = json.attempt;\n\n            // Process question type and answers\n            this.qtype = json.qtype;\n            if (this.qtype === 'multichoice') {\n                this.answers = [];\n                this.answersID = json.answerids;\n                json.answers.forEach((answer, index) => {\n                    this.answers[index] = this.repairP(answer); // Process each answer\n                });\n            }\n            this.answer = json.answer ?? undefined;\n\n            // Handle end-of-game scenarios\n            this.endofgame = json.endofgame !== undefined && json.endofgame !== 0;\n            json.definition = this.repairP(json.definition);\n            this.errorcode = json.errorcode;\n\n            if (json.state !== 0) {\n                this.createScreen(json, false);\n            }\n\n            // A this.updateLabelTimer(); // Start or update the timer\n            this.sendFastJSON(); // Send fast JSON updates\n        }\n\n        showScore({sumscore, rank, percent, percentrank}) {\n            super.showScore(this.player, sumscore, rank, percent, percentrank, true);\n        }\n\n        showHelpScreen(div) {\n            div.innerHTML = `\n                <br>\n                <div>${this.getStringT('js_alone_help')}</div><br>\n\n                <table class=\"mmogame-table-help\">\n                    <tr>\n                        <td><img height=\"83\" src=\"assets/aduel/example2.png\" alt=\"\" /></td>\n                        <td>${this.getStringT('js_aduel_example2')}</td>\n                    </tr>\n                </table>\n            `;\n        }\n    };\n});"],"names":["define","MmoGameTypeQuiz","player","constructor","super","this","cIcons","hasHelp","type","createIconBar","i","step","iconSize","padding","nicknameHeight","Math","round","fragment","document","createDocumentFragment","nickname","avatar","createNicknameAvatar","createDivScorePercent","getContrastingColor","color","avatarElement","nicknameElement","cacheAvatar","cacheNickname","lblScore","title","getStringM","lblRank","createButtonSound","createButtonHelp","addEventListener","onClickHelp","createArea","body","appendChild","processSetAnswer","json","correct","playAudio","iscorrect","audioYes","audioNo","undefined","qtype","updateScreenAfterAnswerMultichoice","disableInput","btn","createImageButton","area","nextLeft","nextTop","callGetAttempt","removeChild","showScore","onServerFastJson","response","state","timefastjson","split","map","Number","sendFastJSON","createScreen","disabled","endofgame","createDivMessage","vertical","createScreenVertical","createScreenHorizontal","maxHeight","areaRect","height","width","defSize","fontSize","findbest","minFontSize","maxFontSize","createDefinition","definition","ansSize","createAnswer","radioSize","stripLeft","stripWidth","stripHeight","processGetAttempt","computeDifClock","time","timestart","timeclose","parseInt","colors","setColorsString","createDivMessageStart","name","errorcode","fastjson","nicknameWidth","updateNicknameAvatar","attempt","answers","answersID","answerids","forEach","answer","index","repairP","_ref","sumscore","rank","percent","percentrank","showHelpScreen","div","innerHTML","getStringT"],"mappings":"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"}