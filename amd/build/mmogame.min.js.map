{"version":3,"file":"mmogame.min.js","sources":["../src/mmogame.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine([''], function() {\n    return class MmoGame {\n        // Define default properties with appropriate types\n        kindSound = 0; // Type: Number (0 = on, 1 = off, 2 = speak)\n        state = 0; // State of the game\n        body = document.body;\n        minFontSize = 0;\n        maxFontSize = 0;\n        fontSize = 0;\n        avatarTop = 0;\n        iconSize = 0;\n        padding = 0;\n\n        // UI element placeholders\n        area = undefined;\n        buttonSound = undefined;\n\n        // Colors\n        colorScore;\n        colorScore2;\n        colorDefinition;\n        colorsBackground;\n\n        // Other\n        definition;\n        buttonAvatarHeight;\n        buttonAvatarTop;\n\n        /**\n         * Initialize game properties and compute initial sizes.\n         *\n         * @module mmogame\n         * @copyright 2024 Vasilis Daloukas\n         * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n         */\n        constructor() {\n            this.body = document.getElementsByTagName(\"body\")[0];\n            this.kindSound = 0;\n\n            let size = parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue('font-size'));\n            this.minFontSize = size;\n            this.maxFontSize = 2 * size;\n            this.fontSize = size;\n        }\n\n        // UI Methods\n        /**\n         * Creates an HTML element with specified properties and attributes.\n         *\n         * @param {string} tag - The tag of the HTML element (e.g., 'div', 'img', 'button').\n         * @param {Object} options - Options for configuring the element.\n         * @param {HTMLElement} options.parent - The parent element to append the new element.\n         * @param {number} options.left - Horizontal position in pixels.\n         * @param {number} options.top - Vertical position in pixels.\n         * @param {number} options.width - Width of the element in pixels.\n         * @param {number} options.height - Height of the element in pixels.\n         * @param {string} [options.classname] - CSS classes (separated by spaces).\n         * @param {Object} [options.attributes] - Additional attributes for the element (key-value pairs).\n         * @returns {HTMLElement} - The created HTML element.\n         */\n        createElement(tag,\n                      {parent, left, top, width, height,\n                          classname = '', attributes = {}}) {\n            // Create the element\n            const element = document.createElement(tag);\n\n            // Set position and dimensions\n            element.style.position = 'absolute';\n            element.style.left = `${left}px`;\n            element.style.top = `${top}px`;\n            if (width !== undefined) {\n                element.style.width = `${width}px`;\n            }\n            if (height !== undefined) {\n                element.style.height = `${height}px`;\n            }\n\n            // Add CSS classes\n            if (classname.trim()) {\n                element.classList.add(...classname.split(/\\s+/));\n            }\n\n            // Apply additional attributes\n            for (const [key, value] of Object.entries(attributes)) {\n                if (key === 'style') {\n                    // Merge styles for inline configuration\n                    Object.assign(element.style, value);\n                } else {\n                    element.setAttribute(key, value);\n                }\n            }\n\n            // Append the element to the parent if provided\n            if (parent) {\n                parent.appendChild(element);\n            }\n\n            return element;\n        }\n\n        /**\n         * Creates a <div> element.\n         *\n         * @param {HTMLElement} parent - The parent element.\n         * @param {number} left - Horizontal position in pixels.\n         * @param {number} top - Vertical position in pixels.\n         * @param {number} width - Width of the <div>.\n         * @param {number} height - Height of the <div>.\n         * @returns {HTMLElement} - The created <div> element.\n         */\n        createDiv(parent, left, top, width, height) {\n            return this.createElement('div', {parent, left, top, width, height});\n        }\n\n        /**\n         * Creates an <img> element.\n         *\n         * @param {HTMLElement} parent - The parent element.\n         * @param {number} left - Horizontal position in pixels.\n         * @param {number} top - Vertical position in pixels.\n         * @param {number} width - Width of the <img> element.\n         * @param {number} height - Height of the <img> element.\n         * @param {string} filename - The source file for the image.\n         * @returns {HTMLElement} - The created <img> element.\n         */\n        createImage(parent, left, top, width, height, filename) {\n            return this.createElement('img', {\n                parent,\n                left,\n                top,\n                width,\n                height,\n                attributes: {src: filename, draggable: false},\n            });\n        }\n\n        createCenterImageButton(parent, left, top, width, height, classname, filename) {\n            let button = document.createElement(\"img\");\n            button.classList.add(\"mmogame_imgbutton\");\n            button.style.position = \"absolute\";\n            button.draggable = false;\n\n            const img = new Image();\n            img.onload = function() {\n                if (this.width > 0 && this.height > 0) {\n                    let mul = Math.min(width / this.width, height / this.height);\n                    let w = Math.round(this.width * mul);\n                    let h = Math.round(this.height * mul);\n\n                    button.style.width = w + \"px\";\n                    button.style.height = h + \"px\";\n                    button.style.left = (left + width / 2 - w / 2) + \"px\";\n                    button.style.top = (top + height / 2 - h / 2) + \"px\";\n\n                    button.src = filename;\n                }\n            };\n            img.src = filename;\n\n            parent.appendChild(button);\n            return button;\n        }\n\n        // For check\n        createButton({\n                         parent, left, top, width, height, classname, src, alt, role = 'button',\n                     }) {\n            const button = document.createElement('img');\n            button.style.position = 'absolute';\n            button.style.left = `${left}px`;\n            button.style.top = `${top}px`;\n            button.style.width = `${width}px`;\n            button.style.height = `${height}px`;\n            button.className = classname || '';\n            button.src = src || '';\n            button.alt = alt || '';\n            button.setAttribute('role', role);\n            parent.appendChild(button);\n            return button;\n        }\n\n\n        createDivButton(left, top) {\n            return this.createButton({\n                parent: this.body, // Ή άλλος parent\n                left,\n                top,\n                width: this.iconSize,\n                height: this.iconSize,\n                classname: 'mmogame_button',\n                role: 'button',\n            });\n        }\n\n        createButtonSound(left, top) {\n            this.buttonSound = this.createButton({\n                parent: this.body,\n                left,\n                top,\n                width: this.iconSize,\n                height: this.iconSize,\n                classname: 'mmogame_button_red',\n                src: this.getMuteFile(),\n                alt: this.getStringM('js_sound'),\n                role: 'button',\n            });\n            this.buttonSound.addEventListener(\"click\", () => this.onClickSound(this.buttonSound));\n        }\n\n        // Game Logic\n\n        // Utility Functions\n\n        // Other\n\n        hasHelp() {\n            return false;\n        }\n\n        /**\n         * Clear all children of the <body> element.\n         */\n        clearBodyChildren() {\n            this.removeDivMessage();\n\n            while (this.body.firstChild) {\n                this.body.removeChild(this.body.lastChild);\n            }\n            this.area = undefined;\n        }\n\n        /**\n         * Opens the game by resetting the body and computing sizes.\n         */\n        openGame() {\n            this.clearBodyChildren();\n            this.area = undefined;\n            this.computeSizes();\n        }\n\n        updateImageButton(button, left, top, width, height, filename) {\n            button.src = filename;\n        }\n\n\n        getMuteFile() {\n            if (this.kindSound === 0) {\n                return 'assets/sound-on-flat.png';\n            } else if (this.kindSound === 1) {\n                return 'assets/sound-off-flat.png';\n            } else if (this.kindSound === 2) {\n                return 'assets/speak.svg';\n            } else {\n                return 'assets/sound-on-flat.png';\n            }\n        }\n\n        /**\n         * Plays a sound file if sound is enabled.\n         *\n         * @param {HTMLAudioElement} audioElement - The audio element to play.\n         */\n        playAudio(audioElement) {\n            if (this.kindSound !== 0 && audioElement) {\n                if (audioElement.networkState === 1) {\n                    audioElement.play();\n                }\n            }\n        }\n\n        autoResizeText(item, width, height, wrap, minFontSize, maxFontSize, minRatio) {\n            let minHeight = 0.9 * height;\n            let low = Math.max(1, minFontSize);\n            width = Math.round(width);\n            height = Math.round(height);\n            let up = maxFontSize === 0 || maxFontSize === undefined ? Math.min(width, height) : maxFontSize;\n\n            let fitSize = low;\n            let fitHeight = 0;\n            let newHeight = 0;\n            let newWidth = 0;\n\n            for (let i = 0; i <= 10; i++) {\n                let el = document.createElement(\"div\");\n                el.style.left = 0;\n                el.style.top = 0;\n                el.style.width = width + \"px\";\n                el.style.height = 0;\n                el.visibility = \"visible\";\n                if (!wrap) {\n                    el.style.whiteSpace = \"nowrap\";\n                }\n                el.innerHTML = item.innerHTML;\n                this.body.appendChild(el);\n\n                let fontSize = (low + up) / 2;\n\n                el.style.fontSize = fontSize + \"px\";\n                newHeight = el.scrollHeight;\n                newWidth = el.scrollWidth - 1;\n\n                this.body.removeChild(el);\n\n                if (newWidth > width || newHeight > height) {\n                    up = fontSize;\n                } else {\n                    low = fontSize;\n                    if (Math.abs(fitHeight - newHeight) <= 2) {\n                        break;\n                    }\n                    fitHeight = newHeight;\n                    fitSize = fontSize;\n                    if (newHeight > minHeight) {\n                        break;\n                    }\n                }\n            }\n            item.style.fontSize = fitSize + \"px\";\n\n            if (newWidth > width || newHeight > height) {\n                this.autoResizeTextBr(item);\n                newWidth = item.scrollWidth;\n                newHeight = item.scrollHeight;\n                this.autoResizeTextImage(item, newWidth > width ? newWidth - width : 0, newHeight > height ? newHeight - height : 0,\n                    minRatio);\n            } else {\n                return [item.scrollWidth - 1, item.scrollHeight];\n            }\n\n            let el = document.createElement(\"div\");\n            el.style.width = width + \"px\";\n            el.style.height = 0;\n            el.visibility = \"hidden\";\n            if (!wrap) {\n                el.style.whiteSpace = \"nowrap\";\n            }\n            el.innerHTML = item.innerHTML;\n            this.body.appendChild(el);\n            el.style.fontSize = item.style.fontSize;\n            let size = [el.scrollWidth - 1, el.scrollHeight];\n            this.body.removeChild(el);\n\n            return size;\n        }\n\n        autoResizeTextBr(item) {\n            let s = item.innerHTML;\n            let change = false;\n            while (s.startsWith('<br>')) {\n                s = s.substring(4);\n                change = true;\n            }\n            let pos1 = s.indexOf('<br>');\n            for (; ;) {\n                let pos = s.indexOf('<br>', pos1 + 4);\n                if (pos < 0) {\n                    break;\n                }\n                let s2 = s.substring(pos1 + 4, pos);\n                if (!s2.trim()) {\n                    s = s.substring(0, pos1 + 4) + s.substring(pos + 4);\n                    change = true;\n                    pos = pos1;\n                }\n                pos1 = pos;\n            }\n\n            if (change) {\n                item.innerHTML = s;\n            }\n        }\n\n        autoResizeTextImage(item, subwidth, subheight, minRatio) {\n            if (subwidth === 0 && subheight === 0) {\n                return;\n            }\n            let s = item.innerHTML;\n\n            for (let pos = 0; ;) {\n                let pos2 = s.indexOf(\"<img \", pos);\n                if (pos2 < 0) {\n                    break;\n                }\n                let pos3 = s.indexOf(\">\", pos2);\n                if (pos3 < 0) {\n                    break;\n                }\n                let s2 = s.substring(pos2, pos3) + \" \";\n\n                let width = 0;\n                let height = 0;\n                let posw = s2.indexOf(\"width=\");\n                if (posw >= 0) {\n                    let posw2 = s2.indexOf(\" \", posw);\n                    if (posw2 >= 0) {\n                        let num = s2.slice(posw + 6, posw2).replace(/\"/g, \"\");\n                        width = parseInt(num);\n                        s2 = s2.slice(0, posw) + s2.slice(posw2);\n                    }\n                }\n\n                posw = s2.indexOf(\"height=\");\n                if (posw >= 0) {\n                    let posw2 = s2.indexOf(\" \", posw);\n                    if (posw2 >= 0) {\n                        let num = s2.slice(posw + 7, posw2).replace(/\"/g, \"\");\n                        height = parseInt(num);\n                        s2 = s2.slice(0, posw) + s2.slice(posw2);\n                    }\n                }\n                if (width > 0 && height > 0) {\n                    let newWidth = width - subwidth > 0 ? width - subwidth : width / 2;\n                    let newHeight = height - subheight > 0 ? height - subheight : height / 2;\n                    let ratio = Math.max(minRatio, Math.min(newWidth / width, newHeight / height));\n                    s2 = s2 + \" width=\\\"\" + Math.round(ratio * width) + \"\\\" height=\\\"\" + Math.round(height * ratio) + \"\\\" \";\n                }\n                s = s.slice(0, pos2) + s2 + s.slice(pos3);\n                pos = pos3;\n            }\n            item.innerHTML = s;\n        }\n\n        pad(num, size) {\n            let s = num + \"\";\n            while (s.length < size) {\n                s = \"0\" + s;\n            }\n            return s;\n        }\n\n        uuid4() {\n            const uuid = new Array(36);\n            const hexDigits = '0123456789abcdef'; // Lookup table for hexadecimal digits\n\n            for (let i = 0; i < 36; i++) {\n                uuid[i] = Math.floor(Math.random() * 16); // Generate random numbers for each position\n            }\n\n            // Insert dashes at predefined positions\n            uuid[8] = '-';\n            uuid[13] = '-';\n            uuid[18] = '-';\n            uuid[23] = '-';\n\n            // Set specific bits to comply with UUIDv4 standards\n            uuid[14] = 4; // The 13th position represents version 4 (0100 in binary)\n            // eslint-disable-next-line no-bitwise\n            uuid[19] = (uuid[19] & 0x3) | 0x8; // The 17th position must start with '10' in binary\n\n            // Convert numbers to hexadecimal without using toString\n            this.user = uuid\n                .map((x) => (typeof x === 'string' ? x : hexDigits[x])) // Convert numeric values to hex using lookup table\n                .join('');\n\n            let options = {userGUID: this.user};\n            let instance = this;\n            this.saveOptions(options)\n                .then(function() {\n                    return true;\n                })\n                .catch(error => {\n                    instance.showError(error.message);\n                    return false;\n                });\n        }\n\n        /**\n         * Compute sizes for icons and paddings based on screen dimensions.\n         */\n        computeSizes() {\n            // Ensure cIcons is at least 5\n            this.cIcons = this.cIcons ?? 5;\n            if (this.cIcons < 5) {\n                this.cIcons = 5;\n            }\n\n            // Calculate the maximum icon size based on window dimensions\n            const maxIconWidth = window.innerWidth / this.cIcons;\n            const maxIconHeight = window.innerHeight / 5;\n            this.iconSize = Math.min(maxIconWidth, maxIconHeight);\n\n            // Adjust the icon size by subtracting 10% divided by the number of icons\n            const adjustment = this.iconSize / 10 / this.cIcons;\n            this.iconSize = Math.round(this.iconSize - adjustment);\n\n            // Calculate the padding based on 10% of the icon size\n            this.padding = Math.round(this.iconSize / 10);\n\n            // Subtract the padding from the final icon size\n            this.iconSize -= this.padding;\n        }\n\n        getIconSize() {\n            return this.iconSize;\n        }\n\n        getCopyrightHeight() {\n            return Math.round(this.getIconSize() / 3);\n        }\n\n        getPadding() {\n            return this.padding;\n        }\n\n        /**\n         * Returns the hex color string for a given color code.\n         *\n         * @param {Number} colorCode - The color code.\n         * @returns {string} Hexadecimal representation of the color.\n         */\n        getColorHex(colorCode) {\n            return `#${colorCode.toString(16).padStart(6, '0').toUpperCase()}`;\n/* A\n            const hexDigits = '0123456789ABCDEF'; // Lookup table for hexadecimal digits\n            const hexArray = [];\n\n            for (let i = 0; i < 6; i++) {\n                // Extract the least significant nibble and find its hex representation\n                // eslint-disable-next-line no-bitwise\n                hexArray.unshift(hexDigits[x & 0xF]);\n                // eslint-disable-next-line no-bitwise\n                x >>= 4; // Shift right by 4 bits to process the next nibble\n            }\n\n            // Join the hex digits and prefix with '#'\n            return '#' + hexArray.join('');\\\n */\n        }\n\n        /**\n         * Calculates contrast value for a given color.\n         *\n         * @param {Number} colorCode - The color code.\n         * @returns {Number} Contrast value.\n         */\n        getContrast(colorCode) {\n            // eslint-disable-next-line no-bitwise\n            const r = (colorCode >> 16) & 0xff;\n            // eslint-disable-next-line no-bitwise\n            const g = (colorCode >> 8) & 0xff;\n            // eslint-disable-next-line no-bitwise\n            const b = colorCode & 0xff;\n            return (r * 299 + g * 587 + b * 114) / 1000;\n        }\n\n        getColorGray(x) {\n            let r = Math.floor(x / 0x1000000) % 256, // Red.\n                g = Math.floor(x / 0x10000) % 256, // Green.\n                b = Math.floor(x / 0x100) % 256, // Blue.\n                yiq = (r * 299) + g * 587 + b * 114,\n                m = 255 * 299 + 255 * 587 + 255 * 114,\n                gray = Math.round(yiq * 255 / m);\n\n            return (gray * 0x10000) + (gray * 0x100) + gray;\n        }\n\n        /**\n         * Returns a contrasting color (black or white) based on brightness.\n         *\n         * @param {Number} colorCode - The color code.\n         * @returns {string} \"#000000\" or \"#FFFFFF\".\n         */\n        getContrastingColor(colorCode) {\n            return this.getContrast(colorCode) >= 128 ? '#000000' : '#FFFFFF';\n        }\n\n        repairColors(colors) {\n\n            this.colors = colors;\n            let instance = this;\n            this.colors.sort(function(a, b) {\n                return instance.getContrast(a) - instance.getContrast(b);\n            });\n\n            this.colorBackground = this.colors[0];\n            this.body.style.background = this.getColorHex(this.colorBackground);\n\n            return this.colors;\n        }\n\n        repairP(s) {\n            if (s === undefined) {\n                return \"\";\n            }\n\n            // Remove <p> tags and replace </p> with <br />\n            let s2 = s.replace(/<p[^>]*>/g, '').replace(/<\\/p>/g, '<br/>').trim();\n\n            // Remove <br> or <br/> at the end of the string\n            s2 = s2.replace(/<br\\s*\\/?>$/g, '');\n\n            // Remove the <ol><br></ol> sequence if it exists\n            let pos = s2.indexOf('<ol><br></ol>');\n            if (pos >= 0) {\n                s2 = s2.slice(0, pos) + s2.slice(pos + 13);\n            }\n\n            return s2;\n        }\n\n        /* B\n        createDivButton(left, top) {\n            let button = document.createElement(\"button\");\n            button.style.position = \"absolute\";\n            button.classList.add(\"mmogame_button\");\n            button.style.left = left + \"px\";\n            button.style.top = top + \"px\";\n            button.style.width = this.iconSize + \"px\";\n            button.style.height = this.iconSize + \"px\";\n            button.style.lineHeight = this.iconSize + \"px\";\n            button.style.textAlign = \"center\";\n\n            return button;\n        }*/\n\n        createDivScore(left, top, num) {\n            let button = this.createDivButton(left, top);\n\n            button.style.borderRadius = this.iconSize + \"px\";\n            button.style.border = \"0px solid \" + this.getColorHex(0xFFFFFF);\n            button.style.boxShadow = \"inset 0 0 0.125em rgba(255, 255, 255, 0.75)\";\n            button.title = this.getStringM('js_grade');\n            button.alt = this.getStringM('js_grade');\n            if (num === 1) {\n                button.style.background = this.getColorHex(this.colorScore);\n                button.style.color = this.getContrastingColor(this.colorScore);\n            } else {\n                this.buttonScore2 = button;\n                button.style.background = this.getColorHex(this.colorScore2);\n                button.style.color = this.getContrastingColor(this.colorScore2);\n            }\n\n            this.body.appendChild(button);\n\n            button.innerHTML = '100 %';\n            this.autoResizeText(button, this.iconSize, this.iconSize, false, 0, 0, 1);\n            button.innerHTML = '';\n\n            let div = this.createDiv(this.body, left, top + this.iconSize / 4, this.iconSize, this.iconSize / 2);\n            div.style.lineHeight = (this.iconSize / 2) + \"px\";\n            div.style.textAlign = \"center\";\n            div.style.color = this.getContrastingColor(this.colorScore);\n            div.title = this.getStringM('js_grade');\n            if (num === 1) {\n                this.labelScore = div;\n            } else {\n                this.labelScore2 = div;\n            }\n\n            let h = this.iconSize / 3;\n            div = this.createDiv(this.body, left, top, this.iconSize, h);\n            div.style.textAlign = \"center\";\n            div.style.color = this.getContrastingColor(this.colorScore);\n            button.disabled = true;\n            if (num === 1) {\n                this.labelScoreRank = div;\n            } else {\n                this.labelScoreRank2 = div;\n            }\n\n            this.createAddScore(left, top + this.iconSize - h, this.iconSize, h, num);\n        }\n\n        createDivScorePercent(left, top, num) {\n            let button = this.createDivButton(left, top);\n\n            button.style.border = \"0px solid \" + this.getColorHex(0xFFFFFF);\n            button.style.boxShadow = \"inset 0 0 0.125em rgba(255, 255, 255, 0.75)\";\n            if (num === 1) {\n                button.style.background = this.getColorHex(this.colorScore);\n                button.style.color = this.getContrastingColor(this.colorScore);\n                button.title = this.getStringM('js_grade');\n            } else {\n                button.style.background = this.getColorHex(this.colorScore2);\n                button.style.color = this.getContrastingColor(this.colorScore2);\n            }\n\n            this.body.appendChild(button);\n\n            button.innerHTML = '';\n            button.disabled = true;\n\n            let div = this.createDiv(this.body, left, top + this.iconSize / 4, this.iconSize / 2, this.iconSize / 2);\n            div.style.lineHeight = (this.iconSize / 2) + \"px\";\n            div.style.textAlign = \"center\";\n            div.style.color = this.getContrastingColor(this.colorScore);\n            if (num === 1) {\n                this.labelScore = div;\n                div.title = this.getStringM('js_grade');\n            } else {\n                this.labelScore2 = div;\n                div.title = this.getStringM('js_grade_opponent');\n            }\n\n            let h = this.iconSize / 3;\n            div = this.createDiv(this.body, left, top, this.iconSize / 2, h);\n            div.style.textAlign = \"center\";\n            div.style.color = this.getContrastingColor(this.colorScore);\n            div.title = this.getStringM('js_ranking_grade');\n            if (num === 1) {\n                this.labelScoreRank = div;\n            } else {\n                this.labelScoreRank2 = div;\n            }\n\n            this.createAddScore(left, top + this.iconSize - h, this.iconSize / 2, h, num);\n\n            let label = num === 1 ? this.labelScoreRank : this.labelScoreRank2;\n\n            div = this.createDiv(this.body, left + this.iconSize / 2, top, this.iconSize / 2, h);\n            div.style.textAlign = \"center\";\n            div.style.fontFamily = label.style.fontFamily;\n            div.style.fontSize = h + \"px\";\n            div.style.lineHeight = h + \"px\";\n            div.style.color = label.style.color;\n            div.title = this.getStringM('js_ranking_percent');\n            if (num === 1) {\n                this.labelScoreRankB = div;\n            }\n\n            label = num === 1 ? this.labelAddScore : this.labelAddScore2;\n            div = this.createDiv(this.body, left + this.iconSize / 2, parseFloat(this.labelScore.style.top), this.iconSize / 2,\n                this.iconSize / 2);\n            div.style.textAlign = \"center\";\n            div.style.lineHeight = Math.round(this.iconSize / 2) + \"px\";\n            div.style.fontFamily = label.style.fontFamily;\n            div.style.fontSize = label.style.fontSize;\n            div.style.fontWeight = 'bold';\n            div.style.color = label.style.color;\n            div.title = this.getStringM('js_percent');\n            this.autoResizeText(div, this.iconSize / 2, this.iconSize / 2, false);\n            if (num === 1) {\n                this.labelScoreB = div;\n            }\n        }\n\n        createDivTimer(left, top, sizeIcon) {\n            let div = document.createElement(\"div\");\n            div.style.position = \"absolute\";\n            div.style.left = left + \"px\";\n            div.style.top = top + \"px\";\n            div.style.width = sizeIcon + \"px\";\n            div.style.height = sizeIcon + \"px\";\n            div.style.whiteSpace = \"nowrap\";\n            div.style.lineHeight = sizeIcon + \"px\";\n            div.style.textAlign = \"center\";\n            div.style.background = this.getColorHex(this.colorBackground); // \"#234025\"\n            div.style.color = this.getContrastingColor(this.colorBackground); // \"#DCBFDA\"\n            div.name = \"timer\";\n            this.body.appendChild(div);\n            this.labelTimer = div;\n\n            div.innerHTML = '23:59';\n            this.autoResizeText(div, sizeIcon, sizeIcon, false, 0, 0, 1);\n            div.innerHTML = '';\n            div.title = this.getStringM('js_question_time');\n        }\n\n        onClickSound(btn) {\n            window.title = btn.src;\n            this.kindSound = (this.kindSound + 1) % 2;\n            window.localStorage.setItem(\"kindSound\", toString(this.kindSound));\n            btn.src = this.getMuteFile();\n        }\n\n        createButtonHelp(left, top) {\n            this.buttonHelp = this.createImageButton(this.body, left, top, this.iconSize, this.iconSize, \"\", 'assets/help.svg');\n            this.buttonHelp.alt = this.getStringM('js_help');\n        }\n\n        findbest(low, up, fn) {\n            if (low < 1) {\n                low = 1;\n            }\n\n            let prevSize;\n            let fitSize = low;\n            let testSize;\n            for (let i = 0; i <= 10; i++) {\n                prevSize = low;\n                testSize = (low + up) / 2;\n\n                let cmp = fn(testSize);\n                if (cmp <= 0) {\n                    fitSize = testSize;\n                    low = testSize;\n                } else {\n                    up = testSize;\n                }\n                if (Math.abs((testSize - prevSize) / testSize) < 0.01) {\n                    break;\n                }\n            }\n\n            return fitSize;\n        }\n\n        createDefinition(left, top, width, onlyMetrics, fontSize) {\n\n            width -= 2 * this.padding;\n            let div = document.createElement(\"div\");\n\n            div.style.position = \"absolute\";\n            div.style.width = width + \"px\";\n\n            div.style.fontSize = fontSize + \"px\";\n            // A div.innerHTML = this.repairHTML(this.definition, this.mapFiles, this.mapFilesWidth, this.mapFilesHeight);\n            div.innerHTML = this.definition;\n            div.style.textAlign = \"left\";\n\n            if (onlyMetrics) {\n                this.body.appendChild(div);\n                let ret = [div.scrollWidth - 1, div.scrollHeight];\n                this.body.removeChild(div);\n                return ret;\n            }\n\n            div.style.background = this.getColorHex(this.colorDefinition);\n            div.style.color = this.getContrastingColor(this.colorDefinition);\n            div.style.left = left + \"px\";\n            div.style.top = top + \"px\";\n            div.style.paddingLeft = this.padding + \"px\";\n            div.style.paddingRight = this.padding + \"px\";\n            div.id = \"definition\";\n\n            this.area.appendChild(div);\n            let height = div.scrollHeight + this.padding;\n            div.style.height = height + \"px\";\n\n            this.definitionHeight = height;\n            this.divDefinition = div;\n\n            return [div.scrollWidth - 1, div.scrollHeight];\n        }\n\n        updateLabelTimer() {\n            if (this.labelTimer === undefined) {\n                return;\n            }\n            if (this.timeclose === 0 || this.timestart === 0) {\n                this.labelTimer.innerHTML = '';\n                return;\n            }\n\n            let dif = Math.round(this.timeclose - ((new Date()).getTime()) / 1000);\n            if (dif <= 0) {\n                dif = 0;\n                this.sendTimeout();\n            }\n            const minutes = Math.floor(Math.abs(dif) / 60);\n            const seconds = Math.abs(dif) % 60;\n            const prefix = dif < 0 ? \"-\" : \"\";\n            this.labelTimer.innerHTML = `${prefix}${minutes}:${seconds.toString().padStart(2, '0')}`;\n\n            if (dif === 0) {\n                return;\n            }\n\n            let instance = this;\n            setTimeout(function() {\n                instance.updateLabelTimer();\n            }, 500);\n        }\n\n        createDivMessage(message) {\n            if (this.area !== undefined) {\n                this.body.removeChild(this.area);\n                this.area = undefined;\n            }\n\n            if (this.divMessageHelp !== undefined) {\n                this.body.removeChild(this.divMessageHelp);\n                this.divMessageHelp = undefined;\n            }\n\n            let left = this.padding;\n            let top = this.areaTop;\n            let width = window.innerWidth - 2 * this.padding;\n            let height = window.innerHeight - this.getCopyrightHeight() - this.padding - top;\n\n            this.createDivMessageDo(left, top, width, height, message, height);\n\n            this.divMessage.style.top = (height - this.divMessage.scrollHeight) / 2 + \"px\";\n        }\n\n        createDivMessageStart(message) {\n            if (this.area !== undefined) {\n                this.body.removeChild(this.area);\n                this.area = undefined;\n            }\n\n            let left = this.padding;\n            let top = this.areaTop;\n            let width = window.innerWidth - 2 * this.padding;\n            let height = window.innerHeight - this.getCopyrightHeight() - this.padding - top;\n\n            let height1 = height / 8;\n\n            this.createDivMessageDo(left, top, width, height, message, height1);\n\n            top += (height1 - this.divMessage.scrollHeight) / 2;\n            this.divMessage.style.top = top + \"px\";\n\n            if (this.divMessageHelp === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"left\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.color = this.getContrastingColor(this.colorDefinition);\n                let top = this.iconSize + 3 * this.padding + height1;\n                div.style.top = (top + this.padding) + \"px\";\n                div.style.height = (height - height1) + \"px\";\n                this.divMessageHelp = div;\n                this.body.appendChild(this.divMessageHelp);\n\n                this.showHelpScreen(div, (width - 2 * this.padding), (height - height1));\n            }\n        }\n\n        removeDivMessage() {\n            if (this.divMessage !== undefined) {\n                this.body.removeChild(this.divMessage);\n                this.divMessage = undefined;\n            }\n            if (this.divMessageHelp !== undefined) {\n                this.body.removeChild(this.divMessageHelp);\n                this.divMessageHelp = undefined;\n            }\n            if (this.divMessageBackground !== undefined) {\n                this.divMessageBackground.remove();\n                this.divMessageBackground = undefined;\n            }\n        }\n\n        disableButtons(buttons, disabled) {\n            for (let i = 0; i < buttons.length; i++) {\n                let btn = buttons[i];\n                if (btn !== undefined) {\n                    if (disabled) {\n                        btn.classList.add(\"mmogame_imgbutton_disabled\");\n                    } else {\n                        btn.classList.remove(\"mmogame_imgbutton_disabled\");\n                    }\n                }\n            }\n        }\n\n        repairNickname(nickname) {\n            if (nickname === undefined) {\n                return '';\n            }\n\n            let s = nickname;\n            if (s !== '') {\n                while (s.indexOf('_') !== -1) {\n                    s = s.replace('_', ' ');\n                }\n            }\n\n            return s;\n        }\n\n        showScore(sumscore, rank, name, usercode, addscore, completedrank, percentcompleted) {\n            let s = sumscore === undefined ? '' : '<b>' + sumscore + '</b>';\n            if (this.labelScore.innerHTML !== s) {\n                this.labelScore.innerHTML = s;\n                let w = this.iconSize - 2 * this.padding;\n                this.autoResizeText(this.labelScore, w, this.iconSize / 2, false, 0, 0, 1);\n            }\n\n            if (this.labelScoreRank.innerHTML !== rank) {\n                this.labelScoreRank.innerHTML = rank !== undefined ? rank : '';\n                this.autoResizeText(this.labelScoreRank, this.iconSize, this.iconSize / 3, true, 0, 0, 1);\n            }\n\n            if (name !== undefined) {\n                window.document.title = (usercode !== undefined ? usercode : \"\") + \" \" + name;\n            }\n\n            s = addscore === undefined ? '' : addscore;\n            if (this.labelAddScore.innerHTML !== s) {\n                this.labelAddScore.innerHTML = s;\n                this.autoResizeText(this.labelAddScore, this.iconSize - 2 * this.padding, this.iconSize / 3, false, 0, 0, 1);\n            }\n\n            if (this.labelScoreRankB.innerHTML !== completedrank) {\n                this.labelScoreRankB.innerHTML = completedrank !== undefined ? completedrank : '';\n                this.autoResizeText(this.labelScoreRankB, 0.9 * this.iconSize / 2, this.iconSize / 3, true, 0, 0, 1);\n            }\n\n            s = percentcompleted !== undefined ? Math.round(100 * percentcompleted) + '%' : '';\n            if (this.labelScoreB.innerHTML !== s) {\n                this.labelScoreB.innerHTML = s;\n                this.autoResizeText(this.labelScoreB, 0.8 * this.iconSize / 2, this.iconSize / 3, true, 0, 0, 1);\n            }\n        }\n\n        showColorPalette(canvas, colors) {\n            let ctx = canvas.getContext(\"2d\");\n            let width = canvas.width;\n            let height = canvas.height;\n            let strip = width / 5;\n            let instance = this;\n\n            colors.sort(function(a, b) {\n                return instance.getContrast(a) - instance.getContrast(b);\n            });\n            for (let i = 0; i < 5; i++) {\n                ctx.fillStyle = this.getColorHex(colors[i]);\n                ctx.fillRect(i * strip, 0, (i + 1) * strip, height);\n            }\n\n            ctx.strokeStyle = \"#FFFFFF\";\n            ctx.lineWidth = 1;\n            ctx.strokeRect(0, 0, width, height);\n        }\n\n        setColorsString(s) {\n            let a = [0x9B7ED9, 0x79F2F2, 0x67BF5A, 0xD0F252, 0xBF5B21];\n            if (s !== undefined && s.length >= 0) {\n                let b = s.split(\",\");\n                if (b.length === 5) {\n                    a = b;\n                    for (let i = 0; i < 5; i++) {\n                        a[i] = parseInt(a[i]);\n                    }\n                }\n            }\n            this.setColors(a);\n        }\n\n        computeDifClock(time, timeStart, timeClose) {\n            if (time !== undefined) {\n                this.difClock = ((new Date()).getTime() - time) / 1000;\n            }\n\n            this.computeTimeStartClose(timeStart, timeClose);\n        }\n\n        computeTimeStartClose(timeStart, timeClose) {\n            if (timeStart !== undefined) {\n                this.timestart = parseInt(timeStart) !== 0 ? parseInt(timeStart) + this.difClock : 0;\n                this.timeclose = parseInt(timeClose) !== 0 ? parseInt(timeClose) + this.difClock : 0;\n            } else {\n                this.timestart = 0;\n                this.timeclose = 0;\n            }\n        }\n\n        drawRadio(canvas, color1, color2) {\n            let ctx = canvas.getContext(\"2d\");\n            let size = canvas.width;\n            ctx.clearRect(0, 0, size, canvas.height);\n\n            ctx.beginPath();\n            ctx.arc(size / 2, size / 2, size / 2, 0, 2 * Math.PI, false);\n            ctx.fillStyle = this.getColorHex(color1);\n            ctx.fill();\n\n            let checked = canvas.classList.contains(\"checked\");\n            if (checked) {\n                ctx.beginPath();\n                ctx.arc(size / 2, size / 2, size / 4, 0, 2 * Math.PI, false);\n                ctx.fillStyle = this.getColorHex(color2);\n                ctx.fill();\n            }\n        }\n\n        createRadiobox(parent, size, color1, color2, checked, disabled) {\n            let canvas = document.createElement('canvas');\n            canvas.style.position = \"absolute\";\n            canvas.width = size;\n            canvas.height = size;\n            parent.appendChild(canvas);\n            if (checked) {\n                canvas.classList.add(\"checked\");\n            }\n            if (disabled) {\n                canvas.classList.add(\"disabled\");\n            }\n\n            this.drawRadio(canvas, disabled ? color1 : 0xFFFFFF, color2);\n\n            return canvas;\n        }\n\n        createButtonsAvatar(num, left, widthNickName = 0, heightNickName = 0) {\n            if (widthNickName === 0) {\n                widthNickName = this.iconSize;\n            }\n            if (heightNickName === 0) {\n                heightNickName = this.iconSize - this.buttonAvatarHeight;\n            }\n            if (this.buttonsAvatarLeft === undefined) {\n                this.buttonsAvatarLeft = [];\n            }\n            this.buttonsAvatarLeft[num] = left;\n\n            if (this.buttonsAvatarSrc === undefined) {\n                this.buttonsAvatarSrc = [];\n            }\n            this.buttonsAvatarSrc[num] = \"\";\n\n            if (this.nicknames === undefined) {\n                this.nicknames = [];\n            }\n            this.nicknames[num] = \"\";\n\n            if (this.buttonsAvatar === undefined) {\n                this.buttonsAvatar = [];\n            }\n            this.buttonsAvatar[num] = this.createImageButton(this.body, left, this.avatarTop, this.iconSize, this.iconSize, \"\", \"\");\n            if (num === 2 && this.avatarTop !== undefined) {\n                this.buttonsAvatar[num].title = this.getStringM('js_opponent');\n            }\n\n            if (this.divNicknames === undefined) {\n                this.divNicknames = [];\n            }\n            if (this.divNicknamesWidth === undefined) {\n                this.divNicknamesWidth = [];\n            }\n            if (this.divNicknamesHeight === undefined) {\n                this.divNicknamesHeight = [];\n            }\n            this.divNicknamesWidth[num] = widthNickName;\n            this.divNicknamesHeight[num] = heightNickName;\n\n            this.divNicknames[num] = this.createDiv(this.body, left, this.padding, widthNickName, heightNickName);\n        }\n\n        updateButtonsAvatar(num, avatar, nickname) {\n            if (avatar === undefined) {\n                avatar = \"\";\n            }\n            if (nickname === undefined) {\n                nickname = \"\";\n            }\n\n            if (avatar === \"\" && nickname === \"\") {\n                this.buttonsAvatar[num].style.visibility = 'hidden';\n                this.divNicknames[num].style.visibility = 'hidden';\n                return;\n            }\n\n            if (this.nicknames[num] !== nickname || nickname === \"\") {\n                this.nicknames[num] = nickname;\n                let s = nickname;\n\n                if (nickname.length === 0) {\n                    s = avatar;\n                    let pos = s.lastIndexOf(\"/\");\n                    if (pos >= 0) {\n                        s = s.slice(pos + 1);\n                    }\n                    pos = s.lastIndexOf(\".\");\n                    if (pos >= 0) {\n                        s = s.slice(0, pos);\n                    }\n                    const filenameWithExt = avatar.split('/').pop(); // Extract the file name with its extension\n                    s = filenameWithExt.split('.').slice(0, -1).join('.'); // Remove the extension from the file name\n                }\n                s = this.repairNickname(s);\n                if (this.divNicknames[num] !== undefined && this.divNicknames[num].innerHTML !== s) {\n                    this.divNicknames[num].innerHTML = s;\n                    this.divNicknames[num].style.textAlign = \"center\";\n                    this.divNicknames[num].style.color = this.getContrastingColor(this.colorsBackground);\n                    this.autoResizeText(this.divNicknames[num], this.divNicknamesWidth[num], this.divNicknamesHeight[num], true,\n                        0, 0, 1);\n                }\n            }\n\n            if (avatar !== this.buttonsAvatarSrc[num]) {\n                this.updateImageButton(this.buttonsAvatar[num], this.buttonsAvatarLeft[num], this.buttonAvatarTop, this.iconSize,\n                    this.buttonAvatarHeight, avatar !== \"\" ? \"assets/avatars/\" + avatar : \"\");\n                this.buttonsAvatarSrc[num] = avatar;\n            }\n\n            this.buttonsAvatar[num].alt = this.divNicknames[num].innerHTML;\n\n            this.buttonsAvatar[num].style.visibility = 'visible';\n            this.divNicknames[num].style.visibility = 'visible';\n        }\n\n        gateOpen(mmogameid, pin, kinduser, user, url) {\n            this.url = url;\n            this.minFontSize *= 2;\n            this.maxFontSize *= 2;\n\n            // Saves parameters to class variables.\n            this.mmogameid = mmogameid;\n            this.pin = pin;\n            this.kinduser = kinduser;\n            this.user = user;\n            this.gateComputeSizes();\n\n            this.areaTop = this.padding;\n            this.areaWidth = Math.round(window.innerWidth - 2 * this.padding);\n            this.areaHeight = Math.round(window.innerHeight - this.areaTop) - this.padding;\n\n            let instance = this;\n            this.getOptions().then(function(options) {\n                if (!options.hasOwnProperty('kindsound')) {\n                    options.kindsound = 0;\n                }\n                instance.kindSound = options.kindSound === 1 || options.kindSound === 2 ? options.kindSound : 0;\n\n                if (!options.hasOwnProperty('nickname')) {\n                    options.nickname = '';\n                }\n                options.avatarid = options.hasOwnProperty('avatarid') && options.avatarid !== undefined ? options.avatarid : 0;\n                options.paletteid = options.hasOwnProperty('paletteid') ? options.paletteid : 0;\n\n                switch (kinduser) {\n                    case 'moodle':\n                        if (options.nickname !== '' && options.avatarid !== 0 && options.paletteid !== 0) {\n                            instance.gatePlayGame(false, options.nickname, options.paletteid, options.avatarid);\n                            return true;\n                        }\n                        break;\n                    case 'guid':\n                        if (!options.hasOwnProperty('userGUID')) {\n                            options.userGUID = '';\n                        }\n                        if (options.userGUID.length >= 10 && options.nickname !== '' && options.avatarid !== 0 &&\n                            options.paletteid !== 0) {\n                            instance.user = options.userGUID;\n                            instance.gatePlayGame(false, options.nickname, options.paletteid, options.avatarid);\n                            return true;\n                        }\n                        break;\n                }\n                // Call gateCreateScren to ask user for nickname, colors, avatar.\n                instance.gateCreateScreen();\n                return true;\n            }).catch(error => {\n                instance.showError(error.message);\n                return false;\n            });\n        }\n\n        gatePlayGame(save, nickname, paletteid, avatarid) {\n            if (this.kinduser === 'guid') {\n                if (this.user === '') {\n                    this.uuid4();\n                }\n            }\n\n            if (!save) {\n                this.nickname = nickname;\n                this.paletteid = paletteid;\n                this.avatarid = avatarid;\n                this.callGetAttempt({nickname: nickname, colorpaletteid: paletteid, avatarid: avatarid});\n                return;\n            }\n\n            let options = {nickname: nickname, avatarid: avatarid, paletteid: paletteid};\n\n            let instance = this;\n            this.saveOptions(options)\n                .then(function() {\n                    instance.nickname = nickname;\n                    instance.paletteid = paletteid;\n                    instance.avatarid = avatarid;\n                    instance.callGetAttempt();\n                    return true;\n                })\n                .catch(error => {\n                    instance.showError(error.message);\n                    return false;\n                });\n        }\n\n        callGetAttempt(extraparams) {\n            let instance = this;\n            require(['core/ajax'], function(Ajax) {\n                let params = {\n                    mmogameid: instance.mmogameid,\n                    kinduser: instance.kinduser,\n                    user: instance.user,\n                    nickname: null,\n                    colorpaletteid: null,\n                    avatarid: null,\n                };\n                if (extraparams !== undefined) {\n                    params = {...params, ...extraparams};\n                }\n                // Calling the service through the Moodle AJAX API\n                let getAttempt = Ajax.call([{\n                    methodname: 'mmogametype_quiz_get_attempt',\n                    args: params,\n                }]);\n\n                // Handling the response\n                getAttempt[0].done(function(response) {\n                    if (extraparams !== undefined && extraparams.colorpaletteid !== undefined) {\n                        instance.openGame();\n                        instance.colors = undefined;\n                    }\n                    instance.processGetAttempt(JSON.parse(response));\n                }).fail(function(error) {\n                    instance.createDivMessage(error.message);\n                    return error;\n                });\n            });\n        }\n\n        gateCreateScreen() {\n            this.vertical = window.innerWidth < window.innerHeight;\n\n            this.createArea();\n\n            if (this.vertical) {\n                this.gateCreateScreenVertical();\n            } else {\n                this.gateCreateScreenHorizontal();\n            }\n        }\n\n        gateCreateScreenVertical() {\n            let maxHeight = this.areaHeight - 5 * this.padding - this.iconSize;\n            let maxWidth = this.areaWidth;\n            let instance = this;\n            let size;\n\n            const labels = [this.getStringM('js_name') + \": \", this.getStringM('js_code'), this.getStringM('js_palette')];\n            this.fontSize = this.findbest(this.minFontSize, this.maxFontSize, function(fontSize) {\n                size = instance.gateComputeLabelSize(fontSize, labels);\n\n                if (size[0] >= maxWidth) {\n                    return 1;\n                }\n                let heightCode = instance.kinduser !== 'guid' && instance.kinduser !== 'moodle' ? size[1] + instance.padding : 0;\n\n                let heightColors = (maxHeight - 4 * fontSize) * 2 / 5;\n                let n = Math.floor(heightColors / instance.iconSize);\n                if (n === 0) {\n                    return 1;\n                }\n                let heightAvatars = (maxHeight - 4 * fontSize + heightColors) * 3 / 5;\n                let computedHeight = heightCode + 3 * size[1] + 8 * instance.padding + heightColors + heightAvatars;\n\n                return computedHeight < maxHeight ? -1 : 1;\n            });\n\n            let gridWidthColors = maxWidth - this.padding;\n            let gridWidthAvatars = maxWidth - this.padding;\n            let gridHeightColors = (maxHeight - 4 * this.fontSize) * 2 / 5;\n            let newHeight = Math.floor(gridHeightColors / instance.iconSize) * instance.iconSize;\n            let newWidth = Math.floor(gridWidthColors / instance.iconSize) * instance.iconSize;\n            let rest = gridHeightColors - newHeight;\n            gridHeightColors = newHeight;\n            let gridHeightAvatars = (maxHeight - 4 * this.fontSize + rest) * 3 / 5;\n\n            let bottom;\n            if (this.kinduser !== 'guid' && this.kinduser !== 'moodle') {\n                // A bottom = this.gateCreateCode(0, 0, maxWidth, this.fontSize, size[0]);\n                bottom = this.gateCreateLabelEditVertical(0, 0, maxWidth, this.fontSize, size[0],\n                    this.getStringM('js_code') + \": \") + 2 * this.padding;\n                this.edtCode = this.edt;\n                this.edtCode.addEventListener(\"keyup\", function() {\n                    instance.gateUpdateSubmit();\n                });\n            } else {\n                bottom = 0;\n            }\n\n            bottom = this.gateCreateLabelEditVertical(0, bottom, newWidth - 2 * this.padding, this.fontSize, size[0],\n                this.getStringM('js_name') + \": \") + 2 * this.padding;\n            this.edtNickname = this.edt;\n            this.edtNickname.addEventListener(\"keyup\", function() {\n                instance.gateUpdateSubmit();\n            });\n\n            this.gateCreateScreenPalette(bottom, gridWidthColors, gridHeightColors,\n                gridWidthAvatars, gridHeightAvatars);\n\n            bottom += this.fontSize + this.padding;\n\n            // Vertical\n            this.gateSendGetColorsAvatars(0, bottom, gridWidthColors, gridHeightColors,\n                0, bottom + gridHeightColors + this.fontSize + this.padding, gridWidthAvatars,\n                gridHeightAvatars);\n\n            let bottom2 = bottom + gridHeightColors + this.fontSize + this.padding + gridHeightAvatars;\n\n            this.gateCreateButtonSubmit(maxWidth, bottom2);\n        }\n\n        gateCreateScreenHorizontal() {\n            let maxHeight = this.areaHeight - 7 * this.padding - this.iconSize;\n            let maxWidth = this.areaWidth;\n            let instance = this;\n            let size;\n\n            const sName = this.getStringM('js_name') + \": \";\n            let labels = [this.getStringM('js_code'), sName, this.getStringM('js_palette')];\n\n            this.fontSize = this.findbest(this.minFontSize, this.maxFontSize, function(fontSize) {\n                size = instance.gateComputeLabelSize(fontSize, labels);\n\n                if (size[0] >= maxWidth) {\n                    return 1;\n                }\n                let heightCode = instance.kinduser !== 'guid' && instance.kinduser !== 'moodle' ? size[1] + instance.padding : 0;\n\n                let heightColors = (maxHeight - 4 * fontSize) * 2 / 5;\n                let n = Math.floor(heightColors / instance.iconSize);\n                if (n === 0) {\n                    return 1;\n                }\n                let heightAvatars = (maxHeight - 4 * fontSize + heightColors) * 3 / 5;\n                let computedHeight = heightCode + 2 * size[1] + 7 * instance.padding + heightColors + heightAvatars;\n\n                return computedHeight < maxHeight ? -1 : 1;\n            });\n\n            let gridWidthColors = maxWidth - this.padding;\n            let gridWidthAvatars = maxWidth - this.padding;\n            let gridHeightColors = (maxHeight - 4 * this.fontSize) * 2 / 5;\n            let newHeight = Math.floor(gridHeightColors / instance.iconSize) * instance.iconSize;\n            let newWidth = Math.floor(gridWidthColors / instance.iconSize) * instance.iconSize;\n            let rest = gridHeightColors - newHeight;\n            gridHeightColors = newHeight;\n            let gridHeightAvatars = Math.floor((maxHeight - 4 * this.fontSize) * 3 / 5 + rest);\n\n            let bottom;\n            if (this.kinduser !== 'guid' && this.kinduser !== 'moodle') {\n                // B bottom = this.gateCreateCode(0, 0, maxWidth, this.fontSize, size[0]);\n                bottom = this.gateCreateLabelEditVertical(0, 0, maxWidth, this.fontSize, size[0],\n                    this.getStringM('js_code')) + 2 * this.padding;\n                this.edtCode = this.edt;\n                this.edtCode.addEventListener(\"keyup\", function() {\n                    instance.gateUpdateSubmit();\n                });\n            } else {\n                bottom = 0;\n            }\n            let sizeLabel = this.gateComputeLabelSize(this.fontSize, [sName]);\n            bottom = this.gateCreateLabelEditHorizontal(0, bottom, newWidth - 2 * this.padding,\n                this.fontSize, sizeLabel[0], this.getStringM('js_name') + \": \");\n\n            this.edtNickname = this.edt;\n\n            this.edtNickname.addEventListener(\"keyup\", function() {\n                instance.gateUpdateSubmit();\n            });\n\n            let label1 = document.createElement(\"label\");\n            label1.style.position = \"absolute\";\n            label1.innerHTML = this.getStringM('js_palette');\n            label1.style.font = \"FontAwesome\";\n            label1.style.fontSize = this.fontSize + \"px\";\n            label1.style.width = \"0px\";\n            label1.style.whiteSpace = \"nowrap\";\n            this.area.appendChild(label1);\n\n            // Button refresh color palettes\n            let btn = this.createImageButton(this.area, label1.scrollWidth + this.padding, bottom,\n                this.iconSize, this.fontSize,\n                '', 'assets/refresh.svg', false, 'refresh');\n            this.addEventListenerRefresh(btn, bottom, gridWidthColors, gridHeightColors,\n                gridWidthAvatars, gridHeightAvatars, true, false);\n\n            label1.style.left = 0;\n            label1.style.color = this.getContrastingColor(this.colorBackground);\n            label1.style.top = bottom + \"px\";\n            bottom += this.fontSize + this.padding;\n\n            let label = document.createElement(\"label\");\n            label.style.position = \"absolute\";\n            label.innerHTML = this.getStringM('js_avatars');\n            label.style.font = \"FontAwesome\";\n            label.style.fontSize = this.fontSize + \"px\";\n            label.style.width = \"0 px\";\n            label.style.whiteSpace = \"nowrap\";\n            this.area.appendChild(label);\n\n            // Button refresh avatars\n            btn = this.createImageButton(this.area, label.scrollWidth + this.padding, bottom + gridHeightColors, this.iconSize,\n                this.fontSize, '', 'assets/refresh.svg', false, 'refresh');\n            btn.addEventListener(\"click\",\n                function() {\n                    let elements = instance.area.getElementsByClassName(\"mmogame_avatar\");\n\n                    while (elements[0]) {\n                        elements[0].parentNode.removeChild(elements[0]);\n                    }\n\n                    instance.gateSendGetColorsAvatars(0, bottom, gridWidthColors, gridHeightColors, 0,\n                        bottom + gridHeightColors + instance.fontSize + instance.padding, gridWidthAvatars, gridHeightAvatars,\n                        false, true);\n                }\n            );\n\n            // Avatar\n            label.style.left = \"0 px\";\n            label.style.color = this.getContrastingColor(this.colorBackground);\n            label.style.top = (bottom + gridHeightColors) + \"px\";\n\n            // Horizontal\n            this.gateSendGetColorsAvatars(0, bottom, gridWidthColors, gridHeightColors,\n                0, bottom + gridHeightColors + this.fontSize + this.padding, gridWidthAvatars,\n                gridHeightAvatars);\n\n            let bottom2 = bottom + gridHeightColors + this.fontSize + this.padding + gridHeightAvatars;\n            this.btnSubmit = this.createImageButton(this.area, (maxWidth - this.iconSize) / 2, bottom2, 0,\n                this.iconSize, \"\", 'assets/submit.svg', false, 'submit');\n            this.btnSubmit.style.visibility = 'hidden';\n            this.btnSubmit.addEventListener(\"click\",\n                function() {\n                    if (instance.edtCode !== undefined) {\n                        instance.user = instance.edtCode.value;\n                    }\n                    instance.gatePlayGame(true, instance.edtNickname.value, instance.paletteid, instance.avatarid);\n                });\n        }\n\n        gateComputeLabelSize(fontSize, aLabel) {\n            let maxWidth = 0;\n            let maxHeight = 0;\n\n            for (let i = 0; i < aLabel.length; i++) {\n                const label = document.createElement(\"label\");\n                label.style.position = \"absolute\";\n                label.innerHTML = aLabel[i];\n                label.style.whiteSpace = \"nowrap\";\n                label.style.font = \"FontAwesome\";\n                label.style.fontSize = fontSize + \"px\";\n                label.style.width = \"0px\";\n                label.style.height = \"0px\";\n                this.area.appendChild(label);\n\n                if (label.scrollWidth > maxWidth) {\n                    maxWidth = label.scrollWidth;\n                }\n\n                if (label.scrollHeight > maxHeight) {\n                    maxHeight = label.scrollHeight;\n                }\n                this.area.removeChild(label);\n            }\n\n            return [maxWidth, maxHeight];\n        }\n\n        gateCreateLabel(left, top, labelWidth, fontSize, title) {\n            const label = document.createElement('label');\n            label.style.position = \"absolute\";\n\n            label.innerHTML = title;\n\n            label.style.font = \"FontAwesome\";\n            label.style.fontSize = fontSize + \"px\";\n\n            this.area.appendChild(label);\n\n            label.style.position = \"absolute\";\n            label.style.left = left + \"px\";\n            label.style.top = top + \"px\";\n            label.style.width = labelWidth + \"px\";\n            label.style.align = \"left\";\n            label.style.color = this.getContrastingColor(this.colorBackground);\n\n            return label;\n        }\n        gateCreateLabelEditVertical(left, top, width, fontSize, labelWidth, title) {\n            const label = this.gateCreateLabel(left, top, labelWidth, fontSize, title);\n\n            top += label.scrollHeight;\n\n            this.edt = this.gateCreateInput(left, top, width, fontSize);\n\n            return top + fontSize + this.padding;\n        }\n\n        gateShowAvatars(left, top, width, height, countX, avatarids, avatars) {\n            if (!avatars || avatars.length === 0) {\n                return; // Exit early if no avatars exist\n            }\n\n            this.avatar = undefined;\n            const count = avatars.length;\n            let leftOriginal = left;\n            let w = Math.round(this.padding / 2) + \"px\";\n            for (let i = 0; i < count; i++) {\n                let avatarImagePath = 'assets/avatars/' + avatars[i];\n                let btn = this.createCenterImageButton(\n                    this.area,\n                    left, top,\n                    this.iconSize - this.padding, this.iconSize - this.padding,\n                    \"\",\n                    avatarImagePath\n                );\n                btn.classList.add(\"mmogame_avatar\");\n                let id = avatarids[i];\n                btn.addEventListener(\"click\", () => {\n                    this.gateUpdateAvatar(btn, id, w);\n                });\n\n                // Move left position after placing the button\n                left += this.iconSize;\n\n                // Reset left and move to the next row after filling countX buttons\n                if ((i + 1) % countX === 0) {\n                    top += this.iconSize;\n                    left = leftOriginal;\n                }\n            }\n        }\n\n        gateSendGetColorsAvatars(leftColors, topColors, gridWidthColors, gridHeightColors, leftAvatars, topAvatars,\n                                         gridWidthAvatars, gridHeightAvatars, updateColors = true, updateAvatars = true) {\n\n            let countXcolors = Math.floor(gridWidthColors / this.iconSize);\n            let countYcolors = Math.floor(gridHeightColors / this.iconSize);\n\n            let countXavatars = Math.floor(gridWidthAvatars / this.iconSize);\n            let countYavatars = Math.floor((gridHeightAvatars + 2 * this.padding) / this.iconSize);\n\n            if (!updateColors) {\n                countXcolors = countXcolors = 0;\n            }\n            if (!updateAvatars) {\n                countXavatars = countYavatars = 0;\n            }\n\n            let instance = this;\n            require(['core/ajax'], function(Ajax) {\n                // Defining the parameters to be passed to the service\n                let params = {\n                    mmogameid: instance.mmogameid,\n                    kinduser: instance.kinduser,\n                    user: instance.user,\n                    avatars: countXavatars * countYavatars,\n                    colorpalettes: countXcolors * countYcolors,\n                };\n\n                // Calling the service through the Moodle AJAX API\n                let getAssets = Ajax.call([{\n                    methodname: 'mod_mmogame_get_assets',\n                    args: params\n                }]);\n\n                // Handling the response\n                getAssets[0].done(function(response) {\n                    if (updateColors) {\n                        instance.gateShowColorPalettes(leftColors, topColors, gridWidthColors,\n                            gridHeightColors, countXcolors, countYcolors, response.colorpaletteids, response.colorpalettes);\n                    }\n                    if (updateAvatars) {\n                        instance.gateShowAvatars(leftAvatars, topAvatars, gridWidthAvatars, gridHeightAvatars, countXavatars,\n                            response.avatarids, response.avatars);\n                    }\n                }).fail(function(error) {\n                    return error;\n                });\n            });\n        }\n\n        gateShowColorPalettes(left, top, width, height, countX, countY, colorpaletteids, colorpalettes) {\n            let i = 0; // Counter for color palettes\n            const count = colorpalettes.length;\n            this.canvasColor = undefined;\n            const canvasSize = this.iconSize - this.padding * 3 / 2;\n            const parsedPalettes = colorpalettes.map(palette =>\n                palette.split(\",\").map(value => parseInt(value, 10) || 0)\n            );\n            for (let iy = 0; iy < countY; iy++) {\n                for (let ix = 0; ix < countX; ix++) {\n                    // Check if we exceed available palettes or encounter invalid data\n                    if (i >= count || !parsedPalettes[i] || !colorpaletteids[i]) {\n                        i++; // Increment and continue if invalid\n                        continue;\n                    }\n\n                    // Create a new canvas element\n                    let canvas = document.createElement('canvas');\n                    canvas.style.position = \"absolute\";\n                    canvas.style.left = `${left + ix * this.iconSize}px`;\n                    canvas.style.top = `${top + iy * this.iconSize}px`;\n                    canvas.width = canvasSize;\n                    canvas.height = canvasSize;\n                    canvas.style.cursor = 'pointer';\n                    canvas.classList.add(\"mmogame_color\");\n\n                    // Append canvas to the area\n                    this.area.appendChild(canvas);\n\n                    // Render the color palette on the canvas\n                    this.showColorPalette(canvas, parsedPalettes[i]);\n\n                    // Get the palette ID and attach a click event listener\n                    let id = colorpaletteids[i];\n                    canvas.addEventListener(\"click\", () => {\n                        this.gateUpdateColorPalette(canvas, id);\n                    });\n\n                    i++;\n                }\n            }\n            this.area.classList.add(\"palette\");\n        }\n\n        gateUpdateColorPalette(canvas, id) {\n            if (this.canvasColor !== undefined) {\n                this.canvasColor.style.borderStyle = \"none\";\n            }\n            this.canvasColor = canvas;\n            canvas.style.borderStyle = \"outset\";\n            let w = Math.round(this.padding / 2) + \"px\";\n            canvas.style.borderLeftWidth = w;\n            canvas.style.borderTopWidth = w;\n            canvas.style.borderRightWidth = w;\n            canvas.style.borderBottomWidth = w;\n\n            this.paletteid = id;\n\n            this.gateUpdateSubmit();\n        }\n\n        gateUpdateAvatar(avatar, id, w) {\n            if (this.avatar !== undefined) {\n                this.avatar.style.borderStyle = \"none\";\n            }\n            this.avatar = avatar;\n            avatar.style.borderStyle = \"outset\";\n\n            avatar.style.borderLeftWidth = w;\n            avatar.style.borderTopWidth = w;\n            avatar.style.borderRightWidth = w;\n            avatar.style.borderBottomWidth = w;\n\n            this.avatarid = id;\n\n            this.gateUpdateSubmit();\n        }\n\n        gateUpdateSubmit() {\n            let hasCode = this.edtCode === undefined ? true : parseInt(this.edtCode.value) > 0;\n            let visible = this.avatarid !== undefined && this.paletteid !== undefined && hasCode\n                && this.edtNickname.value.length > 0;\n\n            this.btnSubmit.style.visibility = visible ? 'visible' : 'hidden';\n        }\n\n        gateComputeSizes() {\n            this.computeSizes();\n            this.iconSize = Math.round(0.8 * this.iconSize);\n            this.padding = Math.round(0.8 * this.padding);\n        }\n\n        getStringM(name) {\n            return M.util.get_string(name, 'mmogame');\n        }\n\n        gateCreateLabelEditHorizontal(left, top, width, fontSize, labelWidth, title) {\n            const label = this.gateCreateLabel(left, top, labelWidth, fontSize, title);\n\n            let ret = top + Math.max(label.scrollHeight, fontSize) + this.padding;\n\n            let leftEdit = (left + labelWidth + this.padding);\n            this.edt = this.gateCreateInput(leftEdit, top, width - leftEdit - this.padding, fontSize);\n\n            return ret;\n        }\n\n        createDivMessageDo(left, top, width, height, message, heightmessage) {\n            if (this.divMessageBackground === undefined) {\n                let div = this.createDiv(this.body, left, top, width, height);\n                div.style.background = this.getColorHex(this.colorDefinition);\n                this.divMessageBackground = div;\n            }\n\n            if (this.divMessage === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"center\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.background = this.getColorHex(this.colorDefinition);\n                div.style.color = this.getContrastingColor(this.colorDefinition);\n                this.divMessage = div;\n            }\n            this.divMessage.innerHTML = message;\n            this.body.appendChild(this.divMessage);\n            this.autoResizeText(this.divMessage, width, heightmessage, false, this.minFontSize, this.maxFontSize, 0.5);\n        }\n\n        getOptions() {\n            return new Promise((resolve, reject) => {\n                let request = indexedDB.open(\"PreferencesDB\", 4); // Άνοιγμα της βάσης δεδομένων\n\n                request.onupgradeneeded = function(event) {\n                    let db = event.target.result;\n                    // Δημιουργία του object store \"options\" αν δεν υπάρχει\n                    if (!db.objectStoreNames.contains(\"options\")) {\n                        db.createObjectStore(\"options\", {keyPath: \"name\"});\n                    }\n                };\n\n                request.onsuccess = function(event) {\n                    let db = event.target.result;\n\n                    let transaction = db.transaction([\"options\"], \"readonly\"); // Δημιουργία συναλλαγής ανάγνωσης\n                    let store = transaction.objectStore(\"options\");\n\n                    let getAllRequest = store.getAll(); // Διαβάζει όλες τις εγγραφές από το object store\n\n                    getAllRequest.onsuccess = function(event) {\n                        let records = event.target.result; // Όλες οι εγγραφές από το object store\n                        if (records.length > 0) {\n                            // Μετατροπή σε object με τα name ως κλειδιά\n                            let optionsObject = {};\n                            records.forEach(record => {\n                                optionsObject[record.name] = record.value;\n                            });\n                            resolve(optionsObject); // Επιστροφή του αντικειμένου\n                        } else {\n                            resolve({}); // Επιστροφή άδειου αντικειμένου αν δεν υπάρχουν εγγραφές\n                        }\n                    };\n\n                    getAllRequest.onerror = function() {\n                        reject(new Error(\"Failed to read options\"));\n                    };\n                };\n\n                request.onerror = function() {\n                    resolve({});\n                };\n            });\n        }\n\n        saveOptions(optionsObject) {\n            return new Promise((resolve, reject) => {\n                let request = indexedDB.open(\"PreferencesDB\", 4);\n\n                request.onsuccess = function(event) {\n                    let db = event.target.result;\n\n                    let transaction = db.transaction([\"options\"], \"readwrite\"); // Δημιουργία συναλλαγής για εγγραφή\n                    let store = transaction.objectStore(\"options\");\n\n                    // Για κάθε ζεύγος name-value στο αντικείμενο, το αποθηκεύουμε στην IndexedDB\n                    for (let name in optionsObject) {\n                        if (optionsObject.hasOwnProperty(name)) {\n                            let value = optionsObject[name];\n                            store.put({name: name, value: value});\n                        }\n                    }\n\n                    // Επιτυχής ολοκλήρωση της συναλλαγής\n                    transaction.oncomplete = function() {\n                        resolve();\n                    };\n\n                    transaction.onerror = function() {\n                        reject(new Error(\"Failed to save options\"));\n                    };\n                };\n\n                request.onerror = function() {\n                    reject(new Error(\"Failed to open database\"));\n                };\n            });\n        }\n\n        showError(message) {\n            this.createDivMessage(message);\n        }\n\n        createArea() {\n            if (this.area !== undefined) {\n                this.body.removeChild(this.area);\n                this.area = undefined;\n            }\n            this.removeDivMessage();\n\n            this.area = this.createDiv(this.body, this.padding, this.areaTop, this.areaWidth, this.areaHeight);\n        }\n\n        clearDB(url) {\n            let options = {nickname: ''};\n            this.saveOptions(options)\n                .then(function() {\n                    window.location.href = url;\n                    return true;\n                })\n                .catch(() => {\n                    return false;\n                });\n\n        }\n\n        gateCreateInput(left, top, width, fontSize) {\n            const div = document.createElement(\"input\");\n            div.style.position = \"absolute\";\n            div.style.width = width + \"px\";\n            div.style.type = \"text\";\n            div.style.fontSize = fontSize + \"px\";\n\n            div.style.left = left + \"px\";\n            div.style.top = top + \"px\";\n            div.autofocus = true;\n\n            this.area.appendChild(div);\n            this.edt = div;\n\n            return div;\n        }\n\n        createAddScore(left, top, width, height, num) {\n            const div = this.createDiv(this.body, left, top, width, height);\n            div.style.textAlign = \"center\";\n            div.style.color = this.getContrastingColor(this.colorScore);\n            div.title = this.getStringM('js_grade_last_question');\n            if (num === 1) {\n                this.labelAddScore = div;\n            } else {\n                this.labelAddScore2 = div;\n            }\n        }\n\n        gateCreateScreenPalette(bottom, gridWidthColors, gridHeightColors, gridWidthAvatars, gridHeightAvatars) {\n            const label = document.createElement(\"label\");\n            label.style.position = \"absolute\";\n            label.innerHTML = this.getStringM('js_palette');\n            label.style.font = \"FontAwesome\";\n            label.style.fontSize = this.fontSize + \"px\";\n            label.style.width = \"0px\";\n            label.style.whiteSpace = \"nowrap\";\n            this.area.appendChild(label);\n\n            let btn = this.createImageButton(this.area, label.scrollWidth + this.padding, bottom, this.iconSize, this.fontSize,\n                '', 'assets/refresh.svg', false, 'refresh');\n            this.addEventListenerRefresh(btn, bottom, gridWidthColors, gridHeightColors, gridWidthAvatars, gridHeightAvatars);\n\n            label.style.left = 0;\n            label.style.color = this.getContrastingColor(this.colorBackground);\n            label.style.top = bottom + \"px\";\n        }\n\n        gateCreateButtonSubmit = (maxWidth, bottom2) => {\n            this.btnSubmit = this.createImageButton(this.area, (maxWidth - this.iconSize) / 2, bottom2, 0,\n                this.iconSize, \"\", 'assets/submit.svg', false, 'submit');\n            this.btnSubmit.style.visibility = 'hidden';\n            const instance = this;\n            this.btnSubmit.addEventListener(\"click\", function() {\n                if (instance.edtCode !== undefined) {\n                    instance.user = instance.edtCode.value;\n                }\n                instance.gatePlayGame(true, instance.edtNickname.value, instance.paletteid, instance.avatarid);\n            });\n        };\n\n        addEventListenerRefresh(btn, bottom, gridWidthColors, gridHeightColors, gridWidthAvatars, gridHeightAvatars,\n                                updateColors, updateAvatars) {\n            const instance = this;\n            btn.addEventListener(\"click\",\n                function() {\n                    let elements = instance.area.getElementsByClassName(\"mmogame_color\");\n\n                    while (elements[0]) {\n                        elements[0].parentNode.removeChild(elements[0]);\n                    }\n\n                    instance.gateSendGetColorsAvatars(0, bottom, gridWidthColors, gridHeightColors,\n                        0, bottom + gridHeightColors + instance.fontSize + instance.padding, gridWidthAvatars, gridHeightAvatars,\n                        updateColors, updateAvatars);\n                }\n            );\n        }\n    };\n});"],"names":["define","constructor","document","body","undefined","maxWidth","bottom2","btnSubmit","this","createImageButton","area","iconSize","style","visibility","instance","addEventListener","edtCode","user","value","gatePlayGame","edtNickname","paletteid","avatarid","getElementsByTagName","kindSound","size","parseFloat","window","getComputedStyle","documentElement","getPropertyValue","minFontSize","maxFontSize","fontSize","createElement","tag","parent","left","top","width","height","classname","attributes","element","position","trim","classList","add","split","key","Object","entries","assign","setAttribute","appendChild","createDiv","createImage","filename","src","draggable","createCenterImageButton","button","img","Image","onload","mul","Math","min","w","round","h","createButton","alt","role","className","createDivButton","createButtonSound","buttonSound","getMuteFile","getStringM","onClickSound","hasHelp","clearBodyChildren","removeDivMessage","firstChild","removeChild","lastChild","openGame","computeSizes","updateImageButton","playAudio","audioElement","networkState","play","autoResizeText","item","wrap","minRatio","minHeight","low","max","up","fitSize","fitHeight","newHeight","newWidth","i","el","whiteSpace","innerHTML","scrollHeight","scrollWidth","abs","autoResizeTextBr","autoResizeTextImage","s","change","startsWith","substring","pos1","indexOf","pos","subwidth","subheight","pos2","pos3","s2","posw","posw2","num","slice","replace","parseInt","ratio","pad","length","uuid4","uuid","Array","floor","random","map","x","join","options","userGUID","saveOptions","then","catch","error","showError","message","cIcons","maxIconWidth","innerWidth","maxIconHeight","innerHeight","adjustment","padding","getIconSize","getCopyrightHeight","getPadding","getColorHex","colorCode","toString","padStart","toUpperCase","getContrast","getColorGray","yiq","gray","getContrastingColor","repairColors","colors","sort","a","b","colorBackground","background","repairP","createDivScore","borderRadius","border","boxShadow","title","colorScore","color","buttonScore2","colorScore2","div","lineHeight","textAlign","labelScore","labelScore2","disabled","labelScoreRank","labelScoreRank2","createAddScore","createDivScorePercent","label","fontFamily","labelScoreRankB","labelAddScore","labelAddScore2","fontWeight","labelScoreB","createDivTimer","sizeIcon","name","labelTimer","btn","localStorage","setItem","createButtonHelp","buttonHelp","findbest","fn","prevSize","testSize","createDefinition","onlyMetrics","definition","ret","colorDefinition","paddingLeft","paddingRight","id","definitionHeight","divDefinition","updateLabelTimer","timeclose","timestart","dif","Date","getTime","sendTimeout","minutes","seconds","prefix","setTimeout","createDivMessage","divMessageHelp","areaTop","createDivMessageDo","divMessage","createDivMessageStart","height1","showHelpScreen","divMessageBackground","remove","disableButtons","buttons","repairNickname","nickname","showScore","sumscore","rank","usercode","addscore","completedrank","percentcompleted","showColorPalette","canvas","ctx","getContext","strip","fillStyle","fillRect","strokeStyle","lineWidth","strokeRect","setColorsString","setColors","computeDifClock","time","timeStart","timeClose","difClock","computeTimeStartClose","drawRadio","color1","color2","clearRect","beginPath","arc","PI","fill","contains","createRadiobox","checked","createButtonsAvatar","widthNickName","heightNickName","buttonAvatarHeight","buttonsAvatarLeft","buttonsAvatarSrc","nicknames","buttonsAvatar","avatarTop","divNicknames","divNicknamesWidth","divNicknamesHeight","updateButtonsAvatar","avatar","lastIndexOf","pop","colorsBackground","buttonAvatarTop","gateOpen","mmogameid","pin","kinduser","url","gateComputeSizes","areaWidth","areaHeight","getOptions","hasOwnProperty","kindsound","gateCreateScreen","save","callGetAttempt","colorpaletteid","extraparams","require","Ajax","params","call","methodname","args","done","response","processGetAttempt","JSON","parse","fail","vertical","createArea","gateCreateScreenVertical","gateCreateScreenHorizontal","maxHeight","labels","gateComputeLabelSize","heightCode","heightColors","heightAvatars","gridWidthColors","gridWidthAvatars","gridHeightColors","rest","bottom","gridHeightAvatars","gateCreateLabelEditVertical","edt","gateUpdateSubmit","gateCreateScreenPalette","gateSendGetColorsAvatars","gateCreateButtonSubmit","sName","sizeLabel","gateCreateLabelEditHorizontal","label1","font","addEventListenerRefresh","elements","getElementsByClassName","parentNode","aLabel","gateCreateLabel","labelWidth","align","gateCreateInput","gateShowAvatars","countX","avatarids","avatars","count","leftOriginal","avatarImagePath","gateUpdateAvatar","leftColors","topColors","leftAvatars","topAvatars","updateColors","updateAvatars","countXcolors","countYcolors","countXavatars","countYavatars","colorpalettes","gateShowColorPalettes","colorpaletteids","countY","canvasColor","canvasSize","parsedPalettes","palette","iy","ix","cursor","gateUpdateColorPalette","borderStyle","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","hasCode","visible","M","util","get_string","leftEdit","heightmessage","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","db","target","result","objectStoreNames","createObjectStore","keyPath","onsuccess","getAllRequest","transaction","objectStore","getAll","records","optionsObject","forEach","record","onerror","Error","store","put","oncomplete","clearDB","location","href","type","autofocus"],"mappings":"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"}