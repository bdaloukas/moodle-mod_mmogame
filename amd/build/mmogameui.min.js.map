{"version":3,"file":"mmogameui.min.js","sources":["../src/mmogameui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mod_mmogame/mmogame'], function(MmoGame) {\n    return class MmoGameUI extends MmoGame {\n\n        isVertical;\n        kindSound; // Type: Number (0 = on, 1 = off, 2 = speak)\n        buttonSound;\n        colorBackground2;\n\n        // Other\n        nickname;\n        user;\n        paletteid;\n        avatarid;\n        iconSize;\n        padding;\n\n        // Area\n        area;\n        areaRect;\n\n        // Form fields\n        edtNickname;\n\n        // Gate variables\n        mmogameid;\n\n        // Messages\n        divMessage;\n        divMessageHelp;\n        divMessageBackground;\n\n        constructor() {\n            super();\n            this.isVertical = window.innerWidth < window.innerHeight;\n            this.area = undefined;\n        }\n\n        /**\n         * Returns the appropriate file for mute/unmute.\n         * @returns {string} The file path.\n         */\n        getMuteFile() {\n            return this.kindSound === 0 ? 'assets/sound-on-flat.png' : 'assets/sound-off-flat.png';\n        }\n\n        /**\n         * Plays a sound file if sound is enabled.\n         *\n         * @param {HTMLAudioElement} audioElement - The audio element to play.\n         */\n        async playAudio(audioElement) {\n            if (this.kindSound !== 0 && audioElement) {\n                try {\n                    await audioElement.play();\n                } catch (error) {\n                    this.showError(\"Playback failed:\", error);\n                }\n            }\n        }\n\n        createButtonSound(parent, left, top) {\n            this.buttonSound = this.createDOMElement('img', {\n                parent: parent,\n                classnames: 'mmogame-button-sound',\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                },\n                attributes: {\n                    src: this.getMuteFile(),\n                    alt: this.getStringM('js_sound'),\n                    role: 'button',\n                },\n            });\n            this.buttonSound.addEventListener(\"click\", () => this.onClickSound(this.buttonSound));\n        }\n\n        /**\n         * Toggles sound on or off when clicked.\n         * @param {HTMLElement} button - The sound toggle button.\n         */\n        onClickSound(button) {\n            this.kindSound = (this.kindSound + 1) % 2;\n            button.src = this.getMuteFile();\n            this.setOption('kindSound', {value: this.kindSound});\n        }\n\n        /**\n         * Opens the gate UI, computes sizes, and initializes settings based on the user type.\n         * @param {number} mmogameid - The game ID.\n         * @param {string} pin - The game PIN.\n         * @param {string} kinduser - The type of user (e.g., \"moodle\" or \"guid\").\n         * @param {string} user - The user identifier.\n         * @param {string} url - The game URL.\n         */\n        async gateOpen(mmogameid, pin, kinduser, user, url) {\n            this.url = url;\n            this.mmogameid = mmogameid;\n            this.pin = pin;\n            this.kinduser = kinduser;\n            this.user = user;\n\n            if (this.kinduser === 'guid') {\n                const option = await this.getOption('guid' + mmogameid);\n                if (option === null) {\n                    this.user = crypto.randomUUID();\n                    this.setOption('guid' + mmogameid, {value: this.user});\n                } else {\n                    this.user = option.value;\n                }\n            }\n            await this.callGetAttempt();\n        }\n\n        gateCreateScreen() {\n            this.gateCompute();\n\n            let maxHeight = this.areaRect.height - 5 * this.padding - this.iconSize;\n            let maxWidth = this.areaRect.width;\n            let size;\n            const labels = [\n                `${this.getStringM('js_name')}: `,\n                this.getStringM('js_code'),\n                this.getStringM('js_palette')\n            ];\n            this.fontSize = this.findbest(this.minFontSize, this.maxFontSize, (fontSize) => {\n                size = this.gateComputeLabelSize(fontSize, labels);\n\n                if (size[0] >= maxWidth) {\n                    return 1;\n                }\n\n                const heightColors = (maxHeight - 4 * fontSize) * 2 / 5;\n                let n = Math.floor(heightColors / this.iconSize);\n                if (n === 0) {\n                    return 1;\n                }\n                const heightAvatars = (maxHeight - 4 * fontSize + heightColors) * 3 / 5;\n                const computedHeight = 3 * size[1] + 8 * this.padding + heightColors + heightAvatars;\n\n                return computedHeight < maxHeight ? -1 : 1;\n            });\n\n            this.gateCreateScreenDo(maxWidth, maxHeight);\n        }\n\n        gateCreateScreenDo(maxWidth, maxHeight) {\n            // Creates the \"nickname\" field.\n            let top = this.gateCreateNickname(0, maxWidth) + this.padding;\n            this.edtNickname.focus();\n\n            // Palette\n            const [lblPalette, btnPalette] = this.gateCreateLabelRefresh(top, this.getStringM('js_palette'),\n                'mmogame-gate-palette-label', 'mmogame-gate-palette-refresh', 'assets/refresh.svg');\n            top += lblPalette.scrollHeight + this.padding;\n            const topGridPalette = top;\n            let gridHeightPalette = (maxHeight - topGridPalette - lblPalette.scrollHeight) * 2 / 5;\n            const countX = Math.floor((maxWidth - this.padding) / this.iconSize);\n            const countYpalette = Math.floor(gridHeightPalette / this.iconSize);\n            gridHeightPalette = countYpalette * this.iconSize;\n            top += gridHeightPalette + this.padding;\n            // Label Avatars\n            const [lblAvatars, btnAvatars] = this.gateCreateLabelRefresh(top, this.getStringM('js_avatars'),\n                'mmogame-gate-avatars-label', 'mmogame-gate-avatars-refresh', 'assets/refresh.svg');\n\n            top += lblAvatars.scrollHeight + this.padding;\n\n            const countYavatars = Math.floor(Math.floor(maxHeight - top - this.padding) / this.iconSize);\n            const gridHeightAvatars = countYavatars * this.iconSize;\n\n            this.addEventListenerRefresh(btnPalette, topGridPalette, countX, countYpalette,\n                top, countX, countYavatars, true, false);\n\n            this.addEventListenerRefresh(btnAvatars, topGridPalette, countX, countYpalette,\n                top, countX, countYavatars, false, true);\n\n            // Horizontal\n            this.gateSendGetColorsAvatars(0, topGridPalette, countX, countYpalette,\n                0, top, countX, countYavatars, true, true);\n\n            this.gateCreateSubmit(top + gridHeightAvatars + 2 * this.padding, maxWidth);\n        }\n\n        gateCreateNickname(top, maxWidth) {\n            const lblNickname = this.createDOMElement('label', {\n                parent: this.area,\n                classnames: 'mmogame-gate-name-label',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: '0',\n                    top: `${top}px`,\n                    width: '0',\n                    color: this.getContrastingColor(this.colorBackground),\n                },\n            });\n            lblNickname.innerHTML = this.getStringM('js_name') + \": \";\n\n            if (this.isVertical) {\n                top += lblNickname.scrollHeight + this.padding;\n            }\n\n            const leftEdit = this.isVertical ? 0 : lblNickname.scrollWidth + this.padding;\n            const width = this.isVertical ? maxWidth : maxWidth - 2 * this.padding;\n            this.edtNickname = this.createDOMElement('input', {\n                parent: this.area,\n                classnames: 'mmogame-gate-name',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${leftEdit}px`,\n                    top: `${top}px`,\n                    width: `${width - leftEdit - this.padding}px`\n                },\n            });\n            this.edtNickname.addEventListener(\"keyup\", this.debounce(() => this.gateUpdateSubmit(), 300));\n            top += this.padding + (this.isVertical ? this.fontSize : Math.max(lblNickname.scrollHeight, this.fontSize));\n\n            return top;\n        }\n\n        gateCreateSubmit(top, maxWidth) {\n           this.btnSubmit = this.createDOMElement('img', {\n                parent: this.area,\n                classnames: 'mmogame-button-gate-submit',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${(maxWidth - this.iconSize) / 2}px`,\n                    top: `${top}px`,\n                    height: `${this.iconSize}px`,\n                    color: this.getContrastingColor(this.colorBackground),\n                    cursor: 'pointer',\n                    visibility: 'hidden',\n                },\n                attributes: {\n                    src: 'assets/submit.svg',\n                }\n            });\n            this.btnSubmit.addEventListener(\"click\", () => {\n                // This.gatePlayGame(true, this.edtNickname.value, this.paletteid, this.avatarid);\n                this.callGetAttempt(\n                    {nickname: this.edtNickname.value, colorpaletteid: this.paletteid, avatarid: this.avatarid},\n                );\n            });\n        }\n\n        gateComputeLabelSize(fontSize, aLabel) {\n            let maxWidth = 0;\n            let maxHeight = 0;\n\n            for (let i = 0; i < aLabel.length; i++) {\n                const label = document.createElement(\"label\");\n                label.style.position = \"absolute\";\n                label.innerHTML = aLabel[i];\n                label.style.whiteSpace = \"nowrap\";\n                label.style.font = \"FontAwesome\";\n                label.style.fontSize = fontSize + \"px\";\n                label.style.width = \"0px\";\n                label.style.height = \"0px\";\n                this.area.appendChild(label);\n\n                if (label.scrollWidth > maxWidth) {\n                    maxWidth = label.scrollWidth;\n                }\n\n                if (label.scrollHeight > maxHeight) {\n                    maxHeight = label.scrollHeight;\n                }\n                this.area.removeChild(label);\n            }\n\n            return [maxWidth, maxHeight];\n        }\n\n        gateShowAvatars(left, top, countX, countY, avatarids, avatars) {\n            if (!avatars || avatars.length === 0) {\n                return; // Exit early if no avatars exist\n            }\n\n            // Delete all previous avatar icons.\n            const elements = document.querySelectorAll('.mmogame-avatar');\n            elements.forEach(element => element.remove());\n\n            const fragment = document.createDocumentFragment();\n\n            this.avatar = undefined;\n            const count = avatars.length;\n            let leftOriginal = left;\n            let w = Math.round(this.padding / 2) + \"px\";\n            for (let i = 0; i < count; i++) {\n                let avatarImagePath = 'assets/avatars/' + avatars[i];\n                let btn = this.createCenterImageButton(\n                    fragment,\n                    left, top,\n                    this.iconSize - this.padding, this.iconSize - this.padding,\n                    'mmogame-avatar',\n                    avatarImagePath\n                );\n                btn.classList.add(\"mmogame-avatar\");\n                let id = avatarids[i];\n                btn.addEventListener(\"click\", () => {\n                    this.gateUpdateAvatar(btn, id, w);\n                });\n\n                // Move left position after placing the button\n                left += this.iconSize;\n\n                // Reset left and move to the next row after filling countX buttons\n                if ((i + 1) % countX === 0) {\n                    top += this.iconSize;\n                    left = leftOriginal;\n                }\n            }\n            this.area.appendChild(fragment);\n        }\n\n        gateSendGetColorsAvatars(leftPalette, topPalette, countXpalette, countYpalette,\n                                 leftAvatars, topAvatars, countXavatars, countYavatars,\n                                 updatePalette = true, updateAvatars = true) {\n            require(['core/ajax'], (Ajax) => {\n                // Defining the parameters to be passed to the service\n                let params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    avatars: updateAvatars ? countXavatars * countYavatars : 0,\n                    colorpalettes: updatePalette ? countXpalette * countYpalette : 0,\n                };\n                // Calling the service through the Moodle AJAX API\n                let getAssets = Ajax.call([{\n                    methodname: 'mod_mmogame_get_assets',\n                    args: params\n                }]);\n\n                // Handling the response\n                getAssets[0].done(({avatarids, avatars, colorpaletteids, colorpalettes}) => {\n                    if (updatePalette) {\n                        this.gateShowColorPalettes(leftPalette, topPalette, countXpalette, countYpalette,\n                            colorpaletteids, colorpalettes);\n                    }\n                    if (updateAvatars) {\n                        this.gateShowAvatars(leftAvatars, topAvatars, countXavatars, countYavatars,\n                            avatarids, avatars);\n                    }\n                }).fail((error) => {\n                    return error;\n                });\n            });\n        }\n\n        gateShowColorPalettes(left, top, countX, countY, colorpaletteids, colorpalettes) {\n            let i = 0; // Counter for color palettes\n            const count = colorpalettes.length;\n            this.canvasColor = undefined;\n            const canvasSize = this.iconSize - this.padding * 3 / 2;\n            const parsedPalettes = colorpalettes.map(palette =>\n                palette.split(\",\").map(value => parseInt(value, 10) || 0)\n            );\n            const fragment = document.createDocumentFragment();\n            for (let iy = 0; iy < countY; iy++) {\n                for (let ix = 0; ix < countX; ix++) {\n                    // Check if we exceed available palettes or encounter invalid data\n                    if (i >= count || !parsedPalettes[i] || !colorpaletteids[i]) {\n                        i++; // Increment and continue if invalid\n                        continue;\n                    }\n\n                    // Create a new canvas element\n                    let canvas = document.createElement('canvas');\n                    canvas.style.position = \"absolute\";\n                    canvas.style.left = `${left + ix * this.iconSize}px`;\n                    canvas.style.top = `${top + iy * this.iconSize}px`;\n                    canvas.width = canvasSize;\n                    canvas.height = canvasSize;\n                    canvas.style.cursor = 'pointer';\n                    canvas.classList.add(\"mmogame_color\");\n\n                    // Append canvas to the area\n                    fragment.appendChild(canvas);\n\n                    // Render the color palette on the canvas\n                    this.showColorPalette(canvas, parsedPalettes[i]);\n\n                    // Get the palette ID and attach a click event listener\n                    let id = colorpaletteids[i];\n                    canvas.addEventListener(\"click\", () => {\n                        this.gateUpdateColorPalette(canvas, id);\n                    });\n\n                    i++;\n                }\n            }\n            this.area.appendChild(fragment);\n        }\n\n        gateUpdateColorPalette(canvas, id) {\n            if (this.canvasColor !== undefined) {\n                this.canvasColor.style.borderStyle = \"none\";\n            }\n            this.canvasColor = canvas;\n            let w = Math.round(this.padding / 2) + \"px\";\n\n            Object.assign(canvas.style, {\n                borderStyle: \"outset\",\n                borderLeftWidth: w,\n                borderTopWidth: w,\n                borderRightWidth: w,\n                borderBottomWidth: w,\n            });\n            this.paletteid = id;\n\n            this.gateUpdateSubmit();\n        }\n\n        gateUpdateAvatar(avatar, id, w) {\n            if (this.avatar !== undefined) {\n                this.avatar.style.borderStyle = \"none\";\n            }\n            this.avatar = avatar;\n            avatar.style.borderStyle = \"outset\";\n\n            avatar.style.borderLeftWidth = w;\n            avatar.style.borderTopWidth = w;\n            avatar.style.borderRightWidth = w;\n            avatar.style.borderBottomWidth = w;\n\n            this.avatarid = id;\n\n            this.gateUpdateSubmit();\n        }\n\n        /**\n         * Updates the visibility of the submit button based on form input validation.\n         */\n        gateUpdateSubmit() {\n            const hasAvatar = this.avatarid !== undefined;\n            const hasPalette = this.paletteid !== undefined;\n            const hasNickname = this.edtNickname?.value?.length > 0;\n\n            this.btnSubmit.style.visibility = hasAvatar && hasPalette && hasNickname ? 'visible' : 'hidden';\n        }\n\n        gateComputeSizes() {\n            this.computeSizes();\n            this.iconSize = Math.round(0.8 * this.iconSize);\n            this.padding = Math.round(0.8 * this.padding);\n        }\n\n        /**\n         * Creates the screen palette UI with a label and a refresh button.\n         * @param {number} top - The vertical position for the elements.\n         * @param {string} title\n         * @param {string} classLabel\n         * @param {string} classButton\n         * @param {string} src\n         */\n        gateCreateLabelRefresh(top, title, classLabel, classButton, src) {\n            // Create and configure the label\n            const label = this.createDOMElement('label', {\n                parent: this.area,\n                classnames: classLabel,\n                styles: {\n                    position: 'absolute',\n                    font: 'FontAwesome',\n                    fontSize: `${this.fontSize}px`,\n                    width: '0px',\n                    whiteSpace: 'nowrap',\n                    color: this.getContrastingColor(this.colorBackground),\n                    top: `${top}px`,\n                    left: '0px',\n                },\n            });\n            label.innerHTML = title;\n\n            // Button refresh color palettes\n            let button = this.createDOMElement('img', {\n                parent: this.area,\n                classnames: classButton,\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${label.scrollWidth + this.padding}px`,\n                    top: `${top}px`,\n                    height: `${label.scrollHeight}px`,\n                    color: this.getContrastingColor(this.colorBackground),\n                    cursor: 'pointer',\n                },\n                attributes: {\n                    src: src,\n                }\n            });\n\n            return [label, button];\n        }\n\n        /**\n         * Adds an event listener to refresh colors and avatars.\n         *\n         * @param {HTMLElement} btn - The button to attach the event listener to.\n         * @param {number} topPalette - The Y-coordinate offset for grid positioning.\n         * @param {number} countXpalette - Width of the color grid.\n         * @param {number} countYpalette - Height of the color grid.\n         * @param {number} topAvatars - The Y-coordinate offset for grid positioning.\n         * @param {number} countXavatars - Width of the avatar grid.\n         * @param {number} countYavatars - Height of the avatar grid.\n         * @param {boolean} updateColors - Callback to update colors.\n         * @param {boolean} updateAvatars - Callback to update avatars.\n         */\n        addEventListenerRefresh(btn, topPalette, countXpalette, countYpalette, topAvatars,\n                                countXavatars, countYavatars, updateColors, updateAvatars) {\n            btn.addEventListener(\"click\", () => {\n                const elements = Array.from(this.area.getElementsByClassName(\"mmogame-color\"));\n                elements.forEach(element => element.remove());\n\n                this.gateSendGetColorsAvatars(0, topPalette, countXpalette, countYpalette,\n                    0, topAvatars, countXavatars, countYavatars,\n                    updateColors, updateAvatars);\n            });\n        }\n\n        /**\n         * Creates the main game area.\n         */\n\n        createArea(top, bottomSpace) {\n            if (this.area !== undefined) {\n                this.body.removeChild(this.area);\n            }\n            this.area = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: 'mmogame-area',\n                styles: {\n                    position: 'absolute',\n                    left: `${this.padding}px`,\n                    top: `${top}px`,\n                    right: `${this.padding}px`,\n                    bottom: `${this.padding + bottomSpace}px`,\n                    overflow: 'hidden',\n                }\n            });\n\n            this.areaRect = {\n                left: this.padding,\n                top: top,\n                width: this.area.offsetWidth,\n                height: this.area.offsetHeight,\n            };\n        }\n\n        removeAreaChildren() {\n            if (this.area === undefined) {\n                return;\n            }\n            while (this.area.firstChild) {\n                this.area.removeChild(this.area.firstChild);\n            }\n        }\n\n        createDivMessage(classnames, message) {\n            if (this.area !== undefined) {\n                this.body.removeChild(this.area);\n                this.area = undefined;\n            }\n\n            if (this.divMessageHelp !== undefined) {\n                this.body.removeChild(this.divMessageHelp);\n                this.divMessageHelp = undefined;\n            }\n\n            let left = this.padding;\n            let top = this.areaRect !== undefined ? this.areaRect.top : 0;\n            let width = window.innerWidth - 2 * this.padding;\n            let height = window.innerHeight - this.padding - top;\n\n            this.createDivMessageDo(classnames, left, top, width, height, message, height);\n\n            this.divMessage.style.top = (height - this.divMessage.scrollHeight) / 2 + \"px\";\n        }\n\n        createNicknameAvatar(parent, prefixclassname, left, topNickname, widthNickname, heightNickname, topAvatar, widthAvatar) {\n            const nickname = this.createDOMElement('div', {\n                parent: parent,\n                classname: `${prefixclassname}-nickname`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${topNickname}px`,\n                    width: `${widthNickname}px`,\n                }\n            });\n\n            let leftAvatar = Math.round(left + this.iconSize / 2);\n            const avatar = this.createDOMElement('img', {\n                classname: `${prefixclassname}-avatar`,\n                parent: this.body,\n                styles: {\n                    position: 'absolute',\n                    left: `${leftAvatar}px`,\n                    top: `${topAvatar}px`,\n                    height: `${widthAvatar}px`,\n                    maxWidth: `${widthAvatar}px`,\n                    transform: 'translateX(-50%)',\n                }\n            });\n\n            return [nickname, avatar];\n        }\n\n\n        createDivMessageStart(message) {\n            if (this.divMessageHelp !== undefined) {\n                return;\n            }\n            if (this.area !== undefined) {\n                this.body.removeChild(this.area);\n                this.area = undefined;\n            }\n\n            let left = this.padding;\n            let top = this.areaRect.top;\n            let width = window.innerWidth - 2 * this.padding;\n            let height = window.innerHeight - this.padding - top;\n\n            let height1 = height / 8;\n\n            this.createDivMessageDo('mmogame-message-start', left, top, width, height, message, height1);\n\n            top += (height1 - this.divMessage.scrollHeight) / 2;\n            this.divMessage.style.top = top + \"px\";\n\n            let div = document.createElement(\"div\");\n            div.style.position = \"absolute\";\n            div.style.left = left + \"px\";\n            div.style.textAlign = \"left\";\n            div.style.width = (width - 2 * this.padding) + \"px\";\n            div.style.paddingLeft = this.padding + \"px\";\n            div.style.paddingRight = this.padding + \"px\";\n\n            div.style.color = this.getContrastingColor(this.colorBackground2);\n            top = this.iconSize + 3 * this.padding + height1;\n            div.style.top = (top + this.padding) + \"px\";\n            div.style.height = (height - height1) + \"px\";\n            this.divMessageHelp = div;\n            this.body.appendChild(this.divMessageHelp);\n\n            this.showHelpScreen(div, (width - 2 * this.padding), (height - height1));\n        }\n\n        /**\n         * Calls the Moodle Web Service 'mmogametype_quiz_get_attempt' and processes the response.\n         *\n         * @param {Object} extraparams - Additional parameters to override default ones.\n         */\n        async callGetAttempt(extraparams = undefined) {\n            const option = await this.getOption(\"kindSound\");\n            this.kindSound = option !== null ? option.value : 1;\n\n            require(['core/ajax'], (Ajax) => {\n                let params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    nickname: null,\n                    colorpaletteid: null,\n                    avatarid: null,\n                    subcommand: '',\n                };\n                if (extraparams !== undefined) {\n                    params = {...params, ...extraparams};\n                }\n                // Calling the service through the Moodle AJAX API\n                let getAttempt = Ajax.call([{\n                    methodname: 'mmogametype_quiz_get_attempt',\n                    args: params,\n                }]);\n\n                // Handling the response\n                getAttempt[0].done((response) => {\n                    const json = JSON.parse(response);\n                    if (json.errorcode === 'no_user') {\n                        this.gateCreateScreen();\n                        return;\n                    }\n                    if (this.area !== undefined) {\n                        this.body.removeChild(this.area);\n                        this.area = undefined;\n                    }\n                    if (this.iconSize === undefined) {\n                        this.openGame();\n                    }\n\n                    this.processGetAttempt(json);\n                }).fail((error) => {\n                    this.createDivMessage('mmogame-error', error.message);\n                    return error;\n                });\n            });\n        }\n\n        createDivMessageDo(classnames, left, top, width, height, message, heightmessage) {\n            if (this.divMessageBackground === undefined) {\n                let div = this.createDiv(this.body, classnames, left, top, width, height);\n                div.style.background = this.getColorHex(this.colorBackground2);\n                this.divMessageBackground = div;\n            }\n\n            if (this.divMessage === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"center\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.background = this.getColorHex(this.colorBackground2);\n                div.style.color = this.getContrastingColor(this.colorBackground2);\n                this.divMessage = div;\n            }\n            this.divMessage.innerHTML = message;\n            this.body.appendChild(this.divMessage);\n            this.autoResizeText(this.divMessage, width, heightmessage, false, this.minFontSize, this.maxFontSize, 0.5);\n        }\n\n        removeMessageDivs() {\n            if (this.divMessage !== undefined) {\n                this.body.removeChild(this.divMessage);\n                this.divMessage = undefined;\n            }\n            if (this.divMessageHelp !== undefined) {\n                this.body.removeChild(this.divMessageHelp);\n                this.divMessageHelp = undefined;\n            }\n            if (this.divMessageBackground !== undefined) {\n                this.body.removeChild(this.divMessageBackground);\n                this.divMessageBackground = undefined;\n            }\n        }\n\n        setColors(colors) {\n            super.setColors(colors);\n\n            this.colorBackground2 = colors[1];\n        }\n\n        /**\n         * Displays an error message on the screen.\n         * @param {string} name - The name of the error context.\n         * @param {Error} [error] - The error object to display.\n         */\n        showError(name, error) {\n            const message = error?.message || 'An unknown error occurred.';\n            this.createDivMessage('mmogame-error', message);\n        }\n\n        createButtonHelp(parent, left, top) {\n            return this.createDOMElement('img', {\n                parent: parent,\n                classnames: 'mmogame-button-help',\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                },\n                attributes: {\n                    src: 'assets/help.svg',\n                    alt: this.getStringM('js_help'),\n                    role: 'button',\n                },\n            });\n        }\n\n        onClickHelp() {\n            this.createDivMessageStart('test');\n        }\n\n        gateCompute() {\n            // Adjust font sizes\n            this.minFontSize *= 2;\n            this.maxFontSize *= 2;\n\n            // Compute sizes and layout\n            this.gateComputeSizes();\n            this.createArea(this.padding, 0);\n        }\n\n        removeDivMessage() {\n            if (this.divMessage !== undefined) {\n                this.body.removeChild(this.divMessage);\n                this.divMessage = undefined;\n            }\n            if (this.divMessageHelp !== undefined) {\n                this.body.removeChild(this.divMessageHelp);\n                this.divMessageHelp = undefined;\n            }\n            if (this.divMessageBackground !== undefined) {\n                this.divMessageBackground.remove();\n                this.divMessageBackground = undefined;\n            }\n        }\n    };\n});"],"names":["define","MmoGame","isVertical","kindSound","buttonSound","colorBackground2","nickname","user","paletteid","avatarid","iconSize","padding","area","areaRect","edtNickname","mmogameid","divMessage","divMessageHelp","divMessageBackground","constructor","super","this","window","innerWidth","innerHeight","undefined","getMuteFile","playAudio","audioElement","play","error","showError","createButtonSound","parent","left","top","createDOMElement","classnames","styles","position","width","height","attributes","src","alt","getStringM","role","addEventListener","onClickSound","button","setOption","value","gateOpen","pin","kinduser","url","option","getOption","crypto","randomUUID","callGetAttempt","gateCreateScreen","gateCompute","size","maxHeight","maxWidth","labels","fontSize","findbest","minFontSize","maxFontSize","gateComputeLabelSize","heightColors","Math","floor","heightAvatars","gateCreateScreenDo","gateCreateNickname","focus","lblPalette","btnPalette","gateCreateLabelRefresh","scrollHeight","topGridPalette","gridHeightPalette","countX","countYpalette","lblAvatars","btnAvatars","countYavatars","gridHeightAvatars","addEventListenerRefresh","gateSendGetColorsAvatars","gateCreateSubmit","lblNickname","color","getContrastingColor","colorBackground","innerHTML","leftEdit","scrollWidth","debounce","gateUpdateSubmit","max","btnSubmit","cursor","visibility","colorpaletteid","aLabel","i","length","label","document","createElement","style","whiteSpace","font","appendChild","removeChild","gateShowAvatars","countY","avatarids","avatars","querySelectorAll","forEach","element","remove","fragment","createDocumentFragment","avatar","count","leftOriginal","w","round","avatarImagePath","btn","createCenterImageButton","classList","add","id","gateUpdateAvatar","leftPalette","topPalette","countXpalette","leftAvatars","topAvatars","countXavatars","updatePalette","arguments","updateAvatars","require","Ajax","params","colorpalettes","call","methodname","args","done","_ref","colorpaletteids","gateShowColorPalettes","fail","canvasColor","canvasSize","parsedPalettes","map","palette","split","parseInt","iy","ix","canvas","showColorPalette","gateUpdateColorPalette","borderStyle","Object","assign","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","hasAvatar","hasPalette","hasNickname","gateComputeSizes","computeSizes","title","classLabel","classButton","updateColors","Array","from","getElementsByClassName","createArea","bottomSpace","body","right","bottom","overflow","offsetWidth","offsetHeight","removeAreaChildren","firstChild","createDivMessage","message","createDivMessageDo","createNicknameAvatar","prefixclassname","topNickname","widthNickname","heightNickname","topAvatar","widthAvatar","classname","leftAvatar","transform","createDivMessageStart","height1","div","textAlign","paddingLeft","paddingRight","showHelpScreen","extraparams","subcommand","response","json","JSON","parse","errorcode","openGame","processGetAttempt","heightmessage","createDiv","background","getColorHex","autoResizeText","removeMessageDivs","setColors","colors","name","createButtonHelp","onClickHelp","removeDivMessage"],"mappings":"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"}