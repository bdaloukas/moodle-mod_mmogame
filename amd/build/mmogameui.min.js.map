{"version":3,"file":"mmogameui.min.js","sources":["../src/mmogameui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mod_mmogame/mmogame'], function(MmoGame) {\n    return class MmoGameUI extends MmoGame {\n\n        isVertical;\n        kindSound; // Type: Number (0 = on, 1 = off, 2 = speak)\n        buttonSound;\n        colorBackground2;\n\n        // Other\n        nickname;\n        user;\n        paletteid;\n        avatarid;\n        iconSize;\n        padding;\n\n        // Area\n        area;\n        areaRect;\n\n        // Form fields\n        edtNickname;\n\n        // Gate variables\n        mmogameid;\n\n        constructor() {\n            super();\n            this.isVertical = window.innerWidth < window.innerHeight;\n            this.area = undefined;\n        }\n\n        /**\n         * Returns the appropriate file for mute/unmute.\n         * @returns {string} The file path.\n         */\n        getMuteFile() {\n            return this.kindSound === 0 ? 'assets/sound-on-flat.png' : 'assets/sound-off-flat.png';\n        }\n\n        /**\n         * Plays a sound file if sound is enabled.\n         *\n         * @param {HTMLAudioElement} audioElement - The audio element to play.\n         */\n        async playAudio(audioElement) {\n            if (this.kindSound !== 0 && audioElement) {\n                try {\n                    await audioElement.play();\n                } catch (error) {\n                    this.showError(\"Playback failed:\", error);\n                }\n            }\n        }\n\n        createButtonSound(parent, left, top) {\n            this.buttonSound = this.createDOMElement('img', {\n                parent: parent,\n                classnames: 'mmogame-button-sound',\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                },\n                attributes: {\n                    src: this.getMuteFile(),\n                    alt: this.getStringM('js_sound'),\n                    role: 'button',\n                },\n            });\n            this.buttonSound.addEventListener(\"click\", () => this.onClickSound(this.buttonSound));\n        }\n\n        /**\n         * Toggles sound on or off when clicked.\n         * @param {HTMLElement} button - The sound toggle button.\n         */\n        onClickSound(button) {\n            this.kindSound = (this.kindSound + 1) % 2;\n            button.src = this.getMuteFile();\n            this.setOptions({kindSound: this.kindSound});\n        }\n\n        /**\n         * Opens the gate UI, computes sizes, and initializes settings based on the user type.\n         * @param {number} mmogameid - The game ID.\n         * @param {string} pin - The game PIN.\n         * @param {string} kinduser - The type of user (e.g., \"moodle\" or \"guid\").\n         * @param {string} user - The user identifier.\n         * @param {string} url - The game URL.\n         */\n        async gateOpen(mmogameid, pin, kinduser, user, url) {\n            this.url = url;\n            this.mmogameid = mmogameid;\n            this.pin = pin;\n            this.kinduser = kinduser;\n            this.user = user;\n\n            const options = await this.getOptions();\n            this.kindSound = [1, 2].includes(options.kindSound) ? options.kindSound : 0;\n\n            const isReady = options.nickname && options.avatarid && options.paletteid;\n\n            if (kinduser === 'moodle' && isReady) {\n                await this.gatePlayGame(false, options.nickname, options.paletteid, options.avatarid);\n            } else if (this.kinduser === 'guid') {\n                if (options.userGUID === undefined) {\n                    options.userGUID = '';\n                }\n                if (options.userGUID.length >= 10 && isReady) {\n                    this.user = options.userGUID;\n                    this.gatePlayGame(false, options.nickname, options.paletteid, options.avatarid);\n                } else {\n                    this.gateCreateScreen();\n                }\n            } else {\n                this.gateCreateScreen();\n            }\n        }\n\n        gatePlayGame(save, nickname, paletteid, avatarid) {\n            let saveGuid = false;\n            if (this.kinduser === 'guid' && this.user === '') {\n                this.user = crypto.randomUUID();\n                saveGuid = true;\n            }\n\n            if (save || saveGuid) {\n                let data;\n                if (save) {\n                    data = {user: this.user, nickname, avatarid, paletteid};\n                    if (saveGuid) {\n                        data.userGUID = this.user;\n                    }\n                } else {\n                    data = {userGUID: this.user};\n                }\n                this.setOptions(data);\n            }\n            this.nickname = nickname;\n            this.paletteid = paletteid;\n            this.avatarid = avatarid;\n            if (save) {\n                this.callGetAttempt({nickname, colorpaletteid: paletteid, avatarid});\n            } else {\n                this.callGetAttempt();\n            }\n        }\n\n        gateCreateScreen() {\n            this.gateCompute();\n\n            let maxHeight = this.areaRect.height - 5 * this.padding - this.iconSize;\n            let maxWidth = this.areaRect.width;\n            let size;\n\n            const labels = [\n                `${this.getStringM('js_name')}: `,\n                this.getStringM('js_code'),\n                this.getStringM('js_palette')\n            ];\n\n            this.fontSize = this.findbest(this.minFontSize, this.maxFontSize, (fontSize) => {\n                size = this.gateComputeLabelSize(fontSize, labels);\n\n                if (size[0] >= maxWidth) {\n                    return 1;\n                }\n\n                const heightColors = (maxHeight - 4 * fontSize) * 2 / 5;\n                let n = Math.floor(heightColors / this.iconSize);\n                if (n === 0) {\n                    return 1;\n                }\n                const heightAvatars = (maxHeight - 4 * fontSize + heightColors) * 3 / 5;\n                const computedHeight = 3 * size[1] + 8 * this.padding + heightColors + heightAvatars;\n\n                return computedHeight < maxHeight ? -1 : 1;\n            });\n\n            this.gateCreateScreenDo(maxWidth, maxHeight);\n        }\n\n        gateCreateScreenDo(maxWidth, maxHeight) {\n            const instance = this;\n\n            let top = this.gateCreateNickName(0, maxWidth) + this.padding;\n            this.edtNickname.focus();\n            // Creates the \"nickname\" field.\n\n            // Palette\n            const [lblPalette, btnPalette] = instance.gateCreateLabelRefresh(top, instance.getStringM('js_palette'),\n                'mmogame-gate-palette-label', 'mmogame-gate-palette-refresh', 'assets/refresh.svg');\n            top += lblPalette.scrollHeight + instance.padding;\n            const topGridPalette = top;\n            let gridHeightPalette = (maxHeight - topGridPalette - lblPalette.scrollHeight) * 2 / 5;\n            const countX = Math.floor((maxWidth - this.padding) / this.iconSize);\n            const countYpalette = Math.floor(gridHeightPalette / this.iconSize);\n            gridHeightPalette = countYpalette * instance.iconSize;\n            top += gridHeightPalette + this.padding;\n            // Label Avatars\n            const [lblAvatars, btnAvatars] = instance.gateCreateLabelRefresh(top, instance.getStringM('js_avatars'),\n                'mmogame-gate-avatars-label', 'mmogame-gate-avatars-refresh', 'assets/refresh.svg');\n\n            top += lblAvatars.scrollHeight + instance.padding;\n\n            const countYavatars = Math.floor(Math.floor(maxHeight - top - this.padding) / this.iconSize);\n            const gridHeightAvatars = countYavatars * this.iconSize;\n\n            instance.addEventListenerRefresh(btnPalette, topGridPalette, countX, countYpalette,\n                top, countX, countYavatars, true, false);\n\n            instance.addEventListenerRefresh(btnAvatars, topGridPalette, countX, countYpalette,\n                top, countX, countYavatars, false, true);\n\n            // Horizontal\n            instance.gateSendGetColorsAvatars(0, topGridPalette, countX, countYpalette,\n                0, top, countX, countYavatars, true, true);\n\n            this.gateCreateSubmit(top + gridHeightAvatars + 2 * this.padding, maxWidth);\n        }\n\n        gateCreateNickName(top, maxWidth) {\n            const lblNickName = this.createDOMElement('label', {\n                parent: this.area,\n                classnames: 'mmogame-gate-name-label',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: '0',\n                    top: `${top}px`,\n                    width: '0',\n                    color: this.getContrastingColor(this.colorBackground),\n                },\n            });\n            lblNickName.innerHTML = this.getStringM('js_name') + \": \";\n\n            if (this.isVertical) {\n                top += lblNickName.scrollHeight + this.padding;\n            }\n\n            const leftEdit = this.isVertical ? 0 : lblNickName.scrollWidth + this.padding;\n            const width = this.isVertical ? maxWidth : maxWidth - 2 * this.padding;\n            this.edtNickname = this.createDOMElement('input', {\n                parent: this.area,\n                classnames: 'mmogame-gate-name',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${leftEdit}px`,\n                    top: `${top}px`,\n                    width: `${width - leftEdit - this.padding}px`\n                },\n            });\n            this.edtNickname.addEventListener(\"keyup\", this.debounce(() => this.gateUpdateSubmit(), 300));\n            top += this.padding + (this.isVertical ? this.fontSize : Math.max(lblNickName.scrollHeight, this.fontSize));\n\n            return top;\n        }\n\n        gateCreateSubmit(top, maxWidth) {\n           this.btnSubmit = this.createDOMElement('img', {\n                parent: this.area,\n                classnames: 'mmogame-button-gate-submit',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${(maxWidth - this.iconSize) / 2}px`,\n                    top: `${top}px`,\n                    height: `${this.iconSize}px`,\n                    color: this.getContrastingColor(this.colorBackground),\n                    cursor: 'pointer',\n                    visibility: 'hidden',\n                },\n                attributes: {\n                    src: 'assets/submit.svg',\n                }\n            });\n            this.btnSubmit.addEventListener(\"click\", () => {\n                this.gatePlayGame(true, this.edtNickname.value, this.paletteid, this.avatarid);\n            });\n        }\n\n        gateComputeLabelSize(fontSize, aLabel) {\n            const instance = this;\n            let maxWidth = 0;\n            let maxHeight = 0;\n\n            for (let i = 0; i < aLabel.length; i++) {\n                const label = document.createElement(\"label\");\n                label.style.position = \"absolute\";\n                label.innerHTML = aLabel[i];\n                label.style.whiteSpace = \"nowrap\";\n                label.style.font = \"FontAwesome\";\n                label.style.fontSize = fontSize + \"px\";\n                label.style.width = \"0px\";\n                label.style.height = \"0px\";\n                instance.area.appendChild(label);\n\n                if (label.scrollWidth > maxWidth) {\n                    maxWidth = label.scrollWidth;\n                }\n\n                if (label.scrollHeight > maxHeight) {\n                    maxHeight = label.scrollHeight;\n                }\n                instance.area.removeChild(label);\n            }\n\n            return [maxWidth, maxHeight];\n        }\n\n        gateShowAvatars(left, top, countX, countY, avatarids, avatars) {\n            const instance = this;\n            if (!avatars || avatars.length === 0) {\n                return; // Exit early if no avatars exist\n            }\n\n            // Delete all previous avatar icons.\n            const elements = document.querySelectorAll('.mmogame-avatar');\n            elements.forEach(element => element.remove());\n\n            const fragment = document.createDocumentFragment();\n\n            instance.avatar = undefined;\n            const count = avatars.length;\n            let leftOriginal = left;\n            let w = Math.round(this.padding / 2) + \"px\";\n            for (let i = 0; i < count; i++) {\n                let avatarImagePath = 'assets/avatars/' + avatars[i];\n                let btn = instance.createCenterImageButton(\n                    fragment,\n                    left, top,\n                    instance.iconSize - instance.padding, instance.iconSize - instance.padding,\n                    'mmogame-avatar',\n                    avatarImagePath\n                );\n                btn.classList.add(\"mmogame-avatar\");\n                let id = avatarids[i];\n                btn.addEventListener(\"click\", () => {\n                    instance.gateUpdateAvatar(btn, id, w);\n                });\n\n                // Move left position after placing the button\n                left += instance.iconSize;\n\n                // Reset left and move to the next row after filling countX buttons\n                if ((i + 1) % countX === 0) {\n                    top += instance.iconSize;\n                    left = leftOriginal;\n                }\n            }\n            instance.area.appendChild(fragment);\n        }\n\n        gateSendGetColorsAvatars(leftPalette, topPalette, countXpalette, countYpalette,\n                                 leftAvatars, topAvatars, countXavatars, countYavatars,\n                                 updatePalette = true, updateAvatars = true) {\n            const instance = this;\n\n            require(['core/ajax'], (Ajax) => {\n                // Defining the parameters to be passed to the service\n                let params = {\n                    mmogameid: instance.mmogameid,\n                    kinduser: instance.kinduser,\n                    user: instance.user,\n                    avatars: updateAvatars ? countXavatars * countYavatars : 0,\n                    colorpalettes: updatePalette ? countXpalette * countYpalette : 0,\n                };\n                // Calling the service through the Moodle AJAX API\n                let getAssets = Ajax.call([{\n                    methodname: 'mod_mmogame_get_assets',\n                    args: params\n                }]);\n\n                // Handling the response\n                getAssets[0].done(({avatarids, avatars, colorpaletteids, colorpalettes}) => {\n                    if (updatePalette) {\n                        instance.gateShowColorPalettes(leftPalette, topPalette, countXpalette, countYpalette,\n                            colorpaletteids, colorpalettes);\n                    }\n                    if (updateAvatars) {\n                        instance.gateShowAvatars(leftAvatars, topAvatars, countXavatars, countYavatars,\n                            avatarids, avatars);\n                    }\n                }).fail((error) => {\n                    return error;\n                });\n            });\n        }\n\n        gateShowColorPalettes(left, top, countX, countY, colorpaletteids, colorpalettes) {\n            const instance = this;\n            let i = 0; // Counter for color palettes\n            const count = colorpalettes.length;\n            this.canvasColor = undefined;\n            const canvasSize = instance.iconSize - instance.padding * 3 / 2;\n            const parsedPalettes = colorpalettes.map(palette =>\n                palette.split(\",\").map(value => parseInt(value, 10) || 0)\n            );\n            const fragment = document.createDocumentFragment();\n            for (let iy = 0; iy < countY; iy++) {\n                for (let ix = 0; ix < countX; ix++) {\n                    // Check if we exceed available palettes or encounter invalid data\n                    if (i >= count || !parsedPalettes[i] || !colorpaletteids[i]) {\n                        i++; // Increment and continue if invalid\n                        continue;\n                    }\n\n                    // Create a new canvas element\n                    let canvas = document.createElement('canvas');\n                    canvas.style.position = \"absolute\";\n                    canvas.style.left = `${left + ix * instance.iconSize}px`;\n                    canvas.style.top = `${top + iy * instance.iconSize}px`;\n                    canvas.width = canvasSize;\n                    canvas.height = canvasSize;\n                    canvas.style.cursor = 'pointer';\n                    canvas.classList.add(\"mmogame_color\");\n\n                    // Append canvas to the area\n                    fragment.appendChild(canvas);\n\n                    // Render the color palette on the canvas\n                    instance.showColorPalette(canvas, parsedPalettes[i]);\n\n                    // Get the palette ID and attach a click event listener\n                    let id = colorpaletteids[i];\n                    canvas.addEventListener(\"click\", () => {\n                        instance.gateUpdateColorPalette(canvas, id);\n                    });\n\n                    i++;\n                }\n            }\n            instance.area.appendChild(fragment);\n        }\n\n        gateUpdateColorPalette(canvas, id) {\n            if (this.canvasColor !== undefined) {\n                this.canvasColor.style.borderStyle = \"none\";\n            }\n            this.canvasColor = canvas;\n            let w = Math.round(this.padding / 2) + \"px\";\n\n            Object.assign(canvas.style, {\n                borderStyle: \"outset\",\n                borderLeftWidth: w,\n                borderTopWidth: w,\n                borderRightWidth: w,\n                borderBottomWidth: w,\n            });\n            this.paletteid = id;\n\n            this.gateUpdateSubmit();\n        }\n\n        gateUpdateAvatar(avatar, id, w) {\n            const instance = this;\n\n            if (instance.avatar !== undefined) {\n                instance.avatar.style.borderStyle = \"none\";\n            }\n            instance.avatar = avatar;\n            avatar.style.borderStyle = \"outset\";\n\n            avatar.style.borderLeftWidth = w;\n            avatar.style.borderTopWidth = w;\n            avatar.style.borderRightWidth = w;\n            avatar.style.borderBottomWidth = w;\n\n            instance.avatarid = id;\n\n            instance.gateUpdateSubmit();\n        }\n\n        /**\n         * Updates the visibility of the submit button based on form input validation.\n         */\n        gateUpdateSubmit() {\n            const hasAvatar = this.avatarid !== undefined;\n            const hasPalette = this.paletteid !== undefined;\n            const hasNickname = this.edtNickname?.value?.length > 0;\n\n            this.btnSubmit.style.visibility = hasAvatar && hasPalette && hasNickname ? 'visible' : 'hidden';\n        }\n\n        gateComputeSizes() {\n            const instance = this;\n\n            instance.computeSizes();\n            instance.iconSize = Math.round(0.8 * instance.iconSize);\n            instance.padding = Math.round(0.8 * instance.padding);\n        }\n\n        /**\n         * Creates the screen palette UI with a label and a refresh button.\n         * @param {number} top - The vertical position for the elements.\n         * @param {string} title\n         * @param {string} classLabel\n         * @param {string} classButton\n         * @param {string} src\n         */\n        gateCreateLabelRefresh(top, title, classLabel, classButton, src) {\n            // Create and configure the label\n            const label = this.createDOMElement('label', {\n                parent: this.area,\n                classnames: classLabel,\n                styles: {\n                    position: 'absolute',\n                    font: 'FontAwesome',\n                    fontSize: `${this.fontSize}px`,\n                    width: '0px',\n                    whiteSpace: 'nowrap',\n                    color: this.getContrastingColor(this.colorBackground),\n                    top: `${top}px`,\n                    left: '0px',\n                },\n            });\n            label.innerHTML = title;\n\n            // Button refresh color palettes\n            let button = this.createDOMElement('img', {\n                parent: this.area,\n                classnames: classButton,\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${label.scrollWidth + this.padding}px`,\n                    top: `${top}px`,\n                    height: `${label.scrollHeight}px`,\n                    color: this.getContrastingColor(this.colorBackground),\n                    cursor: 'pointer',\n                },\n                attributes: {\n                    src: src,\n                }\n            });\n\n            return [label, button];\n        }\n\n        /**\n         * Adds an event listener to refresh colors and avatars.\n         *\n         * @param {HTMLElement} btn - The button to attach the event listener to.\n         * @param {number} topPalette - The Y-coordinate offset for grid positioning.\n         * @param {number} countXpalette - Width of the color grid.\n         * @param {number} countYpalette - Height of the color grid.\n         * @param {number} topAvatars - The Y-coordinate offset for grid positioning.\n         * @param {number} countXavatars - Width of the avatar grid.\n         * @param {number} countYavatars - Height of the avatar grid.\n         * @param {boolean} updateColors - Callback to update colors.\n         * @param {boolean} updateAvatars - Callback to update avatars.\n         */\n        addEventListenerRefresh(btn, topPalette, countXpalette, countYpalette, topAvatars,\n                                countXavatars, countYavatars, updateColors, updateAvatars) {\n            btn.addEventListener(\"click\", () => {\n                const elements = Array.from(this.area.getElementsByClassName(\"mmogame-color\"));\n                elements.forEach(element => element.remove());\n\n                this.gateSendGetColorsAvatars(0, topPalette, countXpalette, countYpalette,\n                    0, topAvatars, countXavatars, countYavatars,\n                    updateColors, updateAvatars);\n            });\n        }\n\n        /**\n         * Creates the main game area.\n         */\n\n        createArea(top) {\n            if (this.area !== undefined) {\n                this.body.removeChild(this.area);\n            }\n\n            this.area = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: 'mmogame-area',\n                styles: {\n                    position: 'absolute',\n                    left: `${this.padding}px`,\n                    top: `${top}px`,\n                    right: `${this.padding}px`,\n                    bottom: `${this.padding}px`,\n                    overflow: 'hidden',\n                }\n            });\n\n            this.areaRect = {\n                left: this.padding,\n                top: top,\n                width: this.area.offsetWidth,\n                height: this.area.offsetHeight,\n            };\n        }\n\n        createDivMessage(classnames, message) {\n            const instance = this;\n\n            if (instance.area !== undefined) {\n                instance.body.removeChild(instance.area);\n                instance.area = undefined;\n            }\n\n            if (instance.divMessageHelp !== undefined) {\n                instance.body.removeChild(instance.divMessageHelp);\n                instance.divMessageHelp = undefined;\n            }\n\n            let left = instance.padding;\n            let top = instance.areaRect !== undefined ? instance.areaRect.top : 0;\n            let width = window.innerWidth - 2 * instance.padding;\n            let height = window.innerHeight - instance.padding - top;\n\n            instance.createDivMessageDo(classnames, left, top, width, height, message, height);\n\n            instance.divMessage.style.top = (height - instance.divMessage.scrollHeight) / 2 + \"px\";\n        }\n\n        createNicknameAvatar(parent, prefixclassname, left, topNickname, widthNickname, heightNickname, topAvatar, widthAvatar) {\n            const nickname = this.createDOMElement('div', {\n                parent: parent,\n                classname: `${prefixclassname}-nickname`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${topNickname}px`,\n                    width: `${widthNickname}px`,\n                }\n            });\n\n            let leftAvatar = Math.round(left + this.iconSize / 2);\n            const avatar = this.createDOMElement('img', {\n                classname: `${prefixclassname}-avatar`,\n                parent: this.body,\n                styles: {\n                    position: 'absolute',\n                    left: `${leftAvatar}px`,\n                    top: `${topAvatar}px`,\n                    height: `${widthAvatar}px`,\n                    maxWidth: `${widthAvatar}px`,\n                    transform: 'translateX(-50%)',\n                }\n            });\n\n            return [nickname, avatar];\n        }\n\n\n        createDivMessageStart(message) {\n            const instance = this;\n\n            if (instance.area !== undefined) {\n                instance.body.removeChild(instance.area);\n                instance.area = undefined;\n            }\n\n            let left = instance.padding;\n            let top = instance.areaRect.top;\n            let width = window.innerWidth - 2 * instance.padding;\n            let height = window.innerHeight - instance.padding - top;\n\n            let height1 = height / 8;\n\n            instance.createDivMessageDo('mmogame-message-start', left, top, width, height, message, height1);\n\n            top += (height1 - instance.divMessage.scrollHeight) / 2;\n            instance.divMessage.style.top = top + \"px\";\n\n            if (instance.divMessageHelp === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"left\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.color = instance.getContrastingColor(this.colorBackground2);\n                let top = instance.iconSize + 3 * instance.padding + height1;\n                div.style.top = (top + instance.padding) + \"px\";\n                div.style.height = (height - height1) + \"px\";\n                instance.divMessageHelp = div;\n                instance.body.appendChild(instance.divMessageHelp);\n\n                instance.showHelpScreen(div, (width - 2 * instance.padding), (height - height1));\n            }\n        }\n\n        /**\n         * Calls the Moodle Web Service 'mmogametype_quiz_get_attempt' and processes the response.\n         *\n         * @param {Object} extraparams - Additional parameters to override default ones.\n         */\n        callGetAttempt(extraparams = undefined) {\n            require(['core/ajax'], (Ajax) => {\n                let params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    nickname: null,\n                    colorpaletteid: null,\n                    avatarid: null,\n                };\n                if (extraparams !== undefined) {\n                    params = {...params, ...extraparams};\n                }\n                // Calling the service through the Moodle AJAX API\n                let getAttempt = Ajax.call([{\n                    methodname: 'mmogametype_quiz_get_attempt',\n                    args: params,\n                }]);\n\n                // Handling the response\n                getAttempt[0].done((response) => {\n                    if (this.iconSize === undefined) {\n                        this.openGame();\n                    }\n                    this.processGetAttempt(JSON.parse(response));\n                }).fail((error) => {\n                    this.createDivMessage('mmogame-error', error.message);\n                    return error;\n                });\n            });\n        }\n\n        createDivMessageDo(classnames, left, top, width, height, message, heightmessage) {\n            if (this.divMessageBackground === undefined) {\n                let div = this.createDiv(this.body, classnames, left, top, width, height);\n                div.style.background = this.getColorHex(this.colorBackground2);\n                this.divMessageBackground = div;\n            }\n\n            if (this.divMessage === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"center\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.background = this.getColorHex(this.colorBackground2);\n                div.style.color = this.getContrastingColor(this.colorBackground2);\n                this.divMessage = div;\n            }\n            this.divMessage.innerHTML = message;\n            this.body.appendChild(this.divMessage);\n            this.autoResizeText(this.divMessage, width, heightmessage, false, this.minFontSize, this.maxFontSize, 0.5);\n        }\n\n        setColors(colors) {\n            super.setColors(colors);\n\n            this.colorBackground2 = colors[1];\n        }\n\n        /**\n         * Displays an error message on the screen.\n         * @param {string} name - The name of the error context.\n         * @param {Error} [error] - The error object to display.\n         */\n        showError(name, error) {\n            const message = error?.message || 'An unknown error occurred.';\n            this.createDivMessage('mmogame-error', message);\n        }\n\n        createButtonHelp(parent, left, top) {\n            return this.createDOMElement('img', {\n                parent: parent,\n                classnames: 'mmogame-button-help',\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                },\n                attributes: {\n                    src: 'assets/help.svg',\n                    alt: this.getStringM('js_help'),\n                    role: 'button',\n                },\n            });\n        }\n\n        onClickHelp() {\n            this.createDivMessageStart('test');\n        }\n\n        gateCompute() {\n            // Adjust font sizes\n            this.minFontSize *= 2;\n            this.maxFontSize *= 2;\n\n            // Compute sizes and layout\n            this.gateComputeSizes();\n            this.createArea(this.padding);\n        }\n    };\n});"],"names":["define","MmoGame","isVertical","kindSound","buttonSound","colorBackground2","nickname","user","paletteid","avatarid","iconSize","padding","area","areaRect","edtNickname","mmogameid","constructor","super","this","window","innerWidth","innerHeight","undefined","getMuteFile","playAudio","audioElement","play","error","showError","createButtonSound","parent","left","top","createDOMElement","classnames","styles","position","width","height","attributes","src","alt","getStringM","role","addEventListener","onClickSound","button","setOptions","gateOpen","pin","kinduser","url","options","getOptions","includes","isReady","gatePlayGame","userGUID","length","gateCreateScreen","save","saveGuid","crypto","randomUUID","data","callGetAttempt","colorpaletteid","gateCompute","size","maxHeight","maxWidth","labels","fontSize","findbest","minFontSize","maxFontSize","gateComputeLabelSize","heightColors","Math","floor","heightAvatars","gateCreateScreenDo","gateCreateNickName","focus","lblPalette","btnPalette","gateCreateLabelRefresh","scrollHeight","topGridPalette","gridHeightPalette","countX","countYpalette","lblAvatars","btnAvatars","countYavatars","gridHeightAvatars","addEventListenerRefresh","gateSendGetColorsAvatars","gateCreateSubmit","lblNickName","color","getContrastingColor","colorBackground","innerHTML","leftEdit","scrollWidth","debounce","gateUpdateSubmit","max","btnSubmit","cursor","visibility","value","aLabel","instance","i","label","document","createElement","style","whiteSpace","font","appendChild","removeChild","gateShowAvatars","countY","avatarids","avatars","querySelectorAll","forEach","element","remove","fragment","createDocumentFragment","avatar","count","leftOriginal","w","round","avatarImagePath","btn","createCenterImageButton","classList","add","id","gateUpdateAvatar","leftPalette","topPalette","countXpalette","leftAvatars","topAvatars","countXavatars","updatePalette","arguments","updateAvatars","require","Ajax","params","colorpalettes","call","methodname","args","done","_ref","colorpaletteids","gateShowColorPalettes","fail","canvasColor","canvasSize","parsedPalettes","map","palette","split","parseInt","iy","ix","canvas","showColorPalette","gateUpdateColorPalette","borderStyle","Object","assign","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","hasAvatar","hasPalette","hasNickname","gateComputeSizes","computeSizes","title","classLabel","classButton","updateColors","Array","from","getElementsByClassName","createArea","body","right","bottom","overflow","offsetWidth","offsetHeight","createDivMessage","message","divMessageHelp","createDivMessageDo","divMessage","createNicknameAvatar","prefixclassname","topNickname","widthNickname","heightNickname","topAvatar","widthAvatar","classname","leftAvatar","transform","createDivMessageStart","height1","div","textAlign","paddingLeft","paddingRight","showHelpScreen","extraparams","response","openGame","processGetAttempt","JSON","parse","heightmessage","divMessageBackground","createDiv","background","getColorHex","autoResizeText","setColors","colors","name","createButtonHelp","onClickHelp"],"mappings":"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"}