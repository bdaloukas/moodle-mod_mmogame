{"version":3,"file":"mmogametypequiz.min.js","sources":["../src/mmogametypequiz.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mod_mmogame/mmogameui'], function(MmoGameUI) {\n    return class MmoGameTypeQuiz extends MmoGameUI {\n        kinduser;\n        user;\n        url;\n        pin;\n        labelTimer;\n        timeForSendFastJson = 3000;\n        timefastjson;\n        type;\n\n        // Colors.\n        colorScore;\n        colorScore2;\n\n        /**\n         * Base class for Quiz mmmogame\n         *\n         * @module mmogametype_quiz\n         * @copyright 2024 Vasilis Daloukas\n         * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n         */\n\n        constructor(type) {\n            super();\n            this.type = type;\n        }\n\n        /**\n         * Initializes the game by loading required audio assets.\n         */\n        openGame() {\n            super.openGame(); // Call the parent class method\n\n            // Optimized Audio Loading\n            this.audioYes = new Audio('assets/yes1.mp3');\n            this.audioYes.load();\n            this.audioNo = new Audio('assets/no1.mp3');\n            this.audioNo.load();\n        }\n\n        /**\n         * Creates a vertical layout for the quiz screen.\n         *\n         * @param {number}left\n         * @param {number}top\n         * @param {number}width\n         * @param {boolean}onlyMetrics\n         * @param {number}fontSize\n         * @param {boolean} disabled - Whether user input should be disabled.\n         */\n        createAnswer(left, top, width, onlyMetrics, fontSize, disabled) {\n            return this.createAnswerMultichoice(left, top, width, onlyMetrics, fontSize, disabled);\n        }\n\n        /**\n         * Creates multiple-choice answer options.\n         *\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} width - The maximum width available for answers.\n         * @param {boolean} onlyMetrics - Whether to only calculate size metrics.\n         * @param {number} fontSize - The font size for answer text.\n         * @param {boolean} disabled - Whether the answers are disabled.\n         * @returns {number} The total height used by the answer options.\n         */\n        createAnswerMultichoice(left, top, width, onlyMetrics, fontSize, disabled) {\n            const n = this.answers ? this.answers.length : 0;\n            const aChecked = this.answer?.split(\",\").filter(Boolean) || [];\n            const fragment = document.createDocumentFragment(); // âœ… Batch DOM updates\n\n            const retSize = [0, 0];\n            const checkboxSize = Math.round(fontSize);\n            this.aItemAnswer = Array(n);\n            this.aItemLabel = Array(n);\n            this.aItemCorrectX = new Array(n);\n\n            // Iterate over each answer\n            for (let i = 0; i < n; i++) {\n                const label = this.createDOMElement('label', {\n                    parent: null,\n                    classnames: 'mmogame-quiz-label' + i,\n                    styles: {\n                        position: 'absolute',\n                        width: `${width - fontSize - this.padding}px`,\n                        fontSize: `${fontSize}px`,\n                        color: this.getContrastingColor(this.colorBackground),\n                    }\n                });\n                label.innerHTML = this.answers[i];\n\n                if (onlyMetrics) {\n                    this.area.appendChild(label);\n                    const newSize = label.scrollWidth + fontSize + this.padding;\n                    retSize[0] = Math.max(retSize[0], newSize);\n                    retSize[1] += Math.max(label.scrollHeight, fontSize) + this.padding;\n                    this.area.removeChild(label);\n                    continue;\n                }\n\n                label.htmlFor = \"mmogame_quiz_input\" + i;\n                label.style.left = `${left + fontSize + this.padding}px`;\n                label.style.top = `${top}px`;\n                label.style.align = \"left\";\n                label.style.color = this.getContrastingColor(this.colorBackground);\n\n                // Create the checkbox\n                const checked = aChecked.includes(this.answersID[i]);\n                const item = this.createRadiobox(this.body, checkboxSize, this.colorBackground2, this.colorScore,\n                    checked, disabled);\n                item.style.position = \"absolute\";\n                item.style.left = `${left}px`;\n                item.style.top = `${top}px`;\n                item.id = \"mmogame_quiz_input\" + i;\n\n                // Event listeners for interactions\n                item.addEventListener('click', () => {\n                    if (!item.classList.contains(\"disabled\")) {\n                        this.onClickRadio(i, this.colorBackground2, this.colorScore);\n                    }\n                });\n\n                label.addEventListener('click', () => {\n                    this.onClickRadio(i, this.colorBackground2, this.colorScore);\n                });\n\n                fragment.appendChild(item);\n                this.area.appendChild(label);\n\n                const heightLabel = label.scrollHeight;\n                if (heightLabel > fontSize) {\n                    item.style.top = Math.round(top + (heightLabel - fontSize) / 2) + \"px\";\n                }\n\n                this.aItemAnswer[i] = item;\n                this.aItemCorrectX[i] = left + fontSize + this.padding;\n                this.aItemLabel[i] = label;\n\n                // Adjust positioning\n                top += Math.max(label.scrollHeight, fontSize) + this.padding;\n            }\n\n            this.area.appendChild(fragment); // Batch insert into DOM\n\n            return onlyMetrics ? retSize : top;\n        }\n\n        /**\n         * Handles radio button click events for answers.\n         *\n         * @param {number} index - The index of the clicked radio button.\n         * @param {string} colorBack - The background color for the radio button.\n         * @param {string} color - The color for the radio button when selected.\n         */\n        onClickRadio(index, colorBack, color) {\n            if (this.aItemAnswer[index].classList.contains(\"disabled\")) {\n                return;\n            }\n\n            // Update the selected radio button and deselect others\n            this.aItemAnswer.forEach((item, i) => {\n                const isDisabled = item.classList.contains(\"disabled\");\n                if (i === index) {\n                    item.classList.add(\"checked\");\n                    this.answerid = this.answersID[i];\n                } else {\n                    item.classList.remove(\"checked\");\n                }\n\n                this.drawRadio(item, isDisabled ? colorBack : 0xFFFFFF, color);\n            });\n\n            // Send the answer\n            this.callSetAnswer();\n        }\n\n        /**\n         * Generates an SVG for a correct or incorrect icon.\n         *\n         * @param {number} size - The size of the SVG.\n         * @param {boolean} iscorrect - Whether the answer is correct.\n         * @param {int} colorCorrect - Color for correct answers.\n         * @param {int} colorError - Color for incorrect answers.\n         * @returns {string} The SVG markup as a string.\n         */\n        getSVGcorrect(size, iscorrect, colorCorrect, colorError) {\n            if (iscorrect) {\n                let c = colorCorrect !== undefined ? this.getColorHex(colorCorrect) : '#398439';\n                return \"<svg aria-hidden=\\\"true\\\" class=\\\"svg-icon iconCheckmarkLg\\\" width=\\\"\" + size + \"\\\" height=\\\"\" + size +\n                    \"\\\" viewBox=\\\"0 0 36 36\\\"><path fill=\\\"\" + c + \"\\\" d=\\\"m6 14 8 8L30 6v8L14 30l-8-8v-8z\\\"></path></svg>\";\n            } else {\n                let c = colorError !== undefined ? this.getColorHex(colorError) : '#398439';\n                return \"<svg width=\\\"\" + size + \"\\\" height=\\\"\" + size +\n                    \"\\\" class=\\\"bi bi-x-lg\\\" viewBox=\\\"0 0 18 18\\\"> <path fill=\\\"\" + c +\n                    `\" d=\"M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 \n                1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z\"/></svg>`;\n            }\n        }\n\n        /**\n         * Disables all answer inputs to prevent further interaction.\n         */\n        disableInput() {\n            if (!this.aItemAnswer) {\n                return;\n            }\n\n            this.aItemAnswer.forEach(item => {\n                item.classList.add(\"disabled\");\n                item.setAttribute(\"disabled\", \"true\"); // Ensuring proper disabling\n                this.drawRadio(item, this.colorScore, this.colorBackground2); // Update styling\n            });\n        }\n        /**\n         * Sends periodic fast JSON updates to the server.\n         */\n        /**\n         * Improved AJAX request using Fetch API instead of XMLHttpRequest\n         */\n        async sendFastJSON() {\n            // Clear any existing timeout before setting a new one\n            if (this.timeoutFastJSON !== undefined) {\n                clearTimeout(this.timeoutFastJSON);\n            }\n\n            this.timeoutFastJSON = setTimeout(async() => {\n                try {\n                    // Create URL-encoded form data\n                    const formData = new URLSearchParams();\n                    formData.append(\"fastjson\", this.fastjson.toString());\n                    formData.append(\"type\", this.type);\n\n                    // Send POST request with application/x-www-form-urlencoded format\n                    const response = await fetch(`${this.url}/state.php`, {\n                        method: 'POST',\n                        headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n                        body: formData.toString(),\n                    });\n\n                    // Check if the response is successful\n                    if (!response.ok) {\n                        throw new Error(`Server responded with status ${response.status}`);\n                    }\n\n                    // Read server response\n                    const data = await response.text();\n                    this.processFastJson(data);\n                } catch (error) {\n                    this.showError('Error sending Fast JSON:', error);\n                }\n            }, this.timeForSendFastJson);\n        }\n\n\n        getStringT(name) {\n            return M.util.get_string(name, 'mmogametype_quiz');\n        }\n\n        /**\n         * Creates a percentage-based score display using createDOMElement.\n         *\n         * @param {any} parent\n         * @param {string} prefixclassname\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {boolean} createAddScore\n         * @param {number} colorBackground\n         * */\n        createDivScorePercent(parent, prefixclassname, left, top,\n                              createAddScore, colorBackground) {\n            const colorText = this.getContrastingColor(colorBackground);\n            // Create the main button container\n            const divMain = this.createDOMElement('div', {\n                parent: parent,\n                classnames: `${prefixclassname}-main`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                    border: \"0px solid \" + this.getColorHex(colorBackground),\n                    boxShadow: \"inset 0 0 0.125em rgba(255, 255, 255, 0.75)\",\n                    background: this.getColorHex(colorBackground),\n                    color: colorText,\n                    borderRadius: createAddScore ? 0 : `${this.iconSize}px`,\n                },\n                attributes: {\n                    disabled: true,\n                    innerHTML: '',\n                },\n            });\n\n            let heightLine1, heightLine2, heightLine3;\n            if (createAddScore) {\n                const maxHeight = this.iconSize;\n                heightLine1 = Math.round(maxHeight / 2);\n                heightLine2 = heightLine3 = Math.round((maxHeight - heightLine1) / 2);\n            } else {\n                const maxHeight = this.iconSize;\n                heightLine1 = heightLine2 = Math.round(maxHeight / 2);\n                heightLine3 = maxHeight - heightLine1 - heightLine2;\n            }\n            const topLine2 = top + heightLine1;\n            const topLine3 = topLine2 + heightLine2;\n\n            // Create the ranking grade label (line1)\n            const rankLabel = this.createDOMElement('div', {\n                parent: parent,\n                classnames: `${prefixclassname}-rank`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    width: `${this.iconSize}px`,\n                    top: `${top}px`,\n                    height: `${heightLine1}px`,\n                    textAlign: 'center',\n                    color: colorText,\n                },\n                attributes: {\n                    title: this.getStringM('js_ranking_grade'),\n                },\n            });\n\n            // Create the main score label (line2)\n            const scoreLabel = this.createDOMElement('div', {\n                parent: parent,\n                classnames: `${prefixclassname}-score`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    width: `${createAddScore ? this.iconSize / 2 : this.iconSize}px`,\n                    top: `${topLine2}px`,\n                    height: `${heightLine2}px`,\n                    lineHeight: `${this.iconSize / 2}px`,\n                    textAlign: 'center',\n                    color: colorText,\n                },\n                attributes: {\n                    title: this.getStringM('js_grade'),\n                },\n            });\n\n            // Create the percentage label (line2)\n            let percentLabel;\n            if (createAddScore) {\n                percentLabel = this.createDOMElement('div', {\n                    parent: parent,\n                    classnames: `${prefixclassname}-percent`,\n                    styles: {\n                        position: 'absolute',\n                        left: `${left + this.iconSize / 2}px`,\n                        width: `${this.iconSize / 2}px`,\n                        top: `${topLine2}px`,\n                        height: `${heightLine2}px`,\n                        textAlign: 'center',\n                        fontSize: `${this.iconSize / 3}px`,\n                        lineHeight: `${this.iconSize / 3}px`,\n                        color: colorText,\n                    },\n                    attributes: {\n                        title: this.getStringM('js_percent'),\n                    },\n                });\n            }\n\n            // Create the additional score label (line3)\n            let addScoreLabel;\n            if (createAddScore) {\n                addScoreLabel = this.createDOMElement('div', {\n                    parent: parent,\n                    classnames: `${prefixclassname}-addscore`,\n                    styles: {\n                        position: 'absolute',\n                        left: `${left + this.iconSize / 2}px`,\n                        width: `${this.iconSize / 2}px`,\n                        top: `${topLine3}px`,\n                        height: `${heightLine3}px`,\n                        textAlign: 'center',\n                        fontWeight: 'bold',\n                        color: colorText,\n                    },\n                    attributes: {\n                        title: this.getStringM('js_percent'),\n                    },\n                });\n            }\n\n            return {divMain: divMain, lblRank: rankLabel, lblScore: scoreLabel, lblPercent: percentLabel,\n                lblAddScore: addScoreLabel, heightLine1: heightLine1, heightLine2: heightLine2, heightLine3: heightLine3};\n        }\n\n\n        showScore(player, score, rank, percent, rankpercent, showPercent) {\n            let showScore = true;\n            if (rank !== undefined && rankpercent !== undefined) {\n                if (parseInt(rankpercent) < parseInt(rank)) {\n                    showScore = false;\n                }\n            }\n\n            if (rank !== '') {\n                player.lblRank.innerHTML = `# ${rank}`;\n                this.autoResizeText(player.lblRank, 0.8 * this.iconSize, player.heightLine1, false, 0, 0);\n            } else {\n                player.lblRank.innerHTML = '';\n            }\n\n            let s = showScore ? `<b>${score}</b>` : '';\n            if (player.lblPercent === undefined && parseInt(percent) !== 0 && showPercent) {\n                s = `<b>${percent} %</b>`;\n            }\n            if (player.cacheScore !== s) {\n                player.cacheScore = s;\n                player.lblScore.innerHTML = s;\n                this.autoResizeText(player.lblScore, 0.9 * this.iconSize / 2, player.heightLine2, false, 0, 0);\n            }\n\n            if (player.lblPercent !== undefined) {\n                s = !showScore || (showPercent && parseInt(percent) !== 0) ? `<b>${percent} %</b>` : '';\n                if (player.cachePercent !== s) {\n                    player.cachePercent = s;\n                    player.lblPercent.innerHTML = s;\n                    this.autoResizeText(player.lblPercent, 0.9 * this.iconSize / 2, player.heightLine2, false, 0, 0);\n                }\n            }\n        }\n\n        /**\n         * Creates and displays the definition area for the question.\n         *\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} width - The width of the definition area.\n         * @param {number} height - The height of the definition area.\n         * @param {boolean} onlyMetrics - Whether to only measure size.\n         * @param {number} fontSize - The font size for the definition text.\n         * @param {string} definition\n         * @returns {Array} The width and height of the definition area.\n         */\n        createDefinition(left, top, width, height, onlyMetrics, fontSize, definition) {\n            const definitionDiv = this.createDOMElement(\n                'div',\n                {\n                    parent: null,\n                    classnames: 'mmogame-quiz-definition',\n                    styles: {\n                        position: 'absolute',\n                        width: `${width}px`,\n                        fontSize: `${fontSize}px`,\n                    }\n                }\n            );\n            definitionDiv.innerHTML = definition;\n\n            if (onlyMetrics) {\n                document.body.appendChild(definitionDiv);\n\n                const size = [definitionDiv.scrollWidth, definitionDiv.scrollHeight];\n\n                document.body.removeChild(definitionDiv);\n                return size;\n            }\n\n            // Apply styling and position\n            definitionDiv.style.background = this.getColorHex(this.colorBackground2);\n            definitionDiv.style.color = this.getContrastingColor(this.colorBackground2);\n            definitionDiv.style.left = `${left}px`;\n            definitionDiv.style.top = `${top}px`;\n            if (height !== 0) {\n                definitionDiv.style.height = `${height}px`;\n            }\n            definitionDiv.style.padding = `0 ${this.padding}px`;\n\n            this.area.appendChild(definitionDiv);\n\n            return [definitionDiv.scrollWidth, definitionDiv.scrollHeight];\n        }\n\n\n        /**\n         * Sends the selected answer to the server using Moodle's AJAX API.\n         * @param {string} subcommand\n         */\n        callSetAnswer(subcommand = '') {\n            // Clear existing timeout\n            if (this.timerTimeout !== undefined) {\n                clearTimeout(this.timerTimeout);\n            }\n\n            this.timerTimeout = undefined;\n\n            require(['core/ajax'], (Ajax) => {\n                const params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    attempt: this.attempt,\n                    answer: this.answer || null,\n                    answerid: this.answerid || null,\n                    subcommand: subcommand,\n                };\n\n                Ajax.call([{\n                    methodname: 'mmogametype_quiz_set_answer', // API endpoint\n                    args: params,\n                }])[0].done((response) => {\n                    this.processSetAnswer(JSON.parse(response)); // Process the server's response\n                }).fail((error) => {\n                    this.showError(error); // Handle errors\n                });\n            });\n        }\n\n        /**\n         * Sets the colors for different UI elements and repairs them if necessary.\n         *\n         * @param {Array} colors - Array of color codes to be applied.\n         */\n        setColors(colors) {\n            super.setColors(colors);\n\n            // Assign specific colors to UI elements\n            this.colorScore = colors[2];\n            this.colorScore2 = colors[4];\n        }\n\n        updateNicknameAvatar(player, avatarSrc, nickname, nicknameWidth, nicknameHeight) {\n            if (avatarSrc === undefined) {\n                avatarSrc = \"\";\n            }\n            if (nickname === undefined) {\n                nickname = \"\";\n            }\n\n            if (avatarSrc === \"\" && nickname === \"\") {\n                player.avatarElement.style.visibility = 'hidden';\n                player.nicknameElement.style.visibility = 'hidden';\n                return;\n            }\n\n            if (player.cacheNickname !== nickname || nickname === \"\") {\n                player.cacheNickname = nickname;\n                let s = nickname;\n\n                if (nickname.length === 0) {\n                    const filenameWithExt = avatarSrc.split('/').pop(); // Extract file name\n                    // Remove extension, fallback if no extension\n                    s = filenameWithExt.split('.').slice(0, -1).join('.') || filenameWithExt;\n                }\n\n                s = this.repairNickname(s);\n                player.nicknameElement.innerHTML = s;\n                player.nicknameElement.style.textAlign = \"center\";\n                player.nicknameElement.style.color = this.getContrastingColor(this.colorBackground);\n                this.autoResizeText(player.nicknameElement, nicknameWidth, nicknameHeight, true, 0, 0);\n            }\n\n            if (avatarSrc !== player.cacheAvatar) {\n                player.avatarElement.src = avatarSrc !== \"\" ? \"assets/avatars/\" + avatarSrc : \"\";\n                player.cacheAvatar = avatarSrc;\n            }\n\n            player.avatarElement.alt = player.cacheNickname;\n            player.avatarElement.style.visibility = 'visible';\n\n            player.nicknameElement.style.visibility = 'visible';\n        }\n\n        computeBestFontSize(json) {\n            let maxHeight, definitionWidth;\n\n            maxHeight = this.areaRect.height - this.iconSize - 3 * this.padding;\n            definitionWidth = this.isVertical ? this.areaRect.width : Math.round((this.areaRect.width - this.padding) / 2);\n\n            for (let step = 1; step <= 2; step++) {\n                let defSize;\n                this.fontSize = this.findbest(step === 1 ? this.minFontSize : this.minFontSize / 2, this.maxFontSize,\n                    (fontSize) => {\n                        defSize = this.createDefinition(0, 0, definitionWidth, 0, true, fontSize,\n                            json);\n                        if (defSize[0] > definitionWidth) {\n                            return 1;\n                        }\n                        let ansSize = this.createAnswer(0, 0, definitionWidth, true, fontSize, false);\n                        if (ansSize[0] > definitionWidth) {\n                            return 1;\n                        }\n                        if (this.isVertical) {\n                            return defSize[1] + ansSize[1] < maxHeight ? -1 : 1;\n                        } else {\n                            return defSize[1] < maxHeight && ansSize[1] < maxHeight ? -1 : 1;\n                        }\n                    });\n                if (defSize[0] <= definitionWidth && defSize[1] <= this.areaRect.height) {\n                    break;\n                }\n            }\n            return [definitionWidth];\n        }\n\n        createNextButton(left, top) {\n            let btn = super.createImageButton(this.area, 'mmogame-quiz-next',\n                left, top, 0, this.iconSize, 'assets/next.svg');\n            btn.title = this.getStringM('js_next_question');\n            btn.addEventListener(\"click\", () => {\n                this.callGetAttempt();\n                this.area.removeChild(btn);\n            });\n        }\n\n        processFastJson(response) {\n            if (response === '') {\n                this.sendFastJSON();\n                return;\n            }\n            let a = response.split('-'); // Are state,timefastjson.\n            let newstate = a.length > 0 ? parseInt(a[0]) : 0;\n            let newTimeFastJSON = a.length > 1 ? parseInt(a[1]) : 0;\n\n            if (this.timefastjson === null) {\n                this.timefastjson = 0;\n            }\n\n            if (newstate !== this.state || newTimeFastJSON !== this.timefastjson) {\n                this.removeMessageDivs();\n                this.callGetAttempt();\n                return;\n            }\n\n            this.sendFastJSON();\n        }\n\n        processGetAttempt(json) {\n            this.fastjson = parseInt(json.fastjson);\n            this.timefastjson = parseInt(json.timefastjson);\n\n            // Calculate time difference and set up the clock\n            this.computeDifClock(json.time);\n        }\n    };\n    });"],"names":["define","MmoGameUI","kinduser","user","url","pin","labelTimer","timeForSendFastJson","timefastjson","type","colorScore","colorScore2","constructor","super","this","openGame","audioYes","Audio","load","audioNo","createAnswer","left","top","width","onlyMetrics","fontSize","disabled","createAnswerMultichoice","n","answers","length","aChecked","answer","split","filter","Boolean","fragment","document","createDocumentFragment","retSize","checkboxSize","Math","round","aItemAnswer","Array","aItemLabel","aItemCorrectX","i","label","createDOMElement","parent","classnames","styles","position","padding","color","getContrastingColor","colorBackground","innerHTML","area","appendChild","newSize","scrollWidth","max","scrollHeight","removeChild","htmlFor","style","align","checked","includes","answersID","item","createRadiobox","body","colorBackground2","id","addEventListener","classList","contains","onClickRadio","heightLabel","index","colorBack","forEach","isDisabled","add","answerid","remove","drawRadio","callSetAnswer","getSVGcorrect","size","iscorrect","colorCorrect","colorError","undefined","getColorHex","disableInput","setAttribute","sendFastJSON","timeoutFastJSON","clearTimeout","setTimeout","async","formData","URLSearchParams","append","fastjson","toString","response","fetch","method","headers","ok","Error","status","data","text","processFastJson","error","showError","getStringT","name","M","util","get_string","createDivScorePercent","prefixclassname","createAddScore","colorText","divMain","iconSize","height","border","boxShadow","background","borderRadius","attributes","heightLine1","heightLine2","heightLine3","maxHeight","topLine2","topLine3","rankLabel","textAlign","title","getStringM","scoreLabel","lineHeight","percentLabel","addScoreLabel","fontWeight","lblRank","lblScore","lblPercent","lblAddScore","showScore","player","score","rank","percent","rankpercent","showPercent","parseInt","autoResizeText","s","cacheScore","cachePercent","createDefinition","definition","definitionDiv","subcommand","arguments","timerTimeout","require","Ajax","params","mmogameid","attempt","call","methodname","args","done","processSetAnswer","JSON","parse","fail","setColors","colors","updateNicknameAvatar","avatarSrc","nickname","nicknameWidth","nicknameHeight","avatarElement","visibility","nicknameElement","cacheNickname","filenameWithExt","pop","slice","join","repairNickname","cacheAvatar","src","alt","computeBestFontSize","json","definitionWidth","areaRect","isVertical","step","defSize","findbest","minFontSize","maxFontSize","ansSize","createNextButton","btn","createImageButton","callGetAttempt","a","newstate","newTimeFastJSON","state","removeMessageDivs","processGetAttempt","computeDifClock","time"],"mappings":"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"}