{"version":3,"file":"mmogametypequizalone.min.js","sources":["../src/mmogametypequizalone.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mmogametype_quiz/mmogametypequiz'],\n    function(MmoGameTypeQuiz) {\n    return class MmoGameTypeQuizAlone extends MmoGameTypeQuiz {\n\n        cacheScore;\n\n        avatarElement;\n        nicknameElement;\n\n        constructor() {\n            super();\n            this.cIcons = this.hasHelp() ? 5 : 4;\n            this.type = 'alone';\n        }\n\n        createIconBar() {\n            let i = 0;\n            const step = this.iconSize + this.padding;\n\n            const nicknameHeight = Math.round(this.iconSize / 3);\n\n            [this.nicknameElement, this.avatarElement] = this.createNicknameAvatar('mmogame-quiz-alone',\n                Math.round(this.padding + (i++) * step),\n                this.padding,\n                2 * this.iconSize + this.padding,\n                nicknameHeight,\n                this.padding + nicknameHeight,\n                this.iconSize);\n/* A\n            this.createDivScorePercent('mmogame-quiz-alone', this.padding + (i++) * step,\n                this.padding + this.nickNameHeight, this.getConstrastingColor(this.color), true);\n\n            this.createButtonSound(this.padding + (i++) * step,\n                this.padding + this.nickNameHeight);\n            if (this.hasHelp()) {\n                this.createButtonHelp(this.padding + (i++) * step, this.padding);\n                this.buttonHelp.addEventListener(\"click\", () => this.onClickHelp(this.buttonHelp));\n            }\n\n            let copyrightHeight = this.getCopyrightHeight();\n\n            this.areaRect = {\n                // Left: this.padding,\n                top: 2 * this.padding + this.iconSize + this.nickNameHeight,\n                width: Math.round(window.innerWidth - 2 * this.padding),\n                height: Math.round(window.innerHeight - this.areaTop - copyrightHeight),\n            };\n\n            this.createDivColor(\n                this.body,\n                'mmogame-quiz-alone-color',\n                0,\n                window.innerHeight - copyrightHeight - 1,\n                window.innerWidth - 1,\n                copyrightHeight,\n                this.getColorGray(this.colorCopyright)\n            );\n*/\n        }\n\n        processSetAnswer(json) {\n            this.correct = json.correct;\n\n            this.playAudio(json.iscorrect !== 0 ? this.audioYes : this.audioNo);\n\n            if (json.correct !== undefined && this.qtype === \"multichoice\") {\n                this.updateScreenAfterAnswerMultichoice();\n            }\n\n            this.disableInput();\n\n            if (this.btnSubmit) {\n                this.body.removeChild(this.btnSubmit);\n                this.btnSubmit = undefined;\n            }\n\n            const btn = super.createImageButton(\n                this.area,\n                'mmogame-quiz-next',\n                this.nextLeft,\n                this.nextTop,\n                0,\n                this.iconSize,\n                'assets/next.svg'\n            );\n            btn.addEventListener(\"click\", () => {\n                this.callGetAttempt();\n                this.area.removeChild(btn);\n            });\n\n            this.showScore(json);\n        }\n\n        onServerFastJson(response) {\n            const [state, timefastjson] = response.split(\"-\").map(Number);\n            if (timefastjson !== this.timefastjson || state !== this.state) {\n                this.sendGetAttempt({mmogameid: this.mmogameid, kinduser: this.kinduser, user: this.user});\n                return;\n            }\n\n            this.sendFastJSON();\n        }\n\n        processGetAttempt(json) {\n            // Calculate time difference and set up the clock\n            this.computeDifClock(json.time, json.timestart, json.timeclose);\n\n            if (parseInt(json.state) === 0) {\n                json.qtype = '';\n                if (json.colors) {\n                    this.setColorsString(json.colors);\n                    this.createIconBar();\n                }\n                this.showScore(json);\n                this.createDivMessageStart(this.getStringM('js_wait_to_start'));\n                return;\n            }\n\n            // Set colors if provided\n            if (json.colors) {\n                this.setColorsString(json.colors);\n                this.createIconBar(); // Initialize the top bar with icons\n            }\n\n            // Update the window title if a name is provided\n            if (json.name) {\n                document.title = json.name;\n            }\n\n            // Set help URL if available\n            if (json.helpurl) {\n                this.helpUrl = json.helpurl;\n            }\n\n            // Handle error messages from the server\n            if (json.errorcode) {\n                this.createDivMessage('mmogame-error', json.errorcode);\n                return;\n            }\n\n            // Update game state and user-related data\n            this.state = parseInt(json.state, 10);\n            this.fastjson = json.fastjson;\n            this.timefastjson = parseInt(json.timefastjson, 10);\n            this.updateButtonsAvatar(1, this.avatarElement, this.nicknameElement, json.avatar, json.nickname, this.iconSize,\n                Math.round(this.iconSize / 3));\n\n            this.attempt = json.attempt;\n\n            // Process question type and answers\n            this.qtype = json.qtype;\n            if (this.qtype === 'multichoice') {\n                this.answers = [];\n                this.answersID = json.answerids;\n                json.answers.forEach((answer, index) => {\n                    this.answers[index] = this.repairP(answer); // Process each answer\n                });\n            }\n            this.answer = json.answer ?? undefined;\n\n            // Handle end-of-game scenarios\n            this.endofgame = json.endofgame !== undefined && json.endofgame !== 0;\n            this.definition = this.repairP(json.definition);\n            this.errorcode = json.errorcode;\n\n            if (json.state !== 0) {\n                this.createScreen(json, false);\n            }\n\n            this.updateLabelTimer(); // Start or update the timer\n            this.sendFastJSON(); // Send fast JSON updates\n\n            if (this.btnSubmit) {\n                this.btnSubmit.style.visibility = \"hidden\";\n            }\n        }\n\n        showScore({rank, rankc, sumscore}) {\nreturn;\n            if (rank !== undefined && rankc !== undefined) {\n                if (parseInt(rank) < parseInt(rankc)) {\n                    this.completedrank = '';\n                    this.rank = `# ${rank}`;\n                } else {\n                    this.rank = '';\n                    this.completedrank = `# ${rankc}`;\n                }\n            }\n\n            const s = sumscore === undefined ? '' : `<b>${sumscore}</b>`;\n            if (this.cacheScore !== s) {\n                this.cacheScore = s;\n                this.labelScore.innerHTML = s;\n                this.autoResizeText(this.labelScore, 0.8 * this.iconSize / 2, this.iconSize / 2, false, 0, 0, 1);\n            }\n        }\n\n        showHelpScreen(div) {\n            div.innerHTML = `\n                <br>\n                <div>${this.getStringG('js_alone_help')}</div><br>\n\n                <table border=1>\n                    <tr>\n                        <td><img height=\"83\" src=\"assets/aduel/example2.png\" alt=\"\" /></td>\n                        <td>${this.getStringG('js_aduel_example2')}</td>\n                    </tr>\n                </table>\n            `;\n        }\n    };\n});"],"names":["define","MmoGameTypeQuiz","cacheScore","avatarElement","nicknameElement","constructor","super","this","cIcons","hasHelp","type","createIconBar","i","step","iconSize","padding","nicknameHeight","Math","round","createNicknameAvatar","processSetAnswer","json","correct","playAudio","iscorrect","audioYes","audioNo","undefined","qtype","updateScreenAfterAnswerMultichoice","disableInput","btnSubmit","body","removeChild","btn","createImageButton","area","nextLeft","nextTop","addEventListener","callGetAttempt","showScore","onServerFastJson","response","state","timefastjson","split","map","Number","sendFastJSON","sendGetAttempt","mmogameid","kinduser","user","processGetAttempt","computeDifClock","time","timestart","timeclose","parseInt","colors","setColorsString","createDivMessageStart","getStringM","name","document","title","helpurl","helpUrl","errorcode","createDivMessage","fastjson","updateButtonsAvatar","avatar","nickname","attempt","answers","answersID","answerids","forEach","answer","index","repairP","endofgame","definition","createScreen","updateLabelTimer","style","visibility","_ref","rank","rankc","sumscore","showHelpScreen","div","innerHTML","getStringG"],"mappings":"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"}