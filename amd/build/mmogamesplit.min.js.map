{"version":3,"file":"mmogamesplit.min.js","sources":["../src/mmogamesplit.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\ndefine(['mod_mmogame/mmogame', ''], function(MmoGame) {\n    return class MmoGameTypeSplit extends MmoGame {\n        updateDelay = 200;\n        countX;\n        countY;\n        countAll;\n        screen;\n\n        gateShowColorPalettes(parent, countY, colorpaletteids, colorpalettes) {\n            const left = this.padding;\n            const topButton = this.iconSize + 2 * this.padding + Math.round(this.fontSize);\n            const restHeight = window.innerHeight - topButton - countY * (this.iconSize + this.padding);\n            const top = topButton + Math.round(restHeight / 2);\n            const countX = 1;\n            let i = 0; // Counter for color palettes\n            const count = colorpalettes.length;\n            this.canvasColor = undefined;\n            const canvasSize = this.iconSize - this.padding * 3 / 2;\n            const parsedPalettes = colorpalettes.map(palette =>\n                palette.split(\",\").map(value => parseInt(value, 10) || 0)\n            );\n            let acanvas = [];\n            const fragment = document.createDocumentFragment();\n            for (let iy = 0; iy < countY; iy++) {\n                for (let ix = 0; ix < countX; ix++) {\n                    // Check if we exceed available palettes or encounter invalid data\n                    if (i >= count || !parsedPalettes[i] || !colorpaletteids[i]) {\n                        i++; // Increment and continue if invalid\n                        continue;\n                    }\n\n                    // Create a new canvas element\n                    let canvas = document.createElement('canvas');\n                    canvas.style.position = \"absolute\";\n                    canvas.style.left = `${left + ix * (this.iconSize + this.padding)}px`;\n                    canvas.style.top = `${top + iy * (this.iconSize + this.padding)}px`;\n                    canvas.width = canvasSize;\n                    canvas.height = canvasSize;\n                    canvas.style.cursor = 'pointer';\n                    canvas.classList.add(\"mmogame_color\");\n\n                    acanvas.push(canvas);\n\n                    // Append canvas to the area\n                    fragment.appendChild(canvas);\n\n                    // Render the color palette on the canvas\n                    const palette = parsedPalettes[i];\n                    this.showColorPalette(canvas, palette);\n                    // Get the palette ID and attach a click event listener\n                    let id = colorpaletteids[i];\n                    canvas.addEventListener(\"click\", () => {\n                        this.gateUpdateColorPalette(canvas, id, palette);\n                    });\n\n                    i++;\n                }\n            }\n            parent.appendChild(fragment);\n\n            return acanvas;\n        }\n\n        gateUpdateColorPalette(canvas, id, palette) {\n            if (this.canvasColor !== undefined) {\n                this.canvasColor.style.borderStyle = \"none\";\n            }\n            this.canvasColor = canvas;\n            let w = Math.round(this.padding) + \"px\";\n\n            Object.assign(canvas.style, {\n                borderStyle: \"outset\",\n                borderLeftWidth: w,\n                borderTopWidth: w,\n                borderRightWidth: w,\n                borderBottomWidth: w,\n            });\n            this.paletteid = id;\n            this.palette = palette;\n        }\n\n        gateUpdateAvatar(split, avatar, id) {\n            const sp = this.splits[split];\n            if (sp.avatar !== undefined) {\n                sp.avatar.style.borderStyle = \"none\";\n            }\n            sp.avatar = avatar;\n            avatar.style.borderStyle = \"outset\";\n\n            const w = Math.round(this.padding) + \"px\";\n\n            avatar.style.borderLeftWidth = w;\n            avatar.style.borderTopWidth = w;\n            avatar.style.borderRightWidth = w;\n            avatar.style.borderBottomWidth = w;\n\n            sp.avatarid = id;\n        }\n\n        updateGamepads(timestamp) {\n            const gamepads = navigator.getGamepads();\n\n            if (this.gateInfo !== undefined) {\n                this.gateInfo.textContent = Array.from(navigator.getGamepads()).filter(gp => gp !== null).length;\n            }\n\n            const n = this.splits !== undefined ? this.splits.length : 0;\n            for (let i = 0; i < gamepads.length; i++) {\n                if (!gamepads[i]) {\n                    continue;\n                }\n                if (i < n) {\n                    this.updateGamepad(timestamp, i, gamepads[i]);\n                }\n            }\n            this.updateScreen();\n        }\n\n        computeSizes(offsetY) {\n            const cIcons = 3;\n\n            const maxIconWidth = Math.floor(window.innerWidth / (this.countX * cIcons + 1.2 + this.countX / 10.0));\n            const maxIconHeight = Math.floor(window.innerHeight / (this.countY + 0.5));\n            const bodyFontSize = parseFloat(getComputedStyle(document.documentElement).fontSize);\n\n            this.iconSize = Math.min(maxIconWidth, maxIconHeight, 4 * bodyFontSize);\n            this.padding = Math.round(this.iconSize / 10);\n            this.iconSize -= this.padding;\n            this.split = {\n                offsetY: offsetY * this.iconSize,\n                width: Math.round((window.innerWidth - this.iconSize - 3 * this.padding) / this.countX),\n                height: Math.round((window.innerHeight - offsetY * this.iconSize) / this.countY - this.padding)\n            };\n            this.createArea(0, 0);\n\n            this.countXavatars = Math.floor((this.split.width - this.padding) / (this.iconSize + this.padding));\n            this.countYavatars = Math.floor((this.split.height - 2 * this.padding) / (this.iconSize + this.padding));\n            this.countPalettes = Math.floor((window.innerHeight - 3 * this.padding) / (this.iconSize + this.padding)) - 1;\n            const widthSplits = this.countX * (this.split.width + this.padding) + this.padding;\n            const space = window.innerWidth - widthSplits - this.iconSize - 2 * this.padding;\n            this.split.offsetX = Math.round(this.iconSize + this.padding + space / 2);\n\n            const max = 66;\n            if (this.countXavatars * this.countYavatars > max) {\n                if (this.countXavatars < this.countYavatars) {\n                    this.countYavatars = Math.floor(max / this.countXavatars);\n                } else {\n                    this.countXavatars = Math.floor(max / this.countYavatars);\n                }\n            }\n        }\n\n        gateCreateScreen() {\n            this.cIcons = 5;\n            this.gateCreateSidebar();\n            this.gateShowColorPalettes(this.body, this.countPalettes, this.info.colorpaletteids, this.info.colorpalettes);\n            this.splits = [];\n            for (let iY = 0; iY < this.countY; iY++) {\n                for (let iX = 0; iX < this.countX; iX++) {\n                    if (this.splits.length >= this.countAll) {\n                        break;\n                    }\n                    this.gateCreateScreenSplit(iX, iY);\n                    this.gateCreateScreenSplitSelect();\n                }\n            }\n        }\n\n        gateCreateScreenSplit(iX, iY) {\n            let parent = this.createDOMElement('div', {\n                parent: this.area,\n                classnames: 'mmogame-split',\n                styles: {\n                    position: 'absolute',\n                    left: `${this.split.offsetX + iX * (this.split.width + this.padding)}px`,\n                    top: `${iY * (this.split.height + this.padding) + this.padding}px`,\n                    width: `${this.split.width}px`,\n                    height: `${this.split.height}px`,\n                    overflow: 'hidden',\n                    border: '1px solid blue',\n                }\n            });\n\n            const labelHeight = this.countX * this.countY > 1 ? Math.round(this.iconSize / 3) : 0;\n            const sizeAvatars = this.countYavatars * (this.iconSize + this.padding);\n            const restHeight = this.split.height - labelHeight - 2 * this.padding - sizeAvatars;\n            let top = labelHeight + this.padding + Math.round(restHeight / 2);\n            const topLabel = Math.round((top - labelHeight) / 2);\n            let avatarbuttons = [];\n            let pos = (iX + this.countX * iY) * this.countYavatars * this.countXavatars;\n\n            for (let i = 0; i < this.countYavatars; i++) {\n                for (let j = 0; j < this.countXavatars; j++) {\n                    if (pos >= this.info.avatars.length) {\n                        break;\n                    }\n                    const filepath = this.info.avatars[pos];\n                    const filenameWithExt = filepath.split('/').pop();\n                    const filename = filenameWithExt.split('.').slice(0, -1).join('.');\n\n                    const btn = this.createDOMElement('img', {\n                        parent: parent,\n                        classnames: 'mmogame-button-help',\n                        styles: {\n                            position: 'absolute',\n                            left: `${this.padding + j * (this.iconSize + this.padding)}px`,\n                            top: `${top}px`,\n                            width: `${this.iconSize}px`,\n                            height: `${this.iconSize}px`,\n                        },\n                        attributes: {\n                            src: 'assets/avatars/' + filepath,\n                            alt: filename,\n                            role: 'button',\n                        },\n                    });\n                    const avatarid = this.info.avatarids[pos];\n                    const posAvatar = pos;\n                    const split = this.splits.length;\n                    btn.addEventListener(\"click\", () => {\n                        this.splits[split].avatarpos = posAvatar;\n                        this.gateUpdateAvatar(split, btn, avatarid);\n                    });\n                    avatarbuttons.push(btn);\n                    pos++;\n                }\n                top += this.iconSize + this.padding;\n            }\n\n            let labelAvatar = this.createDOMElement('label', {\n                parent: parent,\n                classnames: 'mmogame-gate-avatar-label',\n                styles: {\n                    position: 'absolute',\n                    font: 'FontAwesome',\n                    fontSize: `${labelHeight}px`,\n                    lineHeight: `${labelHeight}px`,\n                    width: '0px',\n                    height: `${labelHeight}px`,\n                    whiteSpace: 'nowrap',\n                    color: this.getContrastingColor(this.colorBackground),\n                    top: `${topLabel}px`,\n                    left: `${this.padding}px`,\n                },\n            });\n            if (this.countX * this.countY > 1) {\n                labelAvatar.innerHTML = (iX + this.countX * iY + 1);\n            }\n\n            this.splits.push(\n                {\n                    div: parent,\n                    avatarpos: -1,\n                    avatarid: null,\n                    avatarbuttons: avatarbuttons,\n                    labelAvatar: labelAvatar,\n                    lastUpdateTime: 0,\n                }\n            );\n        }\n        gategetavatar(split, i) {\n            return split * this.info.numavatars + i;\n        }\n\n        gateCreateScreenSplitSelect() {\n            const split = this.splits.length - 1;\n            const sp = this.splits[split];\n\n            // Selects a unique avatar for each player.\n            let id;\n            let selected = 0;\n\n            for (;;) {\n                id = this.info.avatarids[this.gategetavatar(split, selected)];\n                let found = false;\n                for (let i = 0; i < split - 1; i++) {\n                    const avatarpos = this.splits[i].avatarpos;\n                    if (this.info.avatarids[this.gategetavatar(i, avatarpos)] === id) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    break;\n                }\n                selected++;\n            }\n            sp.avatarpos = selected;\n            this.gateUpdateAvatar(split, sp.avatarbuttons[sp.avatarpos], id);\n        }\n\n        updateScreen() {\n            requestAnimationFrame((t) => this.updateGamepads(t));\n        }\n\n        /**\n         * Creates a percentage-based score display using createDOMElement.\n         *\n         * @param {any} parent\n         * @param {number} left - The left position in pixels.\n         * @param {boolean} showRank - .\n         * */\n        createDivScorePercent(parent, left, showRank) {\n            const colorText = this.getContrastingColor(this.colorBackground);\n            // Create the main button container\n            const divMain = this.createDOMElement('div', {\n                parent: parent,\n                classnames: 'mmogame-quiz-main',\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${this.padding}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                    border: \"0px solid \" + this.getColorHex(this.colorBackground),\n                    boxShadow: \"inset 0 0 0.125em rgba(255, 255, 255, 0.75)\",\n                    background: this.getColorHex(this.colorBackground),\n                    color: colorText,\n                    borderRadius: `${this.iconSize}px`,\n                },\n                attributes: {\n                    disabled: true,\n                    innerHTML: '',\n                },\n            });\n\n            const cellSize = showRank ? Math.round(this.iconSize / 2) : this.iconSize;\n\n            // Create the ranking grade label (line1)\n            let lblRank;\n            if (showRank) {\n                lblRank = this.createDOMElement('div', {\n                    parent: parent,\n                    classnames: `mmogame-pwn-rank`,\n                    styles: {\n                        position: 'absolute',\n                        left: `${left}px`,\n                        width: `${this.iconSize}px`,\n                        top: `${this.padding}px`,\n                        height: `${cellSize}px`,\n                        lineHeight: `${cellSize}px`,\n                        textAlign: 'center',\n                        color: colorText,\n                    },\n                    attributes: {\n                        title: this.getStringM('js_ranking'),\n                    },\n                });\n            }\n\n            // Create the main score label (line2)\n            const lblScore = this.createDOMElement('div', {\n                parent: parent,\n                classnames: `mmogame-score`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    width: `${this.iconSize}px`,\n                    top: `${showRank ? this.padding + cellSize : this.padding}px`,\n                    height: `${cellSize}px`,\n                    lineHeight: `${cellSize}px`,\n                    textAlign: 'center',\n                    color: colorText,\n                },\n                attributes: {\n                    title: this.getStringM('js_grade'),\n                },\n            });\n\n            return {divMain: divMain, lblRank: lblRank, lblScore: lblScore, cellSize: cellSize};\n        }\n\n        moveX(timestamp, split, num, direction, steps) {\n            if (split >= this.splits.length) {\n                return;\n            }\n            let sp = this.splits[split];\n            if (sp.lastUpdateTime > 0 && timestamp - sp.lastUpdateTime < this.updateDelay) {\n                return;\n            }\n            sp.lastUpdateTime = timestamp;\n\n            if (split >= this.splits.length) {\n                return;\n            }\n            this.usersecondjoystick = false;\n            split = (this.usersecondjoystick ? 2 : 1) * split + (num - 1);\n\n            const n = this.countXavatars * this.countYavatars;\n\n            let pos = this.splits[split].avatarpos;\n            let id;\n            for (; ;) {\n                pos = (pos + direction * steps + n) % n;\n                id = this.info.avatarids[this.gategetavatar(split, pos)];\n                let found = false;\n                for (let i = 0; i < this.splits.length; i++) {\n                    if (i === split) {\n                        continue;\n                    }\n                    const newid = this.splits[i].avatarid;\n                    if (newid === id) {\n                        found = true;\n                    }\n                }\n                if (found === false) {\n                    this.splits[split].avatarpos = pos;\n                    this.splits[split].avatarid = id;\n                    break;\n                }\n            }\n            this.gateUpdateAvatar(split, this.splits[split].avatarbuttons[pos], id);\n        }\n\n        moveY(timestamp, split, num, direction, steps) {\n            this.moveX(timestamp, split, num, direction, steps * this.countXavatars);\n        }\n\n        updateGamepad(timestamp, split, gamepad) {\n            const axes = gamepad.axes;\n            // Using https://luser.github.io/gamepadtest/.\n            const axisX1 = axes?.[0] ?? 0; // Left stick X\n            const axisY1 = axes?.[1] ?? 0; // Left stick Y\n            /* Const axisX2 = axes?.[5] ?? 0; // Right stick X\n            const axisY2 = axes?.[2] ?? 0; // Right stick Y\n*/\n            if (axisX1 < -0.5) {\n                this.moveX(timestamp, split, 1, -1, 1);\n            }\n            if (axisX1 > 0.5) {\n                this.moveX(timestamp, split, 1, 1, 1);\n            }\n            if (axisY1 < -0.5) {\n                this.moveY(timestamp, split, 1, -1, 1);\n            }\n            if (axisY1 > 0.5) {\n                this.moveY(timestamp, split, 1, 1, 1);\n            }\n            /*\n                            // Second joystick.\n                            if (this.usesecondjoystick) {\n                                if (axisX2 < -0.5) {\n                                    this.moveX(timestamp, i, 2, -1, 1);\n                                }\n                                if (axisX2 > 0.5) {\n                                    this.moveX(timestamp, i, 2, 1, 1);\n                                }\n                                if (axisY2 < -0.5) {\n                                    this.moveY(timestamp, i, 2, -1, 1);\n                                }\n                                if (axisY2 > 0.5) {\n                                    this.moveY(timestamp, i, 2, 1, 1);\n                                }\n                            }\n            */\n        }\n\n        gateCreateSidebar() {\n            const btn = this.createDOMElement('img', {\n                parent: this.body,\n                classnames: 'mmogame-button-run',\n                styles: {\n                    position: 'absolute',\n                    left: `${this.padding}px`,\n                    top: `${this.padding}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                },\n                attributes: {\n                    src: 'assets/start.svg',\n                    alt: 'start',\n                    role: 'button',\n                },\n            });\n            btn.addEventListener(\"click\", () => {\n                this.play();\n            });\n\n            this.gateInfo = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: 'mmogame-split-info',\n                styles: {\n                    position: 'absolute',\n                    left: `0`,\n                    top: `${this.iconSize + 2 * this.padding}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                    textAlign: 'right',\n                    color: this.getContrastingColor(this.colorBackground),\n                },\n            });\n\n            const sel = this.createDOMElement('select', {\n                parent: this.body,\n                classnames: 'mmogame-select-split',\n                styles: {\n                    position: 'absolute',\n                    left: `${this.padding}px`,\n                    top: `${this.iconSize + 2 * this.padding}px`,\n                    textAlign: 'left',\n                }\n            });\n            for (let i = 1; i <= 8; i++) {\n                const option = document.createElement(\"option\");\n                option.value = i;\n                option.text = i;\n                if (i - this.countAll === 0) {\n                    option.selected = true;\n                }\n                sel.appendChild(option);\n            }\n            sel.addEventListener(\"change\", () => {\n                this.countAll = sel.value;\n                this.countY = Math.round(Math.sqrt(this.countAll));\n                this.countX = Math.ceil(this.countAll / this.countY);\n\n                while (this.body.firstChild) {\n                    this.body.removeChild(this.body.firstChild);\n                }\n                this.area = undefined;\n                this.computeSizes(0);\n                this.gateSendGetAssets();\n            });\n        }\n\n        gateSendGetAssets() {\n            require(['core/ajax'], (Ajax) => {\n                // Defining the parameters to be passed to the service\n                let params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    countsplit: this.countAll,\n                    countpalettes: this.countPalettes,\n                    countavatars: this.countXavatars * this.countYavatars,\n                };\n                // Calling the service through the Moodle AJAX API\n                let getAssets = Ajax.call([{\n                    methodname: 'mod_mmogame_get_assets_split',\n                    args: params\n                }]);\n                // Handling the response\n                getAssets[0].done(({avatarids, avatars, colorpaletteids, colorpalettes, numavatars}) => {\n                    this.info = {\n                        avatarids: avatarids,\n                        avatars: avatars,\n                        colorpaletteids: colorpaletteids,\n                        colorpalettes: colorpalettes,\n                        numavatars: numavatars,\n                    };\n                    this.gateCreateScreen();\n                }).fail((error) => {\n                    this.showError('gateSendGetAssets', error);\n                    return error;\n                });\n            });\n        }\n\n        async gateOpen(mmogameid, pin, kinduser, user) {\n            this.mmogameid = mmogameid;\n            this.pin = pin;\n            this.kinduser = kinduser;\n            this.screen = 0;\n\n            if (this.kinduser === 'guid') {\n                const option = await this.getOption('guid' + mmogameid);\n                if (option === null) {\n                    this.user = crypto.randomUUID();\n                    this.setOption('guid' + mmogameid, {value: this.user});\n                } else {\n                    this.user = option.value;\n                }\n            } else {\n                this.kinduser = user;\n            }\n            this.gateSendGetAssets();\n        }\n\n    };\n});\n"],"names":["define","MmoGame","updateDelay","countX","countY","countAll","screen","gateShowColorPalettes","parent","colorpaletteids","colorpalettes","left","this","padding","topButton","iconSize","Math","round","fontSize","restHeight","window","innerHeight","top","i","count","length","canvasColor","undefined","canvasSize","parsedPalettes","map","palette","split","value","parseInt","acanvas","fragment","document","createDocumentFragment","iy","ix","canvas","createElement","style","position","width","height","cursor","classList","add","push","appendChild","showColorPalette","id","addEventListener","gateUpdateColorPalette","borderStyle","w","Object","assign","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","paletteid","gateUpdateAvatar","avatar","sp","splits","avatarid","updateGamepads","timestamp","gamepads","navigator","getGamepads","gateInfo","textContent","Array","from","filter","gp","n","updateGamepad","updateScreen","computeSizes","offsetY","maxIconWidth","floor","innerWidth","maxIconHeight","bodyFontSize","parseFloat","getComputedStyle","documentElement","min","createArea","countXavatars","countYavatars","countPalettes","widthSplits","space","offsetX","gateCreateScreen","cIcons","gateCreateSidebar","body","info","iY","iX","gateCreateScreenSplit","gateCreateScreenSplitSelect","createDOMElement","area","classnames","styles","overflow","border","labelHeight","sizeAvatars","topLabel","avatarbuttons","pos","j","avatars","filepath","filename","pop","slice","join","btn","attributes","src","alt","role","avatarids","posAvatar","avatarpos","labelAvatar","font","lineHeight","whiteSpace","color","getContrastingColor","colorBackground","innerHTML","div","lastUpdateTime","gategetavatar","numavatars","selected","found","requestAnimationFrame","t","createDivScorePercent","showRank","colorText","divMain","getColorHex","boxShadow","background","borderRadius","disabled","cellSize","lblRank","textAlign","title","getStringM","lblScore","moveX","num","direction","steps","usersecondjoystick","moveY","gamepad","axes","axisX1","axisY1","play","sel","option","text","sqrt","ceil","firstChild","removeChild","gateSendGetAssets","require","Ajax","params","mmogameid","kinduser","user","countsplit","countpalettes","countavatars","call","methodname","args","done","_ref","fail","error","showError","pin","getOption","crypto","randomUUID","setOption"],"mappings":"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"}