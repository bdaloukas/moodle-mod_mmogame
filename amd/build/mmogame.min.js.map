{"version":3,"file":"mmogame.min.js","sources":["../src/mmogame.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine([''], function() {\n    return class MmoGame {\n        // Define default properties with appropriate types\n        state; // State of the game\n        body;\n        minFontSize;\n        maxFontSize;\n        fontSize;\n        colors = {};\n        iconSize;\n        padding;\n        cIcons;\n\n        // UI element placeholders\n        area;\n\n        // Colors\n        colorsBackground;\n\n        // Timer variables\n        timestart = 0;\n        timeclose = 0;\n\n        /**\n         * Initialize game properties and compute initial sizes.\n         *\n         * @module mmogame\n         * @copyright 2024 Vasilis Daloukas\n         * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n         */\n        constructor() {\n            // Initialize default properties.\n            this.kindSound = 0;\n            this.state = 0;\n            this.minFontSize = 0;\n            this.maxFontSize = 0;\n            this.fontSize = 0;\n            this.iconSize = 0;\n            this.padding = 0;\n            this.body = document.getElementsByTagName(\"body\")[0];\n\n            // Compute and set font size properties.\n            let size = parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue('font-size'));\n            this.minFontSize = size;\n            this.maxFontSize = 2 * size;\n            this.fontSize = size;\n        }\n\n        // UI element creation methods\n        /**\n         * Creates a DOM element with specified attributes and styles.\n         * @param {string} tag - The HTML tag to create (e.g., 'div', 'img').\n         * @param {Object} options - Configuration for the element.\n         * @param {HTMLElement} options.parent - Parent element where the new element will be appended.\n         * @param {string} [options.classnames] - Space-separated string of CSS class names.\n         * @param {Object} [options.styles] - Inline styles for the element.\n         * @param {Object} [options.attributes] - Attributes for the element (e.g., src, alt, role).\n         * @returns {HTMLElement} - The created DOM element.\n         */\n        createDOMElement(tag, {parent, classnames = '', styles = {}, attributes = {}} = {}) {\n            const element = document.createElement(tag);\n\n            // Apply classes\n            if (classnames) {\n                element.classList.add(...classnames.split(/\\s+/));\n            }\n\n            // Apply styles\n            Object.assign(element.style, styles);\n\n            // Apply attributes\n            Object.entries(attributes).forEach(([key, value]) => {\n                if (value !== undefined && value !== null) {\n                    element.setAttribute(key, value);\n                }\n            });\n\n            // Append to parent\n            if (parent) {\n                parent.appendChild(element);\n            }\n\n            return element;\n        }\n\n        /**\n         * Creates a <div> element.\n         *\n         * @param {HTMLElement} parent - The parent element.\n         * @param {string} classnames - Horizontal position in pixels.\n         * @param {number} left - Horizontal position in pixels.\n         * @param {number} top - Vertical position in pixels.\n         * @param {number} width - Width of the <div>.\n         * @param {number} height - Height of the <div>.\n         * @returns {HTMLElement} - The created <div> element.\n         */\n        createDiv(parent, classnames, left, top, width, height) {\n            return this.createDOMElement('div', {\n                parent,\n                classnames,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${width}px`,\n                    height: `${height}px`,\n                },\n            });\n        }\n\n        /**\n         * Creates an <img> element.\n         *\n         * @param {HTMLElement} parent - The parent element.\n         * @param {string} classnames - List of classes separated by space.\n         * @param {number} left - Horizontal position in pixels.\n         * @param {number} top - Vertical position in pixels.\n         * @param {number} width - Width of the <img> element.\n         * @param {number} height - Height of the <img> element.\n         * @param {string} filename - The source file for the image.\n         * @returns {HTMLElement} - The created <img> element.\n         */\n        createImage(parent, classnames, left, top, width, height, filename) {\n            const styles = {\n                position: 'absolute',\n                left: `${left}px`,\n                top: `${top}px`,\n            };\n\n            // Only add width to styles if it's not 0\n            if (width !== 0) {\n                styles.width = `${width}px`;\n            }\n\n            // Only add height to styles if it's not 0\n            if (height !== 0) {\n                styles.height = `${height}px`;\n            }\n\n            const attributes = {draggable: false};\n            if (filename !== '') {\n                attributes.src = filename;\n            }\n\n            return this.createDOMElement('img', {\n                parent,\n                classnames,\n                styles,\n                attributes,\n            });\n        }\n\n        // For check\n        createButton(parent, classnames, left, top, width, height, src, alt, role = 'button') {\n            return this.createDOMElement('img', {\n                parent,\n                classnames,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${width}px`,\n                    height: `${height}px`,\n                },\n                attributes: {src, alt, role},\n            });\n        }\n\n        /**\n         * Generic method to create styled text or input fields.\n         * @param {HTMLElement} parent - Parent element where the new element will be appended.\n         * @param {string} type - Type of the element ('label' or 'input').\n         * @param {string} classnames - CSS class names.\n         * @param {Object} styles - Inline styles.\n         * @param {string} text - Inner text or placeholder.\n         * @returns {HTMLElement} - The created element.\n         */\n        createTextElement(parent, type, classnames, styles, text = '') {\n            const attributes = type === 'input' ? {type: 'text', placeholder: text} : {};\n            const element = this.createDOMElement(type, {parent, classnames, styles, attributes});\n            if (type === 'label') {\n                element.innerText = text;\n            }\n            return element;\n        }\n\n        createLabel(parent, classnames, left, top, width, fontSize, text) {\n            return this.createTextElement(parent, 'label', classnames, {\n                position: 'absolute',\n                left: `${left}px`,\n                top: `${top}px`,\n                width: `${width}px`,\n                fontSize: `${fontSize}px`,\n                textAlign: 'left',\n            }, text);\n        }\n\n        // Game logic and utility methods\n\n        /**\n         * Compute sizes for icons and padding based on the screen dimensions.\n         */\n        computeSizes() {\n            const cIcons = Math.max(this.cIcons || 5, 5);\n            const maxIconWidth = window.innerWidth / cIcons;\n            const maxIconHeight = window.innerHeight / 5;\n\n            this.iconSize = Math.min(maxIconWidth, maxIconHeight);\n            const adjustment = this.iconSize / 10 / cIcons;\n            this.iconSize = Math.round(this.iconSize - adjustment);\n            this.padding = Math.round(this.iconSize / 10);\n            this.iconSize -= this.padding;\n        }\n\n        /**\n         * Creates a centered image button with automatic scaling.\n         * @param {HTMLElement} parent - The parent element where the button will be appended.\n         * @param {number} left - The left position of the container in pixels.\n         * @param {number} top - The top position of the container in pixels.\n         * @param {number} width - The width of the container in pixels.\n         * @param {number} height - The height of the container in pixels.\n         * @param {string} classname - Additional CSS classes to apply to the button.\n         * @param {string} filename - The source URL of the image.\n         * @returns {HTMLElement} - The created image button element.\n         */\n        createCenterImageButton(parent, left, top, width, height, classname, filename) {\n            const button = this.createDOMElement('img', {\n                parent,\n                classnames: `mmogame_imgbutton ${classname}`,\n                styles: {\n                    position: 'absolute',\n                    draggable: false,\n                },\n            });\n\n            const img = new Image();\n            img.onload = function() {\n                if (this.width > 0 && this.height > 0) {\n                    const mul = Math.min(width / this.width, height / this.height);\n                    const w = Math.round(this.width * mul);\n                    const h = Math.round(this.height * mul);\n\n                    Object.assign(button.style, {\n                        width: `${w}px`,\n                        height: `${h}px`,\n                        left: `${left + width / 2 - w / 2}px`,\n                        top: `${top + height / 2 - h / 2}px`,\n                    });\n\n                    button.src = filename;\n                }\n            };\n            img.src = filename;\n\n            return button;\n        }\n\n        hasHelp() {\n            return false;\n        }\n\n        /**\n         * Clear all children of the <body> element.\n         */\n        clearBodyChildren() {\n            this.removeDivMessage();\n            let child;\n            while ((child = this.body.firstChild)) {\n                this.body.removeChild(child);\n            }\n            this.area = undefined;\n        }\n\n        /**\n         * Opens the game by resetting the body and computing sizes.\n         */\n        openGame() {\n            this.clearBodyChildren();\n            this.computeSizes();\n        }\n\n        autoResizeText(item, width, height, wrap, minFontSize, maxFontSize) {\n            const text = item.innerHTML.toString();\n\n            if (text.length === 0) {\n                return;\n            }\n\n            const tempDiv = document.createElement(\"div\");\n            tempDiv.style.visibility = \"hidden\";\n            tempDiv.style.position = \"absolute\";\n            tempDiv.style.whiteSpace = wrap ? \"normal\" : \"nowrap\";\n\n            this.body.appendChild(tempDiv);\n\n            let low = Math.max(1, minFontSize);\n            let up = maxFontSize || Math.min(width, height);\n\n            let fitSize = low;\n            let fitHeight = 0;\n            let newHeight = 0;\n            let newWidth = 0;\n\n            let step = 1;\n            let fontSize;\n            for (; step <= 10; step++) {\n                fontSize = (low + up) / 2;\n                tempDiv.style.fontSize = `${fontSize}px`;\n                tempDiv.style.width = `${width}px`;\n                tempDiv.style.height = `0`;\n                tempDiv.innerHTML = text;\n\n                newHeight = tempDiv.scrollHeight;\n                newWidth = tempDiv.scrollWidth - 1;\n                if (newWidth > width || newHeight > height) {\n                    up = fontSize;\n                } else {\n                    low = fontSize;\n                    if (Math.abs(fitHeight - newHeight) <= 2) {\n                        break;\n                    }\n                    fitSize = fontSize;\n                    fitHeight = newHeight;\n                }\n            }\n            item.style.fontSize = `${fitSize}px`;\n            this.body.removeChild(tempDiv);\n        }\n\n        pad(num, size) {\n            let s = num + \"\";\n            while (s.length < size) {\n                s = \"0\" + s;\n            }\n            return s;\n        }\n\n        uuid4() {\n            const hexDigits = '0123456789abcdef';\n            const uuid = [...Array(36)].map(() => hexDigits[Math.floor(Math.random() * 16)]);\n            uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n            uuid[14] = '4';\n            // eslint-disable-next-line no-bitwise\n            uuid[19] = hexDigits[(parseInt(uuid[19], 16) & 0x3) | 0x8];\n\n            this.user = uuid.join('');\n\n            let options = {userGUID: this.user};\n            this.setOptions(options)\n                .then(() => true) // Arrow function for resolving promise\n                .catch(error => { // Arrow function for handling errors\n                    this.showError(error.message);\n                    return false;\n                });\n        }\n\n        getCopyrightHeight() {\n            return Math.round(this.iconSize / 3);\n        }\n\n        /**\n         * Returns the hex color string for a given color code.\n         *\n         * @param {Number} colorCode - The color code.\n         * @returns {string} Hexadecimal representation of the color.\n         */\n        getColorHex(colorCode) {\n            return `#${colorCode.toString(16).padStart(6, '0').toUpperCase()}`;\n        }\n\n        /**\n         * Calculates contrast value for a given color.\n         *\n         * @param {Number} colorCode - The color code.\n         * @returns {Number} Contrast value.\n         */\n        getContrast(colorCode) {\n            // eslint-disable-next-line no-bitwise\n            const r = (colorCode >> 16) & 0xff;\n            // eslint-disable-next-line no-bitwise\n            const g = (colorCode >> 8) & 0xff;\n            // eslint-disable-next-line no-bitwise\n            const b = colorCode & 0xff;\n            return (r * 299 + g * 587 + b * 114) / 1000;\n        }\n\n        getColorGray(x) {\n            let r = Math.floor(x / 0x1000000) % 256, // Red.\n                g = Math.floor(x / 0x10000) % 256, // Green.\n                b = Math.floor(x / 0x100) % 256, // Blue.\n                yiq = (r * 299) + g * 587 + b * 114,\n                m = 255 * 299 + 255 * 587 + 255 * 114,\n                gray = Math.round(yiq * 255 / m);\n\n            return (gray * 0x10000) + (gray * 0x100) + gray;\n        }\n\n        /**\n         * Returns a contrasting color (black or white) based on brightness.\n         * @param {Number} colorCode - The color code.\n         * @returns {string} \"#000000\" or \"#FFFFFF\".\n         */\n        getContrastingColor(colorCode) {\n            // eslint-disable-next-line no-bitwise\n            const r = (colorCode >> 16) & 0xff;\n            // eslint-disable-next-line no-bitwise\n            const g = (colorCode >> 8) & 0xff;\n            // eslint-disable-next-line no-bitwise\n            const b = colorCode & 0xff;\n            const brightness = (r * 299 + g * 587 + b * 114) / 1000;\n            return brightness >= 128 ? \"#000000\" : \"#FFFFFF\";\n        }\n\n        /**\n         * Repairs colors by sorting and assigning contrasting background colors.\n         * @param {Array} colors - Array of color codes.\n         */\n        repairColors(colors) {\n            this.colors = colors.sort((a, b) => this.getContrast(a) - this.getContrast(b));\n            this.colorBackground = this.colors[0];\n            this.body.style.backgroundColor = this.getColorHex(this.colorBackground);\n        }\n\n        /**\n         * Repairs <p> tags in a string by cleaning up unnecessary tags.\n         * @param {string} text - The input string with potential <p> tags.\n         * @returns {string} The cleaned-up string.\n         */\n        repairP(text) {\n            if (!text) {\n                return '';\n            }\n            return text.replace(/<p[^>]*>/g, '').replace(/<\\/p>/g, '<br>').trim();\n        }\n\n        /**\n         * Finds the best value based on a condition.\n         * @param {number} low - The lower bound.\n         * @param {number} high - The upper bound.\n         * @param {function} condition - A condition to evaluate.\n         */\n        findbest(low, high, condition) {\n            while (high - low > 1) {\n                const mid = Math.floor((low + high) / 2);\n                if (condition(mid)) {\n                    high = mid;\n                } else {\n                    low = mid;\n                }\n            }\n\n            return low;\n        }\n\n        removeDivMessage() {\n            if (this.divMessage !== undefined) {\n                this.body.removeChild(this.divMessage);\n                this.divMessage = undefined;\n            }\n            if (this.divMessageHelp !== undefined) {\n                this.body.removeChild(this.divMessageHelp);\n                this.divMessageHelp = undefined;\n            }\n            if (this.divMessageBackground !== undefined) {\n                this.divMessageBackground.remove();\n                this.divMessageBackground = undefined;\n            }\n        }\n\n        disableButtons(buttons, disabled) {\n            for (let i = 0; i < buttons.length; i++) {\n                let btn = buttons[i];\n                if (btn !== undefined) {\n                    if (disabled) {\n                        btn.classList.add(\"mmogame_imgbutton_disabled\");\n                    } else {\n                        btn.classList.remove(\"mmogame_imgbutton_disabled\");\n                    }\n                }\n            }\n        }\n\n        repairNickname(nickname) {\n            if (nickname === undefined) {\n                return '';\n            }\n\n            let s = nickname;\n            if (s !== '') {\n                while (s.indexOf('_') !== -1) {\n                    s = s.replace('_', ' ');\n                }\n            }\n\n            return s;\n        }\n\n        showColorPalette(canvas, colors) {\n            let ctx = canvas.getContext(\"2d\");\n            let width = canvas.width;\n            let height = canvas.height;\n            let strip = width / 5;\n\n            // Sort colors based on their contrast value using an arrow function\n            colors.sort((a, b) => this.getContrast(a) - this.getContrast(b));\n\n            for (let i = 0; i < 5; i++) {\n                ctx.fillStyle = this.getColorHex(colors[i]);\n                ctx.fillRect(i * strip, 0, (i + 1) * strip, height);\n            }\n\n            ctx.strokeStyle = \"#FFFFFF\";\n            ctx.lineWidth = 1;\n            ctx.strokeRect(0, 0, width, height);\n        }\n\n        setColorsString(s) {\n            let a = [0x9B7ED9, 0x79F2F2, 0x67BF5A, 0xD0F252, 0xBF5B21];\n            if (s !== undefined && s.length >= 0) {\n                let b = s.split(\",\");\n                if (b.length === 5) {\n                    a = b;\n                    for (let i = 0; i < 5; i++) {\n                        a[i] = parseInt(a[i]);\n                    }\n                }\n            }\n            this.setColors(a);\n        }\n\n        computeDifClock(time, timeStart, timeClose) {\n            if (time !== undefined) {\n                this.difClock = ((new Date()).getTime() - time) / 1000;\n            }\n\n            this.computeTimeStartClose(timeStart, timeClose);\n        }\n\n        computeTimeStartClose(timeStart, timeClose) {\n            if (timeStart !== undefined) {\n                this.timestart = parseInt(timeStart) !== 0 ? parseInt(timeStart) + this.difClock : 0;\n                this.timeclose = parseInt(timeClose) !== 0 ? parseInt(timeClose) + this.difClock : 0;\n            } else {\n                this.timestart = 0;\n                this.timeclose = 0;\n            }\n        }\n\n        drawRadio(canvas, color1, color2) {\n            let ctx = canvas.getContext(\"2d\");\n            let size = canvas.width;\n            ctx.clearRect(0, 0, size, canvas.height);\n\n            ctx.beginPath();\n            ctx.arc(size / 2, size / 2, size / 2, 0, 2 * Math.PI, false);\n            ctx.fillStyle = this.getColorHex(color1);\n            ctx.fill();\n\n            let checked = canvas.classList.contains(\"checked\");\n            if (checked) {\n                ctx.beginPath();\n                ctx.arc(size / 2, size / 2, size / 4, 0, 2 * Math.PI, false);\n                ctx.fillStyle = this.getColorHex(color2);\n                ctx.fill();\n            }\n        }\n\n        createRadiobox(parent, size, color1, color2, checked, disabled) {\n            let canvas = document.createElement('canvas');\n            canvas.style.position = \"absolute\";\n            canvas.width = size;\n            canvas.height = size;\n            parent.appendChild(canvas);\n            if (checked) {\n                canvas.classList.add(\"checked\");\n            }\n            if (disabled) {\n                canvas.classList.add(\"disabled\");\n            }\n\n            this.drawRadio(canvas, disabled ? color1 : 0xFFFFFF, color2);\n\n            return canvas;\n        }\n\n        createImageButton(parent, classnames, left, top, width, height, filename) {\n            const imgButton = this.createImage(parent, classnames, left, top, width, height, filename);\n            imgButton.style.cursor = 'pointer';\n            return imgButton;\n        }\n\n        createDivColor(parent, classnames, left, top, width, height, color) {\n            const colorDiv = this.createDiv(parent, classnames, left, top, width, height);\n            colorDiv.style.backgroundColor = color;\n            colorDiv.style.border = '1px solid #000';\n            return colorDiv;\n        }\n\n        /**\n         * Retrieves localized strings.\n         * @param {string} name - The name of the string.\n         * @returns {string} The localized string.\n         */\n        getStringM(name) {\n            return M.util.get_string(name, 'mmogame');\n        }\n\n        /**\n         * Retrieves user options from IndexedDB.\n         * @returns {Promise<Object>} A promise that resolves with the options.\n         */\n        getOptions() {\n            return new Promise((resolve, reject) => {\n                const request = indexedDB.open('mmoGameDB', 1);\n\n                request.onupgradeneeded = function(event) {\n                    const db = event.target.result;\n                    if (!db.objectStoreNames.contains('options')) {\n                        db.createObjectStore('options', {keyPath: 'name'});\n                    }\n                };\n\n                request.onsuccess = function(event) {\n                    const db = event.target.result;\n                    const transaction = db.transaction(['options'], 'readonly');\n                    const store = transaction.objectStore('options');\n\n                    const getAllRequest = store.getAll();\n\n                    getAllRequest.onsuccess = function(event) {\n                        resolve(event.target.result.reduce((acc, item) => {\n                            acc[item.name] = item.value;\n                            return acc;\n                        }, {}));\n                    };\n\n                    getAllRequest.onerror = function() {\n                        reject(new Error('Failed to retrieve options'));\n                    };\n                };\n\n                request.onerror = function() {\n                    reject(new Error('Failed to open database'));\n                };\n            });\n        }\n\n        /**\n         * Saves user options to IndexedDB.\n         * @param {Object} options - The options to save.\n         * @returns {Promise<void>} A promise that resolves when the save is complete.\n         */\n        async setOptions(options) {\n            try {\n                const db = await this.openDatabase();\n                const transaction = db.transaction('options', 'readwrite');\n                const store = transaction.objectStore('options');\n                Object.entries(options).forEach(([key, value]) => store.put({name: key, value}));\n                await transaction.complete;\n            } catch (error) {\n                this.showError('Failed to save options:', error);\n            }\n        }\n\n        // Open IndexedDB connection\n        openDatabase() {\n            return new Promise((resolve, reject) => {\n                const request = indexedDB.open('mmoGameDB', 1);\n\n                request.onupgradeneeded = (event) => {\n                    const db = event.target.result;\n                    if (!db.objectStoreNames.contains('options')) {\n                        db.createObjectStore('options', {keyPath: 'name'});\n                    }\n                };\n\n                request.onsuccess = (event) => resolve(event.target.result);\n                request.onerror = (event) => reject(event.target.error);\n            });\n        }\n        clearDB(url) {\n            let options = {nickname: ''};\n            this.setOptions(options)\n                .then(function() {\n                    window.location.href = url;\n                    return true;\n                })\n                .catch(() => {\n                    return false;\n                });\n        }\n\n        debounce(func, delay) {\n            let timer;\n            return function(...args) {\n                clearTimeout(timer);\n                timer = setTimeout(() => func.apply(this, args), delay);\n            };\n        }\n\n        /**\n         * Displays an error message on the screen.\n         * @param {string} name - The name of the error context.\n         * @param {Error} [error] - The error object to display.\n         */\n        showError(name, error) {\n            return name + error;\n        }\n\n        setColors(a) {\n            return a;\n        }\n    };\n});"],"names":["define","constructor","_defineProperty","this","kindSound","state","minFontSize","maxFontSize","fontSize","iconSize","padding","body","document","getElementsByTagName","size","parseFloat","window","getComputedStyle","documentElement","getPropertyValue","createDOMElement","tag","parent","classnames","styles","attributes","arguments","length","undefined","element","createElement","classList","add","split","Object","assign","style","entries","forEach","_ref","key","value","setAttribute","appendChild","createDiv","left","top","width","height","position","concat","createImage","filename","draggable","src","createButton","alt","role","createTextElement","type","text","placeholder","innerText","createLabel","textAlign","computeSizes","cIcons","Math","max","maxIconWidth","innerWidth","maxIconHeight","innerHeight","min","adjustment","round","createCenterImageButton","classname","button","img","Image","onload","mul","w","h","hasHelp","clearBodyChildren","child","removeDivMessage","firstChild","removeChild","area","openGame","autoResizeText","item","wrap","innerHTML","toString","tempDiv","visibility","whiteSpace","low","up","fitSize","fitHeight","newHeight","newWidth","step","scrollHeight","scrollWidth","abs","pad","num","s","uuid4","uuid","Array","map","floor","random","parseInt","user","join","options","userGUID","setOptions","then","catch","error","showError","message","getCopyrightHeight","getColorHex","colorCode","padStart","toUpperCase","getContrast","getColorGray","x","yiq","gray","getContrastingColor","repairColors","colors","sort","a","b","colorBackground","backgroundColor","repairP","replace","trim","findbest","high","condition","mid","divMessage","divMessageHelp","divMessageBackground","remove","disableButtons","buttons","disabled","i","btn","repairNickname","nickname","indexOf","showColorPalette","canvas","ctx","getContext","strip","fillStyle","fillRect","strokeStyle","lineWidth","strokeRect","setColorsString","setColors","computeDifClock","time","timeStart","timeClose","difClock","Date","getTime","computeTimeStartClose","timestart","timeclose","drawRadio","color1","color2","clearRect","beginPath","arc","PI","fill","contains","createRadiobox","checked","createImageButton","imgButton","cursor","createDivColor","color","colorDiv","border","getStringM","name","M","util","get_string","getOptions","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","db","target","result","objectStoreNames","createObjectStore","keyPath","onsuccess","getAllRequest","transaction","objectStore","getAll","reduce","acc","onerror","Error","openDatabase","store","_ref2","put","complete","clearDB","url","location","href","debounce","func","delay","timer","_len","args","_key","clearTimeout","setTimeout","apply"],"mappings":"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"}