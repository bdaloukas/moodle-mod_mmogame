{"version":3,"file":"mmogameui.min.js","sources":["../src/mmogameui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mod_mmogame/mmogame'], function(MmoGame) {\n    return class MmoGameUI extends MmoGame {\n\n        isVertical;\n        kindSound; // Type: Number (0 = on, 1 = off, 2 = speak)\n        buttonSound;\n        colorBackground2;\n\n        // Other\n        nickname;\n        user;\n        paletteid;\n        avatarid;\n        iconSize;\n        padding;\n        avatarsSrc = [];\n        nickNames = [];\n\n        // Form fields\n        edtNickname;\n\n        // Gate variables\n        mmogameid;\n\n        constructor() {\n            super();\n            this.isVertical = window.innerWidth < window.innerHeight;\n        }\n\n        /**\n         * Returns the appropriate file for mute/unmute.\n         * @returns {string} The file path.\n         */\n        getMuteFile() {\n            return this.kindSound === 0 ? 'assets/sound-on-flat.png' : 'assets/sound-off-flat.png';\n        }\n\n        /**\n         * Plays a sound file if sound is enabled.\n         *\n         * @param {HTMLAudioElement} audioElement - The audio element to play.\n         */\n        playAudio(audioElement) {\n            if (this.kindSound !== 0 && audioElement) {\n                if (audioElement.networkState === 1) {\n                    audioElement.play();\n                }\n            }\n        }\n\n        createButtonSound(left, top, size) {\n            this.buttonSound = this.createDOMElement('img', {\n                parent: this.body,\n                classnames: 'mmogame-button-sound',\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${size}px`,\n                    height: `${size}px`,\n                },\n                attributes: {\n                    src: this.getMuteFile(),\n                    alt: this.getStringM('js_sound'),\n                    role: 'button',\n                },\n            });\n            this.buttonSound.addEventListener(\"click\", () => this.onClickSound(this.buttonSound));\n        }\n\n        /**\n         * Toggles sound on or off when clicked.\n         * @param {HTMLElement} button - The sound toggle button.\n         */\n        onClickSound(button) {\n            this.kindSound = (this.kindSound + 1) % 2;\n            button.src = this.getMuteFile();\n            this.setOptions({kindSound: this.kindSound});\n        }\n\n        /**\n         * Opens the gate UI, computes sizes, and initializes settings based on the user type.\n         * @param {number} mmogameid - The game ID.\n         * @param {string} pin - The game PIN.\n         * @param {string} kinduser - The type of user (e.g., \"moodle\" or \"guid\").\n         * @param {string} user - The user identifier.\n         * @param {string} url - The game URL.\n         */\n        gateOpen(mmogameid, pin, kinduser, user, url) {\n            const instance = this;\n\n            try {\n                // Initialize class variables\n                this.url = url;\n                this.mmogameid = mmogameid;\n                this.pin = pin;\n                this.kinduser = kinduser;\n                instance.user = user;\n\n                // Adjust font sizes\n                this.minFontSize *= 2;\n                this.maxFontSize *= 2;\n\n                // Compute sizes and layout\n                this.gateComputeSizes();\n                this.areaRect = {\n                    left: this.padding,\n                    top: this.padding,\n                    width: Math.round(window.innerWidth - 2 * this.padding),\n                    height: Math.round(window.innerHeight - 2 * this.padding),\n                };\n\n                // Load options and initialize UI\n                this.getOptions()\n                    .then((options) => {\n                        // Set default options if undefined\n                        options.kindsound = options.kindsound || 0;\n                        options.nickname = options.nickname || '';\n                        options.avatarid = options.avatarid || 0;\n                        options.paletteid = options.paletteid || 0;\n\n                        // Assign kindSound within valid range\n                        this.kindSound = [1, 2].includes(options.kindSound) ? options.kindSound : 0;\n\n                        const isReady = options.nickname && options.avatarid && options.paletteid;\n\n                        if (kinduser === 'moodle' && isReady) {\n                            this.gatePlayGame(false, options.nickname, options.paletteid, options.avatarid);\n                        } else if (kinduser === 'guid') {\n                            options.userGUID = options.userGUID || '';\n\n                            if (options.userGUID.length >= 10 && isReady) {\n                                instance.user = options.userGUID;\n                                this.gatePlayGame(false, options.nickname, options.paletteid, options.avatarid);\n                            } else {\n                                this.gateCreateScreen();\n                            }\n                        } else {\n                            this.gateCreateScreen();\n                        }\n\n                        return true;\n                    })\n                    .catch((error) => {\n                        this.showError('gateOpen unexpected', error);\n                    });\n            } catch (error) {\n               this.showError('gateOpen', error);\n            }\n        }\n\n        gatePlayGame(save, nickname, paletteid, avatarid) {\n            let instance = this;\n\n            if (instance.kinduser === 'guid' && instance.user === '') {\n                this.uuid4();\n            }\n\n            if (!save) {\n                instance.nickname = nickname;\n                instance.paletteid = paletteid;\n                instance.avatarid = avatarid;\n                instance.callGetAttempt({nickname: nickname, colorpaletteid: paletteid, avatarid: avatarid});\n                return;\n            }\n\n            let options = {nickname: nickname, avatarid: avatarid, paletteid: paletteid};\n\n            this.setOptions(options)\n                .then(() => {\n                    return true;\n                })\n                .catch(error => {\n                    this.showError(error.message);\n                    return false;\n                });\n\n            this.nickname = nickname;\n            this.paletteid = paletteid;\n            this.avatarid = avatarid;\n            this.callGetAttempt();\n        }\n\n        gateCreateScreen() {\n            this.createArea();\n\n            let maxHeight = this.areaRect.height - 5 * this.padding - this.iconSize;\n            let maxWidth = this.areaRect.width;\n            let size;\n\n            const labels = [\n                `${this.getStringM('js_name')}: `,\n                this.getStringM('js_code'),\n                this.getStringM('js_palette')\n            ];\n\n            this.fontSize = this.findbest(this.minFontSize, this.maxFontSize, (fontSize) => {\n                size = this.gateComputeLabelSize(fontSize, labels);\n\n                if (size[0] >= maxWidth) {\n                    return 1;\n                }\n\n                const heightColors = (maxHeight - 4 * fontSize) * 2 / 5;\n                let n = Math.floor(heightColors / this.iconSize);\n                if (n === 0) {\n                    return 1;\n                }\n                const heightAvatars = (maxHeight - 4 * fontSize + heightColors) * 3 / 5;\n                const computedHeight = 3 * size[1] + 8 * this.padding + heightColors + heightAvatars;\n\n                return computedHeight < maxHeight ? -1 : 1;\n            });\n\n            this.gateCreateScreenDo(maxWidth, maxHeight);\n        }\n\n        gateCreateScreenDo(maxWidth, maxHeight) {\n            const instance = this;\n\n            let top = this.gateCreateNickName(0, maxWidth) + this.padding;\n            this.edtNickname.focus();\n            // Creates the \"nickname\" field.\n\n            // Palette\n            const [lblPalette, btnPalette] = instance.gateCreateLabelRefresh(top, instance.getStringM('js_palette'),\n                'mmogame-gate-palette-label', 'mmogame-gate-palette-refresh', 'assets/refresh.svg');\n            top += lblPalette.scrollHeight + instance.padding;\n            const topGridPalette = top;\n            let gridHeightPalette = (maxHeight - topGridPalette - lblPalette.scrollHeight) * 2 / 5;\n            const countX = Math.floor((maxWidth - this.padding) / this.iconSize);\n            const countYpalette = Math.floor(gridHeightPalette / this.iconSize);\n            gridHeightPalette = countYpalette * instance.iconSize;\n            top += gridHeightPalette + this.padding;\n            // Label Avatars\n            const [lblAvatars, btnAvatars] = instance.gateCreateLabelRefresh(top, instance.getStringM('js_avatars'),\n                'mmogame-gate-avatars-label', 'mmogame-gate-avatars-refresh', 'assets/refresh.svg');\n\n            top += lblAvatars.scrollHeight + instance.padding;\n\n            const countYavatars = Math.floor(Math.floor(maxHeight - top - this.padding) / this.iconSize);\n            const gridHeightAvatars = countYavatars * this.iconSize;\n\n            instance.addEventListenerRefresh(btnPalette, topGridPalette, countX, countYpalette,\n                top, countX, countYavatars, true, false);\n\n            instance.addEventListenerRefresh(btnAvatars, topGridPalette, countX, countYpalette,\n                top, countX, countYavatars, false, true);\n\n            // Horizontal\n            instance.gateSendGetColorsAvatars(0, topGridPalette, countX, countYpalette,\n                0, top, countX, countYavatars, true, true);\n\n            this.gateCreateSubmit(top + gridHeightAvatars + 2 * this.padding, maxWidth);\n        }\n\n        gateCreateNickName(top, maxWidth) {\n            const lblNickName = this.createDOMElement('label', {\n                parent: this.area,\n                classnames: 'mmogame-gate-name-label',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: '0',\n                    top: `${top}px`,\n                    width: '0',\n                    color: this.getContrastingColor(this.colorBackground),\n                },\n            });\n            lblNickName.innerHTML = this.getStringM('js_name') + \": \";\n\n            if (this.isVertical) {\n                top += lblNickName.scrollHeight + this.padding;\n            }\n\n            const leftEdit = this.isVertical ? 0 : lblNickName.scrollWidth + this.padding;\n            const width = this.isVertical ? maxWidth : maxWidth - 2 * this.padding;\n            this.edtNickname = this.createDOMElement('input', {\n                parent: this.area,\n                classnames: 'mmogame-gate-name',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${leftEdit}px`,\n                    top: `${top}px`,\n                    width: `${width - leftEdit - this.padding}px`\n                },\n            });\n            this.edtNickname.addEventListener(\"keyup\", this.debounce(() => this.gateUpdateSubmit(), 300));\n            top += this.padding + (this.isVertical ? this.fontSize : Math.max(lblNickName.scrollHeight, this.fontSize));\n\n            return top;\n        }\n\n        gateCreateSubmit(top, maxWidth) {\n           this.btnSubmit = this.createDOMElement('img', {\n                parent: this.area,\n                classnames: 'mmogame-button-gate-submit',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${(maxWidth - this.iconSize) / 2}px`,\n                    top: `${top}px`,\n                    height: `${this.iconSize}px`,\n                    color: this.getContrastingColor(this.colorBackground),\n                    cursor: 'pointer',\n                    visibility: 'hidden',\n                },\n                attributes: {\n                    src: 'assets/submit.svg',\n                }\n            });\n            this.btnSubmit.addEventListener(\"click\", () => {\n                this.gatePlayGame(true, this.edtNickname.value, this.paletteid, this.avatarid);\n            });\n        }\n\n        gateComputeLabelSize(fontSize, aLabel) {\n            const instance = this;\n            let maxWidth = 0;\n            let maxHeight = 0;\n\n            for (let i = 0; i < aLabel.length; i++) {\n                const label = document.createElement(\"label\");\n                label.style.position = \"absolute\";\n                label.innerHTML = aLabel[i];\n                label.style.whiteSpace = \"nowrap\";\n                label.style.font = \"FontAwesome\";\n                label.style.fontSize = fontSize + \"px\";\n                label.style.width = \"0px\";\n                label.style.height = \"0px\";\n                instance.area.appendChild(label);\n\n                if (label.scrollWidth > maxWidth) {\n                    maxWidth = label.scrollWidth;\n                }\n\n                if (label.scrollHeight > maxHeight) {\n                    maxHeight = label.scrollHeight;\n                }\n                instance.area.removeChild(label);\n            }\n\n            return [maxWidth, maxHeight];\n        }\n\n        gateShowAvatars(left, top, countX, countY, avatarids, avatars) {\n            const instance = this;\n            if (!avatars || avatars.length === 0) {\n                return; // Exit early if no avatars exist\n            }\n\n            // Delete all previous avatar icons.\n            const elements = document.querySelectorAll('.mmogame-avatar');\n            elements.forEach(element => element.remove());\n\n            const fragment = document.createDocumentFragment();\n\n            instance.avatar = undefined;\n            const count = avatars.length;\n            let leftOriginal = left;\n            let w = Math.round(this.padding / 2) + \"px\";\n            for (let i = 0; i < count; i++) {\n                let avatarImagePath = 'assets/avatars/' + avatars[i];\n                let btn = instance.createCenterImageButton(\n                    fragment,\n                    left, top,\n                    instance.iconSize - instance.padding, instance.iconSize - instance.padding,\n                    'mmogame-avatar',\n                    avatarImagePath\n                );\n                btn.classList.add(\"mmogame-avatar\");\n                let id = avatarids[i];\n                btn.addEventListener(\"click\", () => {\n                    instance.gateUpdateAvatar(btn, id, w);\n                });\n\n                // Move left position after placing the button\n                left += instance.iconSize;\n\n                // Reset left and move to the next row after filling countX buttons\n                if ((i + 1) % countX === 0) {\n                    top += instance.iconSize;\n                    left = leftOriginal;\n                }\n            }\n            instance.area.appendChild(fragment);\n        }\n\n        gateSendGetColorsAvatars(leftPalette, topPalette, countXpalette, countYpalette,\n                                 leftAvatars, topAvatars, countXavatars, countYavatars,\n                                 updatePalette = true, updateAvatars = true) {\n            const instance = this;\n\n            require(['core/ajax'], (Ajax) => {\n                // Defining the parameters to be passed to the service\n                let params = {\n                    mmogameid: instance.mmogameid,\n                    kinduser: instance.kinduser,\n                    user: instance.user,\n                    avatars: updateAvatars ? countXavatars * countYavatars : 0,\n                    colorpalettes: updatePalette ? countXpalette * countYpalette : 0,\n                };\n                // Calling the service through the Moodle AJAX API\n                let getAssets = Ajax.call([{\n                    methodname: 'mod_mmogame_get_assets',\n                    args: params\n                }]);\n\n                // Handling the response\n                getAssets[0].done(({avatarids, avatars, colorpaletteids, colorpalettes}) => {\n                    if (updatePalette) {\n                        instance.gateShowColorPalettes(leftPalette, topPalette, countXpalette, countYpalette,\n                            colorpaletteids, colorpalettes);\n                    }\n                    if (updateAvatars) {\n                        instance.gateShowAvatars(leftAvatars, topAvatars, countXavatars, countYavatars,\n                            avatarids, avatars);\n                    }\n                }).fail((error) => {\n                    return error;\n                });\n            });\n        }\n\n        gateShowColorPalettes(left, top, countX, countY, colorpaletteids, colorpalettes) {\n            const instance = this;\n            let i = 0; // Counter for color palettes\n            const count = colorpalettes.length;\n            this.canvasColor = undefined;\n            const canvasSize = instance.iconSize - instance.padding * 3 / 2;\n            const parsedPalettes = colorpalettes.map(palette =>\n                palette.split(\",\").map(value => parseInt(value, 10) || 0)\n            );\n            const fragment = document.createDocumentFragment();\n            for (let iy = 0; iy < countY; iy++) {\n                for (let ix = 0; ix < countX; ix++) {\n                    // Check if we exceed available palettes or encounter invalid data\n                    if (i >= count || !parsedPalettes[i] || !colorpaletteids[i]) {\n                        i++; // Increment and continue if invalid\n                        continue;\n                    }\n\n                    // Create a new canvas element\n                    let canvas = document.createElement('canvas');\n                    canvas.style.position = \"absolute\";\n                    canvas.style.left = `${left + ix * instance.iconSize}px`;\n                    canvas.style.top = `${top + iy * instance.iconSize}px`;\n                    canvas.width = canvasSize;\n                    canvas.height = canvasSize;\n                    canvas.style.cursor = 'pointer';\n                    canvas.classList.add(\"mmogame_color\");\n\n                    // Append canvas to the area\n                    fragment.appendChild(canvas);\n\n                    // Render the color palette on the canvas\n                    instance.showColorPalette(canvas, parsedPalettes[i]);\n\n                    // Get the palette ID and attach a click event listener\n                    let id = colorpaletteids[i];\n                    canvas.addEventListener(\"click\", () => {\n                        instance.gateUpdateColorPalette(canvas, id);\n                    });\n\n                    i++;\n                }\n            }\n            instance.area.appendChild(fragment);\n        }\n\n        gateUpdateColorPalette(canvas, id) {\n            if (this.canvasColor !== undefined) {\n                this.canvasColor.style.borderStyle = \"none\";\n            }\n            this.canvasColor = canvas;\n            let w = Math.round(this.padding / 2) + \"px\";\n\n            Object.assign(canvas.style, {\n                borderStyle: \"outset\",\n                borderLeftWidth: w,\n                borderTopWidth: w,\n                borderRightWidth: w,\n                borderBottomWidth: w,\n            });\n            this.paletteid = id;\n\n            this.gateUpdateSubmit();\n        }\n\n        gateUpdateAvatar(avatar, id, w) {\n            const instance = this;\n\n            if (instance.avatar !== undefined) {\n                instance.avatar.style.borderStyle = \"none\";\n            }\n            instance.avatar = avatar;\n            avatar.style.borderStyle = \"outset\";\n\n            avatar.style.borderLeftWidth = w;\n            avatar.style.borderTopWidth = w;\n            avatar.style.borderRightWidth = w;\n            avatar.style.borderBottomWidth = w;\n\n            instance.avatarid = id;\n\n            instance.gateUpdateSubmit();\n        }\n\n        /**\n         * Updates the visibility of the submit button based on form input validation.\n         */\n        gateUpdateSubmit() {\n            const hasAvatar = this.avatarid !== undefined;\n            const hasPalette = this.paletteid !== undefined;\n            const hasNickname = this.edtNickname?.value?.length > 0;\n\n            this.btnSubmit.style.visibility = hasAvatar && hasPalette && hasNickname ? 'visible' : 'hidden';\n        }\n\n        gateComputeSizes() {\n            const instance = this;\n\n            instance.computeSizes();\n            instance.iconSize = Math.round(0.8 * instance.iconSize);\n            instance.padding = Math.round(0.8 * instance.padding);\n        }\n\n        /**\n         * Creates the screen palette UI with a label and a refresh button.\n         * @param {number} top - The vertical position for the elements.\n         * @param {string} title\n         * @param {string} classLabel\n         * @param {string} classButton\n         * @param {string} src\n         */\n        gateCreateLabelRefresh(top, title, classLabel, classButton, src) {\n            // Create and configure the label\n            const label = this.createDOMElement('label', {\n                parent: this.area,\n                classnames: classLabel,\n                styles: {\n                    position: 'absolute',\n                    font: 'FontAwesome',\n                    fontSize: `${this.fontSize}px`,\n                    width: '0px',\n                    whiteSpace: 'nowrap',\n                    color: this.getContrastingColor(this.colorBackground),\n                    top: `${top}px`,\n                    left: '0px',\n                },\n            });\n            label.innerHTML = title;\n\n            // Button refresh color palettes\n            let button = this.createDOMElement('img', {\n                parent: this.area,\n                classnames: classButton,\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${label.scrollWidth + this.padding}px`,\n                    top: `${top}px`,\n                    height: `${label.scrollHeight}px`,\n                    color: this.getContrastingColor(this.colorBackground),\n                    cursor: 'pointer',\n                },\n                attributes: {\n                    src: src,\n                }\n            });\n\n            return [label, button];\n        }\n\n        /**\n         * Adds an event listener to refresh colors and avatars.\n         *\n         * @param {HTMLElement} btn - The button to attach the event listener to.\n         * @param {number} topPalette - The Y-coordinate offset for grid positioning.\n         * @param {number} countXpalette - Width of the color grid.\n         * @param {number} countYpalette - Height of the color grid.\n         * @param {number} topAvatars - The Y-coordinate offset for grid positioning.\n         * @param {number} countXavatars - Width of the avatar grid.\n         * @param {number} countYavatars - Height of the avatar grid.\n         * @param {boolean} updateColors - Callback to update colors.\n         * @param {boolean} updateAvatars - Callback to update avatars.\n         */\n        addEventListenerRefresh(btn, topPalette, countXpalette, countYpalette, topAvatars,\n                                countXavatars, countYavatars, updateColors, updateAvatars) {\n            btn.addEventListener(\"click\", () => {\n                const elements = Array.from(this.area.getElementsByClassName(\"mmogame-color\"));\n                elements.forEach(element => element.remove());\n\n                this.gateSendGetColorsAvatars(0, topPalette, countXpalette, countYpalette,\n                    0, topAvatars, countXavatars, countYavatars,\n                    updateColors, updateAvatars);\n            });\n        }\n\n        /**\n         * Creates the main game area.\n         */\n        createArea() {\n            if (this.area) {\n                this.body.removeChild(this.area);\n            }\n\n            this.area = this.createDiv(\n                this.body,\n                'mmogame-area',\n                this.padding,\n                this.areaRect.top,\n                this.areaRect.width,\n                this.areaRect.height\n            );\n        }\n\n        createDivMessage(classnames, message) {\n            const instance = this;\n\n            if (instance.area !== undefined) {\n                instance.body.removeChild(instance.area);\n                instance.area = undefined;\n            }\n\n            if (instance.divMessageHelp !== undefined) {\n                instance.body.removeChild(instance.divMessageHelp);\n                instance.divMessageHelp = undefined;\n            }\n\n            let left = instance.padding;\n            let top = instance.areaRect !== undefined ? instance.areaRect.top : 0;\n            let width = window.innerWidth - 2 * instance.padding;\n            let height = window.innerHeight - instance.getCopyrightHeight() - instance.padding - top;\n\n            instance.createDivMessageDo(classnames, left, top, width, height, message, height);\n\n            instance.divMessage.style.top = (height - instance.divMessage.scrollHeight) / 2 + \"px\";\n        }\n\n        createNicknameAvatar(prefixclassname, left, topNickName, widthNickname, heightNickname, topAvatar, widthAvatar) {\n            const nickname = this.createDOMElement('div', {\n                parent: this.body,\n                classname: `${prefixclassname}-nickname`,\n                styles: {\n                    left: `${left}`,\n                    top: `${topNickName}`,\n                    width: `${widthNickname}px`,\n                }\n            });\n\n            const avatar = this.createDOMElement('img', {\n                classname: `${prefixclassname}-avatar`,\n                parent: this.body,\n                styles: {\n                    left: `${left}`,\n                    top: `${topAvatar}`,\n                    width: `${widthAvatar}px`,\n                }\n            });\n\n\n            return [nickname, avatar];\n        }\n\n\n        createDivMessageStart(message) {\n            const instance = this;\n\n            if (instance.area !== undefined) {\n                instance.body.removeChild(instance.area);\n                instance.area = undefined;\n            }\n\n            let left = instance.padding;\n            let top = instance.areaRect.top;\n            let width = window.innerWidth - 2 * instance.padding;\n            let height = window.innerHeight - instance.getCopyrightHeight() - instance.padding - top;\n\n            let height1 = height / 8;\n\n            instance.createDivMessageDo('mmogame-message-start', left, top, width, height, message, height1);\n\n            top += (height1 - instance.divMessage.scrollHeight) / 2;\n            instance.divMessage.style.top = top + \"px\";\n\n            if (instance.divMessageHelp === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"left\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.color = instance.getContrastingColor(this.colorBackground2);\n                let top = instance.iconSize + 3 * instance.padding + height1;\n                div.style.top = (top + instance.padding) + \"px\";\n                div.style.height = (height - height1) + \"px\";\n                instance.divMessageHelp = div;\n                instance.body.appendChild(instance.divMessageHelp);\n\n                instance.showHelpScreen(div, (width - 2 * instance.padding), (height - height1));\n            }\n        }\n\n        updateButtonsAvatar(num, avatarElement, nickNameElement, avatarSrc, nickname, nicknameWidth, nicknameHeight) {\n            if (avatarSrc === undefined) {\n                avatarSrc = \"\";\n            }\n            if (nickname === undefined) {\n                nickname = \"\";\n            }\n\n            if (avatarSrc === \"\" && nickname === \"\") {\n                avatarElement.style.visibility = 'hidden';\n                nickNameElement.style.visibility = 'hidden';\n                return;\n            }\n\n            if (this.nickNames[num] !== nickname || nickname === \"\") {\n                this.nickNames[num] = nickname;\n                let s = nickname;\n\n                if (nickname.length === 0) {\n                    const filenameWithExt = avatarSrc.split('/').pop(); // Extract file name\n                    // Remove extension, fallback if no extension\n                    s = filenameWithExt.split('.').slice(0, -1).join('.') || filenameWithExt;\n                }\n                s = this.repairNickname(s);\n                nickNameElement.innerHTML = s;\n                nickNameElement.style.textAlign = \"center\";\n                nickNameElement.style.color = this.getContrastingColor(this.colorBackground);\n                this.autoResizeText(nickNameElement, nicknameWidth, nicknameHeight, true, 0, 0);\n            }\n\n            if (avatarSrc !== this.avatarsSrc[num]) {\n                avatarElement.src = avatarSrc !== \"\" ? \"assets/avatars/\" + avatarSrc : \"\";\n                this.avatarsSrc[num] = avatarSrc;\n            }\n\n            avatarElement.alt = nickNameElement.innerHTML;\n            avatarElement.style.visibility = 'visible';\n\n            nickNameElement.style.visibility = 'visible';\n        }\n\n        /**\n         * Calls the Moodle Web Service 'mmogametype_quiz_get_attempt' and processes the response.\n         *\n         * @param {Object} extraparams - Additional parameters to override default ones.\n         */\n        callGetAttempt(extraparams = undefined) {\n            require(['core/ajax'], (Ajax) => {\n                let params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    nickname: null,\n                    colorpaletteid: null,\n                    avatarid: null,\n                };\n                if (extraparams !== undefined) {\n                    params = {...params, ...extraparams};\n                }\n                // Calling the service through the Moodle AJAX API\n                let getAttempt = Ajax.call([{\n                    methodname: 'mmogametype_quiz_get_attempt',\n                    args: params,\n                }]);\n\n                // Handling the response\n                getAttempt[0].done((response) => {\n                    if (extraparams !== undefined && extraparams.colorpaletteid !== undefined) {\n                        this.openGame();\n                        this.colors = undefined;\n                    }\n                    this.processGetAttempt(JSON.parse(response));\n                }).fail((error) => {\n                    this.createDivMessage('mmogame-error', error.message);\n                    return error;\n                });\n            });\n        }\n\n        createDivMessageDo(classnames, left, top, width, height, message, heightmessage) {\n            if (this.divMessageBackground === undefined) {\n                let div = this.createDiv(this.body, classnames, left, top, width, height);\n                div.style.background = this.getColorHex(this.colorBackground2);\n                this.divMessageBackground = div;\n            }\n\n            if (this.divMessage === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"center\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.background = this.getColorHex(this.colorBackground2);\n                div.style.color = this.getContrastingColor(this.colorBackground2);\n                this.divMessage = div;\n            }\n            this.divMessage.innerHTML = message;\n            this.body.appendChild(this.divMessage);\n            this.autoResizeText(this.divMessage, width, heightmessage, false, this.minFontSize, this.maxFontSize, 0.5);\n        }\n\n        setColors(colors) {\n            super.setColors(colors);\n\n            this.colorBackground2 = colors[1];\n        }\n\n        /**\n         * Displays an error message on the screen.\n         * @param {string} name - The name of the error context.\n         * @param {Error} [error] - The error object to display.\n         */\n        showError(name, error) {\n            const message = error?.message || 'An unknown error occurred.';\n            this.createDivMessage('mmogame-error', message);\n        }\n};\n});"],"names":["define","MmoGame","isVertical","kindSound","buttonSound","colorBackground2","nickname","user","paletteid","avatarid","iconSize","padding","avatarsSrc","nickNames","edtNickname","mmogameid","constructor","super","this","window","innerWidth","innerHeight","getMuteFile","playAudio","audioElement","networkState","play","createButtonSound","left","top","size","createDOMElement","parent","body","classnames","styles","position","width","height","attributes","src","alt","getStringM","role","addEventListener","onClickSound","button","setOptions","gateOpen","pin","kinduser","url","instance","minFontSize","maxFontSize","gateComputeSizes","areaRect","Math","round","getOptions","then","options","kindsound","includes","isReady","gatePlayGame","userGUID","length","gateCreateScreen","catch","error","showError","save","uuid4","callGetAttempt","colorpaletteid","message","createArea","maxHeight","maxWidth","labels","fontSize","findbest","gateComputeLabelSize","heightColors","floor","heightAvatars","gateCreateScreenDo","gateCreateNickName","focus","lblPalette","btnPalette","gateCreateLabelRefresh","scrollHeight","topGridPalette","gridHeightPalette","countX","countYpalette","lblAvatars","btnAvatars","countYavatars","gridHeightAvatars","addEventListenerRefresh","gateSendGetColorsAvatars","gateCreateSubmit","lblNickName","area","color","getContrastingColor","colorBackground","innerHTML","leftEdit","scrollWidth","debounce","gateUpdateSubmit","max","btnSubmit","cursor","visibility","value","aLabel","i","label","document","createElement","style","whiteSpace","font","appendChild","removeChild","gateShowAvatars","countY","avatarids","avatars","querySelectorAll","forEach","element","remove","fragment","createDocumentFragment","avatar","undefined","count","leftOriginal","w","avatarImagePath","btn","createCenterImageButton","classList","add","id","gateUpdateAvatar","leftPalette","topPalette","countXpalette","leftAvatars","topAvatars","countXavatars","updatePalette","arguments","updateAvatars","require","Ajax","params","colorpalettes","call","methodname","args","done","_ref","colorpaletteids","gateShowColorPalettes","fail","canvasColor","canvasSize","parsedPalettes","map","palette","split","parseInt","iy","ix","canvas","showColorPalette","gateUpdateColorPalette","borderStyle","Object","assign","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","hasAvatar","hasPalette","hasNickname","computeSizes","title","classLabel","classButton","updateColors","Array","from","getElementsByClassName","createDiv","createDivMessage","divMessageHelp","getCopyrightHeight","createDivMessageDo","divMessage","createNicknameAvatar","prefixclassname","topNickName","widthNickname","heightNickname","topAvatar","widthAvatar","classname","createDivMessageStart","height1","div","textAlign","paddingLeft","paddingRight","showHelpScreen","updateButtonsAvatar","num","avatarElement","nickNameElement","avatarSrc","nicknameWidth","nicknameHeight","s","filenameWithExt","pop","slice","join","repairNickname","autoResizeText","extraparams","response","openGame","colors","processGetAttempt","JSON","parse","heightmessage","divMessageBackground","background","getColorHex","setColors","name"],"mappings":"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"}