{"version":3,"file":"mmogametypequiz.min.js","sources":["../src/mmogametypequiz.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mod_mmogame/mmogameui'], function(MmoGameUI) {\n    return class MmoGameTypeQuiz extends MmoGameUI {\n        kinduser;\n        user;\n        url;\n        pin;\n        labelTimer;\n        timeForSendAnswer;\n\n        /**\n         * Base class for Quiz mmmogame\n         *\n         * @module mmogametype_quiz\n         * @copyright 2024 Vasilis Daloukas\n         * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n         */\n\n        constructor() {\n            super();\n            this.hideSubmit = false;\n            this.timeForSendAnswer = 10000;\n        }\n\n        /**\n         * Initializes the game by loading required audio assets.\n         */\n        openGame() {\n            super.openGame(); // Call the parent class method\n\n            // Load sound effects\n            this.audioYes = new Audio('assets/yes1.mp3');\n            this.audioYes.load();\n            this.audioNo = new Audio('assets/no1.mp3');\n            this.audioNo.load();\n        }\n\n/* B\n        updateLabelTimer() {\n            // Exit if labelTimer or timeclose are undefined\n            if (!this.labelTimer || !this.timeclose) {\n                return;\n            }\n\n            // Calculate the remaining time in seconds\n            const now = Date.now() / 1000; // Get current time in seconds\n            let remainingTime = Math.max(0, this.timeclose - now);\n\n            // If no time is remaining, clear the label and handle timeout\n            if (remainingTime === 0) {\n                this.labelTimer.innerHTML = '';\n                this.onTimeout();\n                return;\n            }\n\n            // Format the remaining time as mm:ss\n            const minutes = Math.floor(remainingTime / 60);\n            const seconds = String(Math.floor(remainingTime % 60)).padStart(2, '0');\n            this.labelTimer.innerHTML = `${minutes}:${seconds}`;\n\n            // Set a timeout to update the timer every 500ms\n            this.timerTimeout = setTimeout(() => this.updateLabelTimer(), 500);\n        }\n*/\n        /**\n         * Handles the timeout scenario by disabling inputs and sending timeout data.\n         */\n/* B\n        onTimeout() {\n            this.labelTimer.innerHTML = ''; // Clear the timer display\n            this.disableInput(); // Prevent further user input\n            this.sendTimeout(); // Notify the server about the timeout\n        }\n*/\n\n        /**\n         * Creates a vertical layout for the quiz screen.\n         *\n         * @param {boolean} disabled - Whether user input should be disabled.\n         */\n/* B\n        createScreenVertical(disabled) {\n            const nickNameHeight = Math.round(this.iconSize / 3) + this.padding;\n            let maxHeight = this.areaHeight - 4 * this.padding - nickNameHeight;\n\n            if (!this.hideSubmit) {\n                maxHeight -= this.iconSize; // Reserve space for the submit button\n            }\n\n            const maxWidth = this.areaWidth;\n\n            // Dynamically adjust font size to fit content within constraints\n            this.fontSize = this.findbest(this.minFontSize, this.maxFontSize, (fontSize) => {\n                const defSize = this.createDefinition(0, 0, maxWidth - 1, true, fontSize);\n                if (defSize[0] >= maxWidth) {\n                    return 1;\n                }\n\n                const ansSize = this.createAnswer(0, 0, maxWidth - 1, true, fontSize, disabled);\n                return defSize[1] + ansSize[1] < maxHeight ? -1 : 1;\n            });\n\n            this.radioSize = Math.round(this.fontSize);\n            const defSize = this.createDefinition(0, 0, maxWidth, false, this.fontSize);\n\n            // Position answers below the definition\n            this.nextTop = this.createAnswer(0, defSize[1] + this.padding, maxWidth, false, this.fontSize, disabled);\n\n            if (!this.hideSubmit) {\n                // Create and position the submit button\n                const space = (this.areaWidth - this.iconSize) / 2;\n                this.btnSubmit = this.createImageButton(\n                    this.area,\n                    'mmogame-quiz-submit',\n                    space,\n                    this.nextTop,\n                    0,\n                    this.iconSize,\n                    'assets/submit.svg',\n                    false,\n                    'submit'\n                );\n                this.btnSubmit.addEventListener('click', () => {\n                    this.area.removeChild(this.btnSubmit);\n                    this.btnSubmit = undefined;\n                    this.sendAnswer();\n                });\n            }\n\n            // Adjust strip dimensions\n            this.stripLeft = this.padding;\n            this.stripWidth = 2 * this.iconSize;\n            this.stripHeight = this.iconSize;\n        }\n*/\n        createAnswer(left, top, width, onlyMetrics, fontSize, disabled) {\n            return this.createAnswerMultichoice(left, top, width, onlyMetrics, fontSize, disabled);\n        }\n\n        /**\n         * Creates multiple-choice answer options.\n         *\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} width - The maximum width available for answers.\n         * @param {boolean} onlyMetrics - Whether to only calculate size metrics.\n         * @param {number} fontSize - The font size for answer text.\n         * @param {boolean} disabled - Whether the answers are disabled.\n         * @returns {number} The total height used by the answer options.\n         */\n        createAnswerMultichoice(left, top, width, onlyMetrics, fontSize, disabled) {\n            const n = this.answers ? this.answers.length : 0;\n            const aChecked = this.answer?.split(\",\").filter(Boolean) || [];\n            const retSize = [0, 0];\n            const checkboxSize = Math.round(fontSize);\n            this.aItemAnswer = Array(n);\n            this.aItemLabel = Array(n);\n            this.aItemCorrectX = new Array(n);\n\n            // Iterate over each answer\n            for (let i = 0; i < n; i++) {\n                const label = this.createDOMElement('label', {\n                    parent: null,\n                    classname: 'mmogame-quiz-label' + i,\n                    styles: {\n                        position: 'absolute',\n                        width: `${width}px`,\n                        fontSize: `${fontSize}px`,\n                        color: this.getContrastingColor(this.colorBackground),\n                    }\n                });\n                label.innerHTML = this.answers[i];\n\n                if (onlyMetrics) {\n                    this.area.appendChild(label);\n                    const newSize = label.scrollWidth + fontSize + this.padding;\n                    retSize[0] = Math.max(retSize[0], newSize);\n                    retSize[1] += Math.max(label.scrollHeight, fontSize) + this.padding;\n                    this.area.removeChild(label);\n                    continue;\n                }\n\n                label.htmlFor = \"mmogame_quiz_input\" + i;\n                label.style.left = (left + fontSize + this.padding) + \"px\";\n                label.style.top = top + \"px\";\n                label.style.align = \"left\";\n                label.style.color = this.getContrastingColor(this.colorBackground);\n\n                // Create the checkbox\n                const checked = aChecked.includes(this.answersID[i]);\n                const item = this.createRadiobox(this.body, checkboxSize, this.colorBackground2, this.colorScore,\n                    checked, disabled);\n                item.style.position = \"absolute\";\n                item.style.left = `${left}px`;\n                item.style.top = `${top}px`;\n                item.id = \"mmogame_quiz_input\" + i;\n\n                // Event listeners for interactions\n                item.addEventListener('click', () => {\n                    if (!item.classList.contains(\"disabled\")) {\n                        this.onClickRadio(i, this.colorBackground2, this.colorScore, true);\n                    }\n                });\n\n                label.addEventListener('click', () => {\n                    this.onClickRadio(i, this.colorBackground2, this.colorScore, true);\n                });\n\n                this.area.appendChild(item);\n                this.area.appendChild(label);\n\n                this.aItemAnswer[i] = item;\n                this.aItemCorrectX[i] = left + fontSize + this.padding;\n                this.aItemLabel[i] = label;\n\n                // Adjust positioning\n                top += Math.max(label.scrollHeight, fontSize) + this.padding;\n            }\n\n            return onlyMetrics ? retSize : top;\n        }\n\n        /**\n         * Handles radio button click events for answers.\n         *\n         * @param {number} index - The index of the clicked radio button.\n         * @param {string} colorBack - The background color for the radio button.\n         * @param {string} color - The color for the radio button when selected.\n         * @param {boolean} callSendAnswer - Whether to send the answer immediately.\n         */\n        onClickRadio(index, colorBack, color, callSendAnswer) {\n            if (this.aItemAnswer[index].classList.contains(\"disabled\")) {\n                return;\n            }\n\n            // Update the selected radio button and deselect others\n            this.aItemAnswer.forEach((item, i) => {\n                const isDisabled = item.classList.contains(\"disabled\");\n                if (i === index) {\n                    item.classList.add(\"checked\");\n                    this.answerid = this.answersID[i];\n                } else {\n                    item.classList.remove(\"checked\");\n                }\n\n                this.drawRadio(item, isDisabled ? colorBack : 0xFFFFFF, color);\n            });\n\n            // Send the answer if autosave is enabled\n            if (this.autosave && callSendAnswer) {\n                this.callSetAnswer();\n            }\n        }\n/* C\n        sendTimeout() {\n            let xmlhttp = new XMLHttpRequest();\n            xmlhttp.onreadystatechange = () => {\n                if (this.readyState === 4 && this.status === 200) {\n                    this.sendGetAttempt();\n                }\n            };\n            xmlhttp.open(\"POST\", this.url, true);\n\n            xmlhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n            let data = JSON.stringify({\n                \"command\": \"timeout\", \"mmogameid\": this.mmogameid, \"pin\": this.pin, 'kinduser': this.kinduser,\n                \"user\": this.user, \"attempt\": this.attempt\n            });\n            xmlhttp.send(data);\n        }\n*/\n        /**\n         * Generates an SVG for a correct or incorrect icon.\n         *\n         * @param {number} size - The size of the SVG.\n         * @param {boolean} iscorrect - Whether the answer is correct.\n         * @param {int} colorCorrect - Color for correct answers.\n         * @param {int} colorError - Color for incorrect answers.\n         * @returns {string} The SVG markup as a string.\n         */\n        getSVGcorrect(size, iscorrect, colorCorrect, colorError) {\n            if (iscorrect) {\n                let c = colorCorrect !== undefined ? this.getColorHex(colorCorrect) : '#398439';\n                return \"<svg aria-hidden=\\\"true\\\" class=\\\"svg-icon iconCheckmarkLg\\\" width=\\\"\" + size + \"\\\" height=\\\"\" + size +\n                    \"\\\" viewBox=\\\"0 0 36 36\\\"><path fill=\\\"\" + c + \"\\\" d=\\\"m6 14 8 8L30 6v8L14 30l-8-8v-8z\\\"></path></svg>\";\n            } else {\n                let c = colorError !== undefined ? this.getColorHex(colorError) : '#398439';\n                return \"<svg width=\\\"\" + size + \"\\\" height=\\\"\" + size +\n                    \"\\\" class=\\\"bi bi-x-lg\\\" viewBox=\\\"0 0 18 18\\\"> <path fill=\\\"\" + c +\n                    `\" d=\"M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 \n                1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z\"/></svg>`;\n            }\n        }\n\n\n        /**\n         * Updates the screen to show the correctness of the user's answers.\n         */\n        updateScreenAfterAnswerMultichoice() {\n            const correctAnswers = this.correct.split(\",\"); // Split correct answer IDs into an array\n\n            for (let i = 0; i < this.answersID.length; i++) {\n                const label = this.aItemLabel[i];\n                const isChecked = this.aItemAnswer[i].classList.contains(\"checked\");\n                const isCorrect = correctAnswers.includes(this.answersID[i]);\n\n                // Skip answers that are neither checked nor correct\n                if (!isCorrect && !isChecked) {\n                    continue;\n                }\n\n                // Adjust label styling and add correct/incorrect icon\n                const labelWidth = label.scrollWidth - this.radioSize;\n                label.style.left = `${parseInt(label.style.left) + this.radioSize}px`;\n                label.style.width = `${labelWidth}px`;\n\n                if (isCorrect) {\n                    label.innerHTML = `<b>${label.innerHTML}</b>`;\n                }\n\n                const top = parseInt(this.aItemAnswer[i].style.top);\n                const feedbackDiv = this.createDiv(this.area, 'mmogame-quiz-correct',\n                    this.aItemCorrectX[i], top, this.radioSize, this.radioSize);\n                feedbackDiv.innerHTML = this.getSVGcorrect(this.radioSize, isCorrect, this.colorScore, this.colorScore);\n            }\n        }\n\n        /**\n         * Disables all answer inputs to prevent further interaction.\n         */\n        disableInput() {\n            if (!this.aItemAnswer) {\n                return;\n            }\n\n            for (const item of this.aItemAnswer) {\n                item.classList.add(\"disabled\"); // Add 'disabled' class to each input\n                this.drawRadio(item, this.colorScore, this.colorBackground2); // Update styling\n            }\n        }\n        /**\n         * Sends periodic fast JSON updates to the server.\n         */\n        sendFastJSON() {\n            // Clear existing timeout if any\n            if (this.timeoutFastJSON !== undefined) {\n                clearTimeout(this.timeoutFastJSON);\n            }\n\n            this.timeoutFastJSON = setTimeout(() => {\n                const xhr = new XMLHttpRequest();\n                xhr.onreadystatechange = () => {\n                    this.timeoutFastJSON = undefined;\n                    if (xhr.readyState === 4 && xhr.status === 200) {\n                        this.onServerFastJson(xhr.response);\n                    }\n                };\n\n                const url = `${this.url}/state.php`;\n                xhr.open(\"POST\", url, true);\n\n                const data = new FormData();\n                data.set('fastjson', this.fastjson);\n                data.set('type', this.type);\n\n                xhr.send(data); // Send the fast JSON data\n            }, this.timeForSendAnswer);\n        }\n\n        onClickHelp() {\n            if (this.helpUrl !== '') {\n                window.open(this.helpUrl, \"_blank\");\n            }\n        }\n\n        getStringT(name) {\n            return M.util.get_string(name, 'mmogametype_quiz');\n        }\n\n        /**\n         * Creates a percentage-based score display using createDOMElement.\n         *\n         * @param {string} prefixclassname\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} color\n         * @param {boolean} createAddScore\n         */\n        createDivScorePercent(prefixclassname, left, top, color, createAddScore) {\n            // Create the main button container\n            this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${prefixclassname}-main`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                    border: \"0px solid \" + this.getColorHex(0xFFFFFF),\n                    boxShadow: \"inset 0 0 0.125em rgba(255, 255, 255, 0.75)\",\n                    color: color,\n                },\n                attributes: {\n                    disabled: true,\n                    innerHTML: '',\n                },\n            });\n\n            // Create the main score label\n            const scoreLabel = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${prefixclassname}-score`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top + this.iconSize / 4}px`,\n                    width: `${this.iconSize / 2}px`,\n                    height: `${this.iconSize / 2}px`,\n                    lineHeight: `${this.iconSize / 2}px`,\n                    textAlign: 'center',\n                    color: this.getContrastingColor(this.colorScore),\n                },\n                attributes: {\n                    title: this.getStringM('js_grade'),\n                },\n            });\n\n            // Create the ranking grade label\n            const rankLabel = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${prefixclassname}-rank`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize / 2}px`,\n                    height: `${this.iconSize / 3}px`,\n                    textAlign: 'center',\n                    color: this.getContrastingColor(this.colorScore),\n                },\n                attributes: {\n                    title: this.getStringM('js_ranking_grade'),\n                },\n            });\n\n            // Create the percentage label\n            const percentLabel = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${prefixclassname}-percent`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left + this.iconSize / 2}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize / 2}px`,\n                    height: `${this.iconSize / 3}px`,\n                    textAlign: 'center',\n                    fontSize: `${this.iconSize / 3}px`,\n                    lineHeight: `${this.iconSize / 3}px`,\n                    color: rankLabel.style.color,\n                },\n                attributes: {\n                    title: this.getStringM('js_ranking_percent'),\n                },\n            });\n\n            // Create the additional score label\n            let addScoreLabel = null;\n            if (createAddScore) {\n                addScoreLabel = this.createDOMElement('div', {\n                    parent: this.body,\n                    classnames: `${prefixclassname}-addscore`,\n                    styles: {\n                        position: 'absolute',\n                        left: `${left + this.iconSize / 2}px`,\n                        top: `${top + this.iconSize - this.iconSize / 3}px`,\n                        width: `${this.iconSize / 2}px`,\n                        height: `${this.iconSize / 3}px`,\n                        textAlign: 'center',\n                        fontWeight: 'bold',\n                        color: color,\n                    },\n                    attributes: {\n                        title: this.getStringM('js_percent'),\n                    },\n                });\n            }\n\n            return {lblScore: scoreLabel, lblRank: rankLabel, lblPercent: percentLabel, lblAddScore: addScoreLabel};\n        }\n\n        /**\n         * Creates and displays the definition area for the question.\n         *\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} width - The width of the definition area.\n         * @param {boolean} onlyMetrics - Whether to only measure size.\n         * @param {number} fontSize - The font size for the definition text.\n         * @param {string} definition\n         * @returns {Array} The width and height of the definition area.\n         */\n        createDefinition(left, top, width, onlyMetrics, fontSize, definition) {\n            const adjustedWidth = width - 2 * this.padding;\n\n            const definitionDiv = this.createDOMElement(\n                'div',\n                {\n                    parent: null,\n                    classnames: 'mmogame-quiz-definition',\n                    styles: {\n                        position: 'absolute',\n                        width: `${adjustedWidth}px`,\n                        fontSize: `${fontSize}px`,\n                    }\n                }\n            );\n            definitionDiv.innerHTML = definition;\n\n            if (onlyMetrics) {\n                document.body.appendChild(definitionDiv);\n\n                const size = [definitionDiv.scrollWidth, definitionDiv.scrollHeight];\n\n                document.body.removeChild(definitionDiv);\n                return size;\n            }\n\n            // Apply styling and position\n            definitionDiv.style.background = this.getColorHex(this.colorBackground2);\n            definitionDiv.style.color = this.getContrastingColor(this.colorBackground2);\n            definitionDiv.style.left = `${left}px`;\n            definitionDiv.style.top = `${top}px`;\n            definitionDiv.style.padding = `0 ${this.padding}px`;\n\n            this.area.appendChild(definitionDiv);\n\n            return [definitionDiv.scrollWidth, definitionDiv.scrollHeight];\n        }\n\n\n        /**\n         * Sends the selected answer to the server using Moodle's AJAX API.\n         */\n        callSetAnswer() {\n            // Clear existing timeout\n            if (this.timerTimeout !== undefined) {\n                clearTimeout(this.timerTimeout);\n            }\n\n            this.timerTimeout = undefined;\n\n            require(['core/ajax'], (Ajax) => {\n                const params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    attempt: this.attempt,\n                    answer: this.answer || null,\n                    answerid: this.answerid || null,\n                    subcommand: '',\n                };\n\n                Ajax.call([{\n                    methodname: 'mmogametype_quiz_set_answer', // API endpoint\n                    args: params,\n                }])[0].done((response) => {\n                    this.processSetAnswer(JSON.parse(response)); // Process the server's response\n                }).fail((error) => {\n                    this.showError(error); // Handle errors\n                });\n            });\n        }\n\n        /**\n         * Sets the colors for different UI elements and repairs them if necessary.\n         *\n         * @param {Array} colors - Array of color codes to be applied.\n         */\n        setColors(colors) {\n            super.setColors(colors);\n\n            // Assign specific colors to UI elements\n            this.colorScore = colors[2];\n            this.colorScore2 = colors[4];\n        }\n\n        updateAvatarNickname(player, avatarSrc, nickname, nicknameWidth, nicknameHeight) {\n            if (avatarSrc === undefined) {\n                avatarSrc = \"\";\n            }\n            if (nickname === undefined) {\n                nickname = \"\";\n            }\n\n            if (avatarSrc === \"\" && nickname === \"\") {\n                player.avatarElement.style.visibility = 'hidden';\n                player.nicknameElement.style.visibility = 'hidden';\n                return;\n            }\n\n            if (player.cacheNickname !== nickname || nickname === \"\") {\n                player.cacheNickname = nickname;\n                let s = nickname;\n\n                if (nickname.length === 0) {\n                    const filenameWithExt = avatarSrc.split('/').pop(); // Extract file name\n                    // Remove extension, fallback if no extension\n                    s = filenameWithExt.split('.').slice(0, -1).join('.') || filenameWithExt;\n                }\n\n                s = this.repairNickname(s);\n                player.nicknameElement.innerHTML = s;\n                player.nicknameElement.style.textAlign = \"center\";\n                player.nicknameElement.style.color = this.getContrastingColor(this.colorBackground);\n                this.autoResizeText(player.nicknameElement, nicknameWidth, nicknameHeight, true, 0, 0);\n            }\n\n            if (avatarSrc !== player.cacheAvatar) {\n                player.avatarElement.src = avatarSrc !== \"\" ? \"assets/avatars/\" + avatarSrc : \"\";\n                player.cacheAvatar = avatarSrc;\n            }\n\n            player.avatarElement.alt = player.cacheNickname;\n            player.avatarElement.style.visibility = 'visible';\n\n            player.nicknameElement.style.visibility = 'visible';\n        }\n\n    };\n    });"],"names":["define","MmoGameUI","kinduser","user","url","pin","labelTimer","timeForSendAnswer","constructor","super","this","hideSubmit","openGame","audioYes","Audio","load","audioNo","createAnswer","left","top","width","onlyMetrics","fontSize","disabled","createAnswerMultichoice","n","answers","length","aChecked","answer","split","filter","Boolean","retSize","checkboxSize","Math","round","aItemAnswer","Array","aItemLabel","aItemCorrectX","i","label","createDOMElement","parent","classname","styles","position","color","getContrastingColor","colorBackground","innerHTML","area","appendChild","newSize","scrollWidth","padding","max","scrollHeight","removeChild","htmlFor","style","align","checked","includes","answersID","item","createRadiobox","body","colorBackground2","colorScore","id","addEventListener","classList","contains","onClickRadio","index","colorBack","callSendAnswer","forEach","isDisabled","add","answerid","remove","drawRadio","autosave","callSetAnswer","getSVGcorrect","size","iscorrect","colorCorrect","colorError","undefined","getColorHex","updateScreenAfterAnswerMultichoice","correctAnswers","correct","isChecked","isCorrect","labelWidth","radioSize","parseInt","createDiv","disableInput","sendFastJSON","timeoutFastJSON","clearTimeout","setTimeout","xhr","XMLHttpRequest","onreadystatechange","readyState","status","onServerFastJson","response","open","data","FormData","set","fastjson","type","send","onClickHelp","helpUrl","window","getStringT","name","M","util","get_string","createDivScorePercent","prefixclassname","createAddScore","classnames","iconSize","height","border","boxShadow","attributes","scoreLabel","lineHeight","textAlign","title","getStringM","rankLabel","percentLabel","addScoreLabel","fontWeight","lblScore","lblRank","lblPercent","lblAddScore","createDefinition","definition","adjustedWidth","definitionDiv","document","background","timerTimeout","require","Ajax","params","mmogameid","attempt","subcommand","call","methodname","args","done","processSetAnswer","JSON","parse","fail","error","showError","setColors","colors","colorScore2","updateAvatarNickname","player","avatarSrc","nickname","nicknameWidth","nicknameHeight","avatarElement","visibility","nicknameElement","cacheNickname","s","filenameWithExt","pop","slice","join","repairNickname","autoResizeText","cacheAvatar","src","alt"],"mappings":"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"}