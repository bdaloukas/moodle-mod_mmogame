{"version":3,"file":"mmogametypequiz.min.js","sources":["../src/mmogametypequiz.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mod_mmogame/mmogameui'], function(MmoGameUI) {\n    return class MmoGameTypeQuiz extends MmoGameUI {\n        mmogameid;\n        kinduser;\n        user;\n        url;\n        pin;\n        labelTimer;\n        timeForSendAnswer;\n        divDefinition;\n        definitionHeight;\n\n        /**\n         * Base class for Quiz mmmogame\n         *\n         * @module mmogametype_quiz\n         * @copyright 2024 Vasilis Daloukas\n         * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n         */\n\n        constructor() {\n            super();\n            this.hideSubmit = false;\n            this.timeForSendAnswer = 10000;\n        }\n\n        /**\n         * Sets the colors for different UI elements and repairs them if necessary.\n         *\n         * @param {Array} colors - Array of color codes to be applied.\n         */\n        setColors(colors) {\n            this.repairColors(colors); // Ensure colors are valid\n\n            // Assign specific colors to UI elements\n            this.colorDefinition = this.colors[1];\n            this.colorScore = this.colors[2];\n            this.colorCopyright = this.colors[3];\n            this.colorScore2 = this.colors[4];\n        }\n\n        /**\n         * Initializes the game by loading required audio assets.\n         */\n        openGame() {\n            super.openGame(); // Call the parent class method\n\n            // Load sound effects\n            this.audioYes = new Audio('assets/yes1.mp3');\n            this.audioYes.load();\n            this.audioNo = new Audio('assets/no1.mp3');\n            this.audioNo.load();\n        }\n\n        /**\n         * Processes the response for a game attempt, updating the state and UI.\n         *\n         * @param {Object} json - The server response containing attempt data.\n         */\n        processGetAttempt(json) {\n            // Calculate time difference and set up the clock\n            this.computeDifClock(json.time, json.timestart, json.timeclose);\n\n            // Set colors if provided\n            if (json.colors) {\n                this.setColorsString(json.colors);\n                this.createIconBar(); // Initialize the top bar with icons\n            }\n\n            // Update the window title if a name is provided\n            if (json.name) {\n                document.title = json.name;\n            }\n\n            // Set help URL if available\n            if (json.helpurl) {\n                this.helpUrl = json.helpurl;\n            }\n\n            // Handle error messages from the server\n            if (json.errorcode) {\n                this.createDivMessage('mmogame-error', json.errorcode);\n                return;\n            }\n\n            // Update game state and user-related data\n            this.state = parseInt(json.state, 10);\n            this.fastjson = json.fastjson;\n            this.timefastjson = parseInt(json.timefastjson, 10);\n            this.updateButtonsAvatar(1, json.avatar, json.nickname);\n\n            this.attempt = json.attempt;\n\n            // Process question type and answers\n            this.qtype = json.qtype;\n            if (this.qtype === 'multichoice') {\n                this.answers = [];\n                this.answersID = json.answerids;\n                json.answers.forEach((answer, index) => {\n                    this.answers[index] = this.repairP(answer); // Process each answer\n                });\n            }\n            this.answer = json.answer ?? undefined;\n\n            // Handle end-of-game scenarios\n            this.endofgame = json.endofgame !== undefined && json.endofgame !== 0;\n            this.definition = this.repairP(json.definition);\n            this.errorcode = json.errorcode;\n\n            if (json.state !== 0) {\n                this.createScreen(json, false);\n            }\n\n            this.updateLabelTimer(); // Start or update the timer\n            this.sendFastJSON(); // Send fast JSON updates\n        }\n\n        updateLabelTimer() {\n            // Exit if labelTimer or timeclose are undefined\n            if (!this.labelTimer || !this.timeclose) {\n                return;\n            }\n\n            // Calculate the remaining time in seconds\n            const now = Date.now() / 1000; // Get current time in seconds\n            let remainingTime = Math.max(0, this.timeclose - now);\n\n            // If no time is remaining, clear the label and handle timeout\n            if (remainingTime === 0) {\n                this.labelTimer.innerHTML = '';\n                this.onTimeout();\n                return;\n            }\n\n            // Format the remaining time as mm:ss\n            const minutes = Math.floor(remainingTime / 60);\n            const seconds = String(Math.floor(remainingTime % 60)).padStart(2, '0');\n            this.labelTimer.innerHTML = `${minutes}:${seconds}`;\n\n            // Set a timeout to update the timer every 500ms\n            this.timerTimeout = setTimeout(() => this.updateLabelTimer(), 500);\n        }\n\n        /**\n         * Handles the timeout scenario by disabling inputs and sending timeout data.\n         */\n        onTimeout() {\n            this.labelTimer.innerHTML = ''; // Clear the timer display\n            this.disableInput(); // Prevent further user input\n            this.sendTimeout(); // Notify the server about the timeout\n        }\n        /**\n         * Creates the game screen layout based on the current state.\n         *\n         * @param {Object} json - The game data used to build the screen.\n         * @param {boolean} disabled - Determines whether user input should be disabled.\n         */\n        createScreen(json, disabled) {\n            this.createArea(); // Prepare the main game area\n\n            if (this.endofgame) {\n                // Display end-of-game message and final score\n                this.createDivMessage('mmogame-endofgame', this.getStringM('js_game_over'));\n                this.showScore(json);\n                return;\n            }\n\n            // Render the screen layout based on orientation (vertical or horizontal)\n            if (this.vertical) {\n                this.createScreenVertical(disabled);\n            } else {\n                this.createScreenHorizontal(disabled);\n            }\n\n            // Display the current score\n            this.showScore(json);\n        }\n\n        /**\n         * Creates a vertical layout for the quiz screen.\n         *\n         * @param {boolean} disabled - Whether user input should be disabled.\n         */\n        createScreenVertical(disabled) {\n            const nickNameHeight = Math.round(this.iconSize / 3) + this.padding;\n            let maxHeight = this.areaHeight - 4 * this.padding - nickNameHeight;\n\n            if (!this.hideSubmit) {\n                maxHeight -= this.iconSize; // Reserve space for the submit button\n            }\n\n            const maxWidth = this.areaWidth;\n\n            // Dynamically adjust font size to fit content within constraints\n            this.fontSize = this.findbest(this.minFontSize, this.maxFontSize, (fontSize) => {\n                const defSize = this.createDefinition(0, 0, maxWidth - 1, true, fontSize);\n                if (defSize[0] >= maxWidth) {\n                    return 1;\n                }\n\n                const ansSize = this.createAnswer(0, 0, maxWidth - 1, true, fontSize, disabled);\n                return defSize[1] + ansSize[1] < maxHeight ? -1 : 1;\n            });\n\n            this.radioSize = Math.round(this.fontSize);\n            const defSize = this.createDefinition(0, 0, maxWidth, false, this.fontSize);\n\n            // Position answers below the definition\n            this.nextTop = this.createAnswer(0, defSize[1] + this.padding, maxWidth, false, this.fontSize, disabled);\n\n            if (!this.hideSubmit) {\n                // Create and position the submit button\n                const space = (this.areaWidth - this.iconSize) / 2;\n                this.btnSubmit = this.createImageButton(\n                    this.area,\n                    'mmogame-quiz-submit',\n                    space,\n                    this.nextTop,\n                    0,\n                    this.iconSize,\n                    'assets/submit.svg',\n                    false,\n                    'submit'\n                );\n                this.btnSubmit.addEventListener('click', () => {\n                    this.area.removeChild(this.btnSubmit);\n                    this.btnSubmit = undefined;\n                    this.sendAnswer();\n                });\n            }\n\n            // Adjust strip dimensions\n            this.stripLeft = this.padding;\n            this.stripWidth = 2 * this.iconSize;\n            this.stripHeight = this.iconSize;\n        }\n\n        /**\n         * Creates a horizontal layout for the quiz screen.\n         *\n         * @param {boolean} disabled - Whether user input should be disabled.\n         */\n        createScreenHorizontal(disabled) {\n            let maxHeight = this.areaHeight - 2 * this.padding;\n\n            if (!this.hideSubmit) {\n                maxHeight -= this.iconSize + this.padding; // Reserve space for submit button\n            }\n\n            const width = Math.round((this.areaWidth - this.padding) / 2);\n            const instance = this;\n            for (let step = 1; step <= 2; step++) {\n                let defSize;\n                this.fontSize = this.findbest(step === 1 ? this.minFontSize : this.minFontSize / 2, this.maxFontSize,\n                    function(fontSize) {\n                        defSize = instance.createDefinition(0, 0, width - instance.padding, true, fontSize);\n\n                        if (defSize[0] >= width) {\n                            return 1;\n                        }\n                        let ansSize = instance.createAnswer(0, 0, width - instance.padding, true, fontSize, disabled);\n                        if (ansSize[0] >= width) {\n                            return 1;\n                        }\n                        return defSize[1] < maxHeight && ansSize[1] < maxHeight ? -1 : 1;\n                    }\n                );\n                if (defSize[0] <= width && defSize[1] <= instance.areaHeight) {\n                    break;\n                }\n            }\n\n            this.radioSize = Math.round(this.fontSize);\n            this.createDefinition(0, 0, width - this.padding, false, this.fontSize);\n\n            this.nextTop = this.createAnswer(width, 0, width - this.padding, false, this.fontSize, disabled) + this.padding;\n\n            if (!this.hideSubmit) {\n                // Create and position the submit button\n                this.btnSubmit = this.createImageButton(\n                    this.body,\n                    'mmogame-quiz-submit',\n                    width + (width - this.iconSize) / 2,\n                    this.nextTop,\n                    0,\n                    this.iconSize,\n                    'assets/submit.svg',\n                    false,\n                    'submit'\n                );\n                this.btnSubmit.addEventListener('click', () => {\n                    this.sendAnswer();\n                });\n            }\n\n            // Adjust strip dimensions\n            this.stripLeft = width + this.padding;\n            this.stripWidth = 2 * this.iconSize;\n            this.stripHeight = this.iconSize;\n        }\n\n        createAnswer(left, top, width, onlyMetrics, fontSize, disabled) {\n            return this.createAnswerMultichoice(left, top, width, onlyMetrics, fontSize, disabled);\n        }\n\n        /**\n         * Creates multiple-choice answer options.\n         *\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} width - The maximum width available for answers.\n         * @param {boolean} onlyMetrics - Whether to only calculate size metrics.\n         * @param {number} fontSize - The font size for answer text.\n         * @param {boolean} disabled - Whether the answers are disabled.\n         * @returns {number} The total height used by the answer options.\n         */\n        createAnswerMultichoice(left, top, width, onlyMetrics, fontSize, disabled) {\n            const n = this.answers ? this.answers.length : 0;\n            const aChecked = this.answer?.split(\",\").filter(Boolean) || [];\n            const retSize = [0, 0];\n            const checkboxSize = Math.round(fontSize);\nconsole.log(\"createAnswerMultichoice fontSize=\" + fontSize);\n            this.aItemAnswer = Array(n);\n            this.aItemLabel = Array(n);\n            this.aItemCorrectX = new Array(n);\n\n            // Iterate over each answer\n            for (let i = 0; i < n; i++) {\n                const label = document.createElement(\"label\");\n                label.style.position = \"absolute\";\n                label.style.width = `${width}px`;\n                label.style.fontSize = `${fontSize}px`;\n                label.style.color = this.getContrastingColor(this.colorBackground);\n                label.innerHTML = this.answers[i];\n                label.classList.add('mmogame-quiz-multichoice-label');\n\n                if (onlyMetrics) {\n                    this.area.appendChild(label);\n                    const newSize = label.scrollWidth + fontSize + this.padding;\n                    retSize[0] = Math.max(retSize[0], newSize);\n                    retSize[1] += Math.max(label.scrollHeight, fontSize) + this.padding;\n                    this.area.removeChild(label);\n                    continue;\n                }\n\n                label.htmlFor = \"mmogame_quiz_input\" + i;\n                label.style.left = (left + fontSize + this.padding) + \"px\";\n                label.style.top = top + \"px\";\n                label.style.align = \"left\";\n                label.style.color = this.getContrastingColor(this.colorBackground);\n\n                // Create the checkbox\n                const checked = aChecked.includes(this.answersID[i]);\n                const item = this.createRadiobox(this.body, checkboxSize, this.colorDefinition, this.colorScore, checked, disabled);\n                item.style.position = \"absolute\";\n                item.style.left = `${left}px`;\n                item.style.top = `${top}px`;\n                item.id = \"mmogame_quiz_input\" + i;\n\n                // Event listeners for interactions\n                item.addEventListener('click', () => {\n                    if (!item.classList.contains(\"disabled\")) {\n                        this.onClickRadio(i, this.colorDefinition, this.colorScore, true);\n                    }\n                });\n\n                label.addEventListener('click', () => {\n                    this.onClickRadio(i, this.colorDefinition, this.colorScore, true);\n                });\n\n                this.area.appendChild(item);\n                this.area.appendChild(label);\n\n                this.aItemAnswer[i] = item;\n                this.aItemCorrectX[i] = left + fontSize + this.padding;\n                this.aItemLabel[i] = label;\n\n                // Adjust positioning\n                top += Math.max(label.scrollHeight, fontSize) + this.padding;\n            }\n\n            return onlyMetrics ? retSize : top;\n        }\n\n        /**\n         * Handles radio button click events for answers.\n         *\n         * @param {number} index - The index of the clicked radio button.\n         * @param {string} colorBack - The background color for the radio button.\n         * @param {string} color - The color for the radio button when selected.\n         * @param {boolean} callSendAnswer - Whether to send the answer immediately.\n         */\n        onClickRadio(index, colorBack, color, callSendAnswer) {\n            if (this.aItemAnswer[index].classList.contains(\"disabled\")) {\n                return;\n            }\n\n            // Update the selected radio button and deselect others\n            this.aItemAnswer.forEach((item, i) => {\n                const isDisabled = item.classList.contains(\"disabled\");\n                if (i === index) {\n                    item.classList.add(\"checked\");\n                    this.answerid = this.answersID[i];\n                } else {\n                    item.classList.remove(\"checked\");\n                }\n\n                this.drawRadio(item, isDisabled ? colorBack : 0xFFFFFF, color);\n            });\n\n            // Send the answer if autosave is enabled\n            if (this.autosave && callSendAnswer) {\n                this.callSetAnswer();\n            }\n        }\n\n        sendTimeout() {\n            let xmlhttp = new XMLHttpRequest();\n            let instance = this;\n            xmlhttp.onreadystatechange = function() {\n                if (this.readyState === 4 && this.status === 200) {\n                    instance.sendGetAttempt();\n                }\n            };\n            xmlhttp.open(\"POST\", this.url, true);\n\n            xmlhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n            let data = JSON.stringify({\n                \"command\": \"timeout\", \"mmogameid\": this.mmogameid, \"pin\": this.pin, 'kinduser': this.kinduser,\n                \"user\": this.user, \"attempt\": this.attempt\n            });\n            xmlhttp.send(data);\n        }\n\n        /**\n         * Generates an SVG for a correct or incorrect icon.\n         *\n         * @param {number} size - The size of the SVG.\n         * @param {boolean} iscorrect - Whether the answer is correct.\n         * @param {int} colorCorrect - Color for correct answers.\n         * @param {int} colorError - Color for incorrect answers.\n         * @returns {string} The SVG markup as a string.\n         */\n        getSVGcorrect(size, iscorrect, colorCorrect, colorError) {\n            if (iscorrect) {\n                let c = colorCorrect !== undefined ? this.getColorHex(colorCorrect) : '#398439';\n                return \"<svg aria-hidden=\\\"true\\\" class=\\\"svg-icon iconCheckmarkLg\\\" width=\\\"\" + size + \"\\\" height=\\\"\" + size +\n                    \"\\\" viewBox=\\\"0 0 36 36\\\"><path fill=\\\"\" + c + \"\\\" d=\\\"m6 14 8 8L30 6v8L14 30l-8-8v-8z\\\"></path></svg>\";\n            } else {\n                let c = colorError !== undefined ? this.getColorHex(colorError) : '#398439';\n                return \"<svg width=\\\"\" + size + \"\\\" height=\\\"\" + size +\n                    \"\\\" class=\\\"bi bi-x-lg\\\" viewBox=\\\"0 0 18 18\\\"> <path fill=\\\"\" + c +\n                    `\" d=\"M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 \n                1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z\"/></svg>`;\n            }\n        }\n\n\n        /**\n         * Updates the screen to show the correctness of the user's answers.\n         */\n        updateScreenAfterAnswerMultichoice() {\n            const correctAnswers = this.correct.split(\",\"); // Split correct answer IDs into an array\n\n            for (let i = 0; i < this.answersID.length; i++) {\n                const label = this.aItemLabel[i];\n                const isChecked = this.aItemAnswer[i].classList.contains(\"checked\");\n                const isCorrect = correctAnswers.includes(this.answersID[i]);\n\n                // Skip answers that are neither checked nor correct\n                if (!isCorrect && !isChecked) {\n                    continue;\n                }\n\n                // Adjust label styling and add correct/incorrect icon\n                const labelWidth = label.scrollWidth - this.radioSize;\n                label.style.left = `${parseInt(label.style.left) + this.radioSize}px`;\n                label.style.width = `${labelWidth}px`;\n\n                if (isCorrect) {\n                    label.innerHTML = `<b>${label.innerHTML}</b>`;\n                }\n\n                const top = parseInt(this.aItemAnswer[i].style.top);\n                const feedbackDiv = this.createDiv(this.area, 'mmogame-quiz-correct',\n                    this.aItemCorrectX[i], top, this.radioSize, this.radioSize);\n                feedbackDiv.innerHTML = this.getSVGcorrect(this.radioSize, isCorrect, this.colorScore, this.colorScore);\n            }\n        }\n\n        /**\n         * Disables all answer inputs to prevent further interaction.\n         */\n        disableInput() {\n            if (!this.aItemAnswer) {\n                return;\n            }\n\n            for (const item of this.aItemAnswer) {\n                item.classList.add(\"disabled\"); // Add 'disabled' class to each input\n                this.drawRadio(item, this.colorScore, this.colorDefinition); // Update styling\n            }\n        }\n        /**\n         * Sends periodic fast JSON updates to the server.\n         */\n        sendFastJSON() {\n            // Clear existing timeout if any\n            if (this.timeoutFastJSON !== undefined) {\n                clearTimeout(this.timeoutFastJSON);\n            }\n\n            this.timeoutFastJSON = setTimeout(() => {\n                const xhr = new XMLHttpRequest();\n                xhr.onreadystatechange = () => {\n                    this.timeoutFastJSON = undefined;\n                    if (xhr.readyState === 4 && xhr.status === 200) {\n                        this.onServerFastJson(xhr.response);\n                    }\n                };\n\n                const url = `${this.url}/state.php`;\n                xhr.open(\"POST\", url, true);\n\n                const data = new FormData();\n                data.set('fastjson', this.fastjson);\n                data.set('type', this.type);\n\n                xhr.send(data); // Send the fast JSON data\n            }, this.timeForSendAnswer);\n        }\n\n\n        onClickHelp() {\n            if (this.helpUrl !== '') {\n                window.open(this.helpUrl, \"_blank\");\n            }\n        }\n\n        getStringT(name) {\n            return M.util.get_string(name, 'mmogametype_quiz');\n        }\n\n        /**\n         * Creates a percentage-based score display using createDOMElement.\n         *\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} num - Identifier for the score (1 or 2).\n         */\n        createDivScorePercent(left, top, num) {\n            // Create the main button container\n            const button = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: 'score-button',\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                    border: \"0px solid \" + this.getColorHex(0xFFFFFF),\n                    boxShadow: \"inset 0 0 0.125em rgba(255, 255, 255, 0.75)\",\n                    background: num === 1 ? this.getColorHex(this.colorScore) : this.getColorHex(this.colorScore2),\n                    color: num === 1 ? this.getContrastingColor(this.colorScore) : this.getContrastingColor(this.colorScore2),\n                },\n                attributes: {\n                    title: num === 1 ? this.getStringM('js_grade') : this.getStringM('js_grade_opponent'),\n                    disabled: true,\n                },\n            });\n\n            button.innerHTML = '';\n\n            // Create the main score label\n            const scoreLabel = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: 'score-label',\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top + this.iconSize / 4}px`,\n                    width: `${this.iconSize / 2}px`,\n                    height: `${this.iconSize / 2}px`,\n                    lineHeight: `${this.iconSize / 2}px`,\n                    textAlign: 'center',\n                    color: this.getContrastingColor(this.colorScore),\n                },\n                attributes: {\n                    title: num === 1 ? this.getStringM('js_grade') : this.getStringM('js_grade_opponent'),\n                },\n            });\n\n            if (num === 1) {\n                this.labelScore = scoreLabel;\n            } else {\n                this.labelScore2 = scoreLabel;\n            }\n\n            // Create the ranking grade label\n            const rankLabel = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: 'ranking-label',\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize / 2}px`,\n                    height: `${this.iconSize / 3}px`,\n                    textAlign: 'center',\n                    color: this.getContrastingColor(this.colorScore),\n                },\n                attributes: {\n                    title: this.getStringM('js_ranking_grade'),\n                },\n            });\n\n            if (num === 1) {\n                this.labelScoreRank = rankLabel;\n            } else {\n                this.labelScoreRank2 = rankLabel;\n            }\n\n            this.createAddScore('mmogame_addscore', left, top + this.iconSize - this.iconSize / 3,\n                this.iconSize / 2, this.iconSize / 3, num);\n\n            // Create the percentage label\n            const percentLabel = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: 'percent-label',\n                styles: {\n                    position: 'absolute',\n                    left: `${left + this.iconSize / 2}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize / 2}px`,\n                    height: `${this.iconSize / 3}px`,\n                    textAlign: 'center',\n                    fontSize: `${this.iconSize / 3}px`,\n                    lineHeight: `${this.iconSize / 3}px`,\n                    color: rankLabel.style.color,\n                },\n                attributes: {\n                    title: this.getStringM('js_ranking_percent'),\n                },\n            });\n\n            if (num === 1) {\n                this.labelScoreRankB = percentLabel;\n            }\n\n            // Create the additional score label\n            const addScoreLabel = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: 'addscore-label',\n                styles: {\n                    position: 'absolute',\n                    left: `${left + this.iconSize / 2}px`,\n                    top: `${parseFloat(this.labelScore.style.top)}px`,\n                    width: `${this.iconSize / 2}px`,\n                    height: `${this.iconSize / 2}px`,\n                    textAlign: 'center',\n                    lineHeight: `${Math.round(this.iconSize / 2)}px`,\n                    fontWeight: 'bold',\n                    color: rankLabel.style.color,\n                },\n                attributes: {\n                    title: this.getStringM('js_percent'),\n                },\n            });\n\n            if (num === 1) {\n                this.labelScoreB = addScoreLabel;\n            }\n        }\n\n        /**\n         * Creates and displays the definition area for the question.\n         *\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} width - The width of the definition area.\n         * @param {boolean} onlyMetrics - Whether to only measure size.\n         * @param {number} fontSize - The font size for the definition text.\n         * @returns {Array} The width and height of the definition area.\n         */\n        createDefinition(left, top, width, onlyMetrics, fontSize) {\n            width -= 2 * this.padding;\n\n            const definitionDiv = document.createElement(\"div\");\n            definitionDiv.style.position = \"absolute\";\n            definitionDiv.style.width = `${width}px`;\n            definitionDiv.style.fontSize = `${fontSize}px`;\n            definitionDiv.innerHTML = this.definition;\n\n            if (onlyMetrics) {\n                this.body.appendChild(definitionDiv);\n                const size = [definitionDiv.scrollWidth, definitionDiv.scrollHeight];\n                this.body.removeChild(definitionDiv);\n                return size;\n            }\n\n            // Apply styling and position\n            definitionDiv.style.background = this.getColorHex(this.colorDefinition);\n            definitionDiv.style.color = this.getContrastingColor(this.colorDefinition);\n            definitionDiv.style.left = `${left}px`;\n            definitionDiv.style.top = `${top}px`;\n            definitionDiv.style.paddingLeft = `${this.padding}px`;\n            definitionDiv.style.paddingRight = `${this.padding}px`;\n\n            this.area.appendChild(definitionDiv);\n\n            const height = definitionDiv.scrollHeight + this.padding;\n            definitionDiv.style.height = `${height}px`;\n\n            this.definitionHeight = height;\n            this.divDefinition = definitionDiv;\n\n            return [definitionDiv.scrollWidth, definitionDiv.scrollHeight];\n        }\n\n        /**\n         * Displays the current score and ranking on the screen.\n         *\n         * @param {Object} scoreData - The data containing score, rank, and percentages.\n         * @param {string} scoreData.addscore\n         * @param {int} scoreData.completedrank\n         * @param {int} scoreData.percentcompleted\n         * @param {int} scoreData.rank\n         * @param {int} scoreData.sumscore\n         * @param {string} scoreData.usercode\n         */\n        showScore({addscore, completedrank, percentcompleted, rank, sumscore, usercode}) {\n            // Update total score display\n            const scoreText = sumscore !== undefined ? `<b>${sumscore}</b>` : '';\n            if (this.labelScore.innerHTML !== scoreText) {\n                this.labelScore.innerHTML = scoreText;\n                this.autoResizeText(this.labelScore, this.iconSize - 2 * this.padding, this.iconSize / 2, false, 0, 0, 1);\n            }\n\n            // Update rank display\n            if (this.labelScoreRank.innerHTML !== rank) {\n                this.labelScoreRank.innerHTML = rank || '';\n                this.autoResizeText(this.labelScoreRank, this.iconSize, this.iconSize / 3, true, 0, 0, 1);\n            }\n\n            // Update document title if applicable\n            if (usercode !== undefined) {\n                document.title = `${usercode} ${name || ''}`;\n            }\n\n            // Update additional score\n            const addScoreText = addscore !== undefined ? addscore : '';\n            if (this.labelAddScore.innerHTML !== addScoreText) {\n                this.labelAddScore.innerHTML = addScoreText;\n                this.autoResizeText(this.labelAddScore, this.iconSize - 2 * this.padding, this.iconSize / 3, false, 0, 0, 1);\n            }\n\n            // Update completed rank display\n            if (this.labelScoreRankB.innerHTML !== completedrank) {\n                this.labelScoreRankB.innerHTML = completedrank || '';\n                this.autoResizeText(this.labelScoreRankB, 0.9 * this.iconSize / 2, this.iconSize / 3, true, 0, 0, 1);\n            }\n\n            // Update percentage completed\n            const percentageText = percentcompleted !== undefined ? `${Math.round(100 * percentcompleted)}%` : '';\n            if (this.labelScoreB.innerHTML !== percentageText) {\n                this.labelScoreB.innerHTML = percentageText;\n                this.autoResizeText(this.labelScoreB, 0.8 * this.iconSize / 2, this.iconSize / 3, true, 0, 0, 1);\n            }\n        }\n\n        /**\n         * Sends the selected answer to the server using Moodle's AJAX API.\n         */\n        callSetAnswer() {\n            // Clear existing timeout\n            if (this.timerTimeout !== undefined) {\n                clearTimeout(this.timerTimeout);\n            }\n\n            this.timerTimeout = undefined;\n\n            require(['core/ajax'], (Ajax) => {\n                const params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    attempt: this.attempt,\n                    answer: this.answer || null,\n                    answerid: this.answerid || null,\n                    subcommand: '',\n                };\n\n                Ajax.call([{\n                    methodname: 'mmogametype_quiz_set_answer', // API endpoint\n                    args: params,\n                }])[0].done((response) => {\n                    this.processSetAnswer(JSON.parse(response)); // Process the server's response\n                }).fail((error) => {\n                    this.showError(error); // Handle errors\n                });\n            });\n        }\n\n    };\n    });"],"names":["define","MmoGameUI","constructor","hideSubmit","timeForSendAnswer","setColors","colors","repairColors","colorDefinition","this","colorScore","colorCopyright","colorScore2","openGame","audioYes","Audio","load","audioNo","processGetAttempt","json","computeDifClock","time","timestart","timeclose","setColorsString","createIconBar","name","document","title","helpurl","helpUrl","errorcode","createDivMessage","state","parseInt","fastjson","timefastjson","updateButtonsAvatar","avatar","nickname","attempt","qtype","answers","answersID","answerids","forEach","answer","index","repairP","undefined","endofgame","definition","createScreen","updateLabelTimer","sendFastJSON","labelTimer","now","Date","remainingTime","Math","max","innerHTML","onTimeout","minutes","floor","seconds","String","padStart","timerTimeout","setTimeout","disableInput","sendTimeout","disabled","createArea","getStringM","showScore","vertical","createScreenVertical","createScreenHorizontal","nickNameHeight","round","iconSize","padding","maxHeight","areaHeight","maxWidth","areaWidth","fontSize","findbest","minFontSize","maxFontSize","defSize","createDefinition","ansSize","createAnswer","radioSize","nextTop","space","btnSubmit","createImageButton","area","addEventListener","removeChild","sendAnswer","stripLeft","stripWidth","stripHeight","width","instance","step","body","left","top","onlyMetrics","createAnswerMultichoice","n","length","aChecked","split","filter","Boolean","retSize","checkboxSize","console","log","aItemAnswer","Array","aItemLabel","aItemCorrectX","i","label","createElement","style","position","color","getContrastingColor","colorBackground","classList","add","appendChild","newSize","scrollWidth","scrollHeight","htmlFor","align","checked","includes","item","createRadiobox","id","contains","onClickRadio","colorBack","callSendAnswer","isDisabled","answerid","remove","drawRadio","autosave","callSetAnswer","xmlhttp","XMLHttpRequest","onreadystatechange","readyState","status","sendGetAttempt","open","url","setRequestHeader","data","JSON","stringify","mmogameid","pin","kinduser","user","send","getSVGcorrect","size","iscorrect","colorCorrect","colorError","getColorHex","updateScreenAfterAnswerMultichoice","correctAnswers","correct","isChecked","isCorrect","labelWidth","createDiv","timeoutFastJSON","clearTimeout","xhr","onServerFastJson","response","FormData","set","type","onClickHelp","window","getStringT","M","util","get_string","createDivScorePercent","num","createDOMElement","parent","classnames","styles","height","border","boxShadow","background","attributes","scoreLabel","lineHeight","textAlign","labelScore","labelScore2","rankLabel","labelScoreRank","labelScoreRank2","createAddScore","percentLabel","labelScoreRankB","addScoreLabel","parseFloat","fontWeight","labelScoreB","definitionDiv","paddingLeft","paddingRight","definitionHeight","divDefinition","addscore","completedrank","percentcompleted","rank","sumscore","usercode","scoreText","autoResizeText","addScoreText","labelAddScore","percentageText","require","Ajax","params","subcommand","call","methodname","args","done","processSetAnswer","parse","fail","error","showError"],"mappings":"oKAeAA,0CAAO,CAAC,0BAA0B,SAASC,kBAChC,cAA8BA;;;;;;;;AAmBjCC,8YAESC,YAAa,OACbC,kBAAoB,IAQ7BC,UAAUC,aACDC,aAAaD,aAGbE,gBAAkBC,KAAKH,OAAO,QAC9BI,WAAaD,KAAKH,OAAO,QACzBK,eAAiBF,KAAKH,OAAO,QAC7BM,YAAcH,KAAKH,OAAO,GAMnCO,iBACUA,gBAGDC,SAAW,IAAIC,MAAM,wBACrBD,SAASE,YACTC,QAAU,IAAIF,MAAM,uBACpBE,QAAQD,OAQjBE,kBAAkBC,4BAETC,gBAAgBD,KAAKE,KAAMF,KAAKG,UAAWH,KAAKI,WAGjDJ,KAAKb,cACAkB,gBAAgBL,KAAKb,aACrBmB,iBAILN,KAAKO,OACLC,SAASC,MAAQT,KAAKO,MAItBP,KAAKU,eACAC,QAAUX,KAAKU,SAIpBV,KAAKY,eACAC,iBAAiB,gBAAiBb,KAAKY,iBAK3CE,MAAQC,SAASf,KAAKc,MAAO,SAC7BE,SAAWhB,KAAKgB,cAChBC,aAAeF,SAASf,KAAKiB,aAAc,SAC3CC,oBAAoB,EAAGlB,KAAKmB,OAAQnB,KAAKoB,eAEzCC,QAAUrB,KAAKqB,aAGfC,MAAQtB,KAAKsB,MACC,gBAAfhC,KAAKgC,aACAC,QAAU,QACVC,UAAYxB,KAAKyB,UACtBzB,KAAKuB,QAAQG,SAAQ,CAACC,OAAQC,cACrBL,QAAQK,OAAStC,KAAKuC,QAAQF,iBAGtCA,4BAAS3B,KAAK2B,iDAAUG,OAGxBC,eAA+BD,IAAnB9B,KAAK+B,WAA8C,IAAnB/B,KAAK+B,eACjDC,WAAa1C,KAAKuC,QAAQ7B,KAAKgC,iBAC/BpB,UAAYZ,KAAKY,UAEH,IAAfZ,KAAKc,YACAmB,aAAajC,MAAM,QAGvBkC,wBACAC,gBAGTD,uBAES5C,KAAK8C,aAAe9C,KAAKc,uBAKxBiC,IAAMC,KAAKD,MAAQ,QACrBE,cAAgBC,KAAKC,IAAI,EAAGnD,KAAKc,UAAYiC,QAG3B,IAAlBE,0BACKH,WAAWM,UAAY,aACvBC,kBAKHC,QAAUJ,KAAKK,MAAMN,cAAgB,IACrCO,QAAUC,OAAOP,KAAKK,MAAMN,cAAgB,KAAKS,SAAS,EAAG,UAC9DZ,WAAWM,oBAAeE,oBAAWE,cAGrCG,aAAeC,YAAW,IAAM5D,KAAK4C,oBAAoB,KAMlES,iBACSP,WAAWM,UAAY,QACvBS,oBACAC,cAQTnB,aAAajC,KAAMqD,kBACVC,aAEDhE,KAAKyC,sBAEAlB,iBAAiB,oBAAqBvB,KAAKiE,WAAW,2BACtDC,UAAUxD,MAKfV,KAAKmE,cACAC,qBAAqBL,eAErBM,uBAAuBN,eAI3BG,UAAUxD,MAQnB0D,qBAAqBL,gBACXO,eAAiBpB,KAAKqB,MAAMvE,KAAKwE,SAAW,GAAKxE,KAAKyE,YACxDC,UAAY1E,KAAK2E,WAAa,EAAI3E,KAAKyE,QAAUH,eAEhDtE,KAAKN,aACNgF,WAAa1E,KAAKwE,gBAGhBI,SAAW5E,KAAK6E,eAGjBC,SAAW9E,KAAK+E,SAAS/E,KAAKgF,YAAahF,KAAKiF,aAAcH,iBACzDI,QAAUlF,KAAKmF,iBAAiB,EAAG,EAAGP,SAAW,GAAG,EAAME,aAC5DI,QAAQ,IAAMN,gBACP,QAGLQ,QAAUpF,KAAKqF,aAAa,EAAG,EAAGT,SAAW,GAAG,EAAME,SAAUf,iBAC/DmB,QAAQ,GAAKE,QAAQ,GAAKV,WAAa,EAAI,UAGjDY,UAAYpC,KAAKqB,MAAMvE,KAAK8E,gBAC3BI,QAAUlF,KAAKmF,iBAAiB,EAAG,EAAGP,UAAU,EAAO5E,KAAK8E,kBAG7DS,QAAUvF,KAAKqF,aAAa,EAAGH,QAAQ,GAAKlF,KAAKyE,QAASG,UAAU,EAAO5E,KAAK8E,SAAUf,WAE1F/D,KAAKN,WAAY,OAEZ8F,OAASxF,KAAK6E,UAAY7E,KAAKwE,UAAY,OAC5CiB,UAAYzF,KAAK0F,kBAClB1F,KAAK2F,KACL,sBACAH,MACAxF,KAAKuF,QACL,EACAvF,KAAKwE,SACL,qBACA,EACA,eAECiB,UAAUG,iBAAiB,SAAS,UAChCD,KAAKE,YAAY7F,KAAKyF,gBACtBA,eAAYjD,OACZsD,qBAKRC,UAAY/F,KAAKyE,aACjBuB,WAAa,EAAIhG,KAAKwE,cACtByB,YAAcjG,KAAKwE,SAQ5BH,uBAAuBN,cACfW,UAAY1E,KAAK2E,WAAa,EAAI3E,KAAKyE,QAEtCzE,KAAKN,aACNgF,WAAa1E,KAAKwE,SAAWxE,KAAKyE,eAGhCyB,MAAQhD,KAAKqB,OAAOvE,KAAK6E,UAAY7E,KAAKyE,SAAW,GACrD0B,SAAWnG,SACZ,IAAIoG,KAAO,EAAGA,MAAQ,EAAGA,OAAQ,KAC9BlB,gBACCJ,SAAW9E,KAAK+E,SAAkB,IAATqB,KAAapG,KAAKgF,YAAchF,KAAKgF,YAAc,EAAGhF,KAAKiF,aACrF,SAASH,aACLI,QAAUiB,SAAShB,iBAAiB,EAAG,EAAGe,MAAQC,SAAS1B,SAAS,EAAMK,UAEtEI,QAAQ,IAAMgB,aACP,MAEPd,QAAUe,SAASd,aAAa,EAAG,EAAGa,MAAQC,SAAS1B,SAAS,EAAMK,SAAUf,iBAChFqB,QAAQ,IAAMc,MACP,EAEJhB,QAAQ,GAAKR,WAAaU,QAAQ,GAAKV,WAAa,EAAI,KAGnEQ,QAAQ,IAAMgB,OAAShB,QAAQ,IAAMiB,SAASxB,sBAKjDW,UAAYpC,KAAKqB,MAAMvE,KAAK8E,eAC5BK,iBAAiB,EAAG,EAAGe,MAAQlG,KAAKyE,SAAS,EAAOzE,KAAK8E,eAEzDS,QAAUvF,KAAKqF,aAAaa,MAAO,EAAGA,MAAQlG,KAAKyE,SAAS,EAAOzE,KAAK8E,SAAUf,UAAY/D,KAAKyE,QAEnGzE,KAAKN,kBAED+F,UAAYzF,KAAK0F,kBAClB1F,KAAKqG,KACL,sBACAH,OAASA,MAAQlG,KAAKwE,UAAY,EAClCxE,KAAKuF,QACL,EACAvF,KAAKwE,SACL,qBACA,EACA,eAECiB,UAAUG,iBAAiB,SAAS,UAChCE,sBAKRC,UAAYG,MAAQlG,KAAKyE,aACzBuB,WAAa,EAAIhG,KAAKwE,cACtByB,YAAcjG,KAAKwE,SAG5Ba,aAAaiB,KAAMC,IAAKL,MAAOM,YAAa1B,SAAUf,iBAC3C/D,KAAKyG,wBAAwBH,KAAMC,IAAKL,MAAOM,YAAa1B,SAAUf,UAcjF0C,wBAAwBH,KAAMC,IAAKL,MAAOM,YAAa1B,SAAUf,iCACvD2C,EAAI1G,KAAKiC,QAAUjC,KAAKiC,QAAQ0E,OAAS,EACzCC,oCAAgBvE,mDAAQwE,MAAM,KAAKC,OAAOC,WAAY,GACtDC,QAAU,CAAC,EAAG,GACdC,aAAe/D,KAAKqB,MAAMO,UAC5CoC,QAAQC,IAAI,oCAAsCrC,eACjCsC,YAAcC,MAAMX,QACpBY,WAAaD,MAAMX,QACnBa,cAAgB,IAAIF,MAAMX,OAG1B,IAAIc,EAAI,EAAGA,EAAId,EAAGc,IAAK,OAClBC,MAAQvG,SAASwG,cAAc,YACrCD,MAAME,MAAMC,SAAW,WACvBH,MAAME,MAAMzB,gBAAWA,YACvBuB,MAAME,MAAM7C,mBAAcA,eAC1B2C,MAAME,MAAME,MAAQ7H,KAAK8H,oBAAoB9H,KAAK+H,iBAClDN,MAAMrE,UAAYpD,KAAKiC,QAAQuF,GAC/BC,MAAMO,UAAUC,IAAI,kCAEhBzB,YAAa,MACRb,KAAKuC,YAAYT,aAChBU,QAAUV,MAAMW,YAActD,SAAW9E,KAAKyE,QACpDuC,QAAQ,GAAK9D,KAAKC,IAAI6D,QAAQ,GAAImB,SAClCnB,QAAQ,IAAM9D,KAAKC,IAAIsE,MAAMY,aAAcvD,UAAY9E,KAAKyE,aACvDkB,KAAKE,YAAY4B,gBAI1BA,MAAMa,QAAU,qBAAuBd,EACvCC,MAAME,MAAMrB,KAAQA,KAAOxB,SAAW9E,KAAKyE,QAAW,KACtDgD,MAAME,MAAMpB,IAAMA,IAAM,KACxBkB,MAAME,MAAMY,MAAQ,OACpBd,MAAME,MAAME,MAAQ7H,KAAK8H,oBAAoB9H,KAAK+H,uBAG5CS,QAAU5B,SAAS6B,SAASzI,KAAKkC,UAAUsF,IAC3CkB,KAAO1I,KAAK2I,eAAe3I,KAAKqG,KAAMY,aAAcjH,KAAKD,gBAAiBC,KAAKC,WAAYuI,QAASzE,UAC1G2E,KAAKf,MAAMC,SAAW,WACtBc,KAAKf,MAAMrB,eAAUA,WACrBoC,KAAKf,MAAMpB,cAASA,UACpBmC,KAAKE,GAAK,qBAAuBpB,EAGjCkB,KAAK9C,iBAAiB,SAAS,KACtB8C,KAAKV,UAAUa,SAAS,kBACpBC,aAAatB,EAAGxH,KAAKD,gBAAiBC,KAAKC,YAAY,MAIpEwH,MAAM7B,iBAAiB,SAAS,UACvBkD,aAAatB,EAAGxH,KAAKD,gBAAiBC,KAAKC,YAAY,WAG3D0F,KAAKuC,YAAYQ,WACjB/C,KAAKuC,YAAYT,YAEjBL,YAAYI,GAAKkB,UACjBnB,cAAcC,GAAKlB,KAAOxB,SAAW9E,KAAKyE,aAC1C6C,WAAWE,GAAKC,MAGrBlB,KAAOrD,KAAKC,IAAIsE,MAAMY,aAAcvD,UAAY9E,KAAKyE,eAGlD+B,YAAcQ,QAAUT,IAWnCuC,aAAaxG,MAAOyG,UAAWlB,MAAOmB,gBAC9BhJ,KAAKoH,YAAY9E,OAAO0F,UAAUa,SAAS,mBAK1CzB,YAAYhF,SAAQ,CAACsG,KAAMlB,WACtByB,WAAaP,KAAKV,UAAUa,SAAS,YACvCrB,IAAMlF,OACNoG,KAAKV,UAAUC,IAAI,gBACdiB,SAAWlJ,KAAKkC,UAAUsF,IAE/BkB,KAAKV,UAAUmB,OAAO,gBAGrBC,UAAUV,KAAMO,WAAaF,UAAY,SAAUlB,UAIxD7H,KAAKqJ,UAAYL,qBACZM,iBAIbxF,kBACQyF,QAAU,IAAIC,eACdrD,SAAWnG,KACfuJ,QAAQE,mBAAqB,WACD,IAApBzJ,KAAK0J,YAAoC,MAAhB1J,KAAK2J,QAC9BxD,SAASyD,kBAGjBL,QAAQM,KAAK,OAAQ7J,KAAK8J,KAAK,GAE/BP,QAAQQ,iBAAiB,eAAgB,wBACrCC,KAAOC,KAAKC,UAAU,SACX,oBAAwBlK,KAAKmK,cAAkBnK,KAAKoK,aAAiBpK,KAAKqK,cAC7ErK,KAAKsK,aAAiBtK,KAAK+B,UAEvCwH,QAAQgB,KAAKP,MAYjBQ,cAAcC,KAAMC,UAAWC,aAAcC,eACrCF,UAAW,OAEJ,mEAA0ED,KAAO,aAAiBA,KACrG,2CAFqBjI,IAAjBmI,aAA6B3K,KAAK6K,YAAYF,cAAgB,WAEnB,4DAG5C,eAAkBF,KAAO,aAAiBA,KAC7C,+DAFmBjI,IAAfoI,WAA2B5K,KAAK6K,YAAYD,YAAc,kPAY1EE,2CACUC,eAAiB/K,KAAKgL,QAAQnE,MAAM,SAErC,IAAIW,EAAI,EAAGA,EAAIxH,KAAKkC,UAAUyE,OAAQa,IAAK,OACtCC,MAAQzH,KAAKsH,WAAWE,GACxByD,UAAYjL,KAAKoH,YAAYI,GAAGQ,UAAUa,SAAS,WACnDqC,UAAYH,eAAetC,SAASzI,KAAKkC,UAAUsF,QAGpD0D,YAAcD,yBAKbE,WAAa1D,MAAMW,YAAcpI,KAAKsF,UAC5CmC,MAAME,MAAMrB,eAAU7E,SAASgG,MAAME,MAAMrB,MAAQtG,KAAKsF,gBACxDmC,MAAME,MAAMzB,gBAAWiF,iBAEnBD,YACAzD,MAAMrE,uBAAkBqE,MAAMrE,yBAG5BmD,IAAM9E,SAASzB,KAAKoH,YAAYI,GAAGG,MAAMpB,KAC3BvG,KAAKoL,UAAUpL,KAAK2F,KAAM,uBAC1C3F,KAAKuH,cAAcC,GAAIjB,IAAKvG,KAAKsF,UAAWtF,KAAKsF,WACzClC,UAAYpD,KAAKwK,cAAcxK,KAAKsF,UAAW4F,UAAWlL,KAAKC,WAAYD,KAAKC,aAOpG4D,kBACS7D,KAAKoH,gBAIL,MAAMsB,QAAQ1I,KAAKoH,YACpBsB,KAAKV,UAAUC,IAAI,iBACdmB,UAAUV,KAAM1I,KAAKC,WAAYD,KAAKD,iBAMnD8C,oBAEiCL,IAAzBxC,KAAKqL,iBACLC,aAAatL,KAAKqL,sBAGjBA,gBAAkBzH,YAAW,WACxB2H,IAAM,IAAI/B,eAChB+B,IAAI9B,mBAAqB,UAChB4B,qBAAkB7I,EACA,IAAnB+I,IAAI7B,YAAmC,MAAf6B,IAAI5B,aACvB6B,iBAAiBD,IAAIE,iBAI5B3B,cAAS9J,KAAK8J,kBACpByB,IAAI1B,KAAK,OAAQC,KAAK,SAEhBE,KAAO,IAAI0B,SACjB1B,KAAK2B,IAAI,WAAY3L,KAAK0B,UAC1BsI,KAAK2B,IAAI,OAAQ3L,KAAK4L,MAEtBL,IAAIhB,KAAKP,QACVhK,KAAKL,mBAIZkM,cACyB,KAAjB7L,KAAKqB,SACLyK,OAAOjC,KAAK7J,KAAKqB,QAAS,UAIlC0K,WAAW9K,aACA+K,EAAEC,KAAKC,WAAWjL,KAAM,oBAUnCkL,sBAAsB7F,KAAMC,IAAK6F,KAEdpM,KAAKqM,iBAAiB,MAAO,CACxCC,OAAQtM,KAAKqG,KACbkG,WAAY,eACZC,OAAQ,CACJ5E,SAAU,WACVtB,eAASA,WACTC,cAAQA,UACRL,gBAAUlG,KAAKwE,eACfiI,iBAAWzM,KAAKwE,eAChBkI,OAAQ,aAAe1M,KAAK6K,YAAY,UACxC8B,UAAW,8CACXC,WAAoB,IAARR,IAAYpM,KAAK6K,YAAY7K,KAAKC,YAAcD,KAAK6K,YAAY7K,KAAKG,aAClF0H,MAAe,IAARuE,IAAYpM,KAAK8H,oBAAoB9H,KAAKC,YAAcD,KAAK8H,oBAAoB9H,KAAKG,cAEjG0M,WAAY,CACR1L,MAAe,IAARiL,IAAYpM,KAAKiE,WAAW,YAAcjE,KAAKiE,WAAW,qBACjEF,UAAU,KAIXX,UAAY,SAGb0J,WAAa9M,KAAKqM,iBAAiB,MAAO,CAC5CC,OAAQtM,KAAKqG,KACbkG,WAAY,cACZC,OAAQ,CACJ5E,SAAU,WACVtB,eAASA,WACTC,cAAQA,IAAMvG,KAAKwE,SAAW,QAC9B0B,gBAAUlG,KAAKwE,SAAW,QAC1BiI,iBAAWzM,KAAKwE,SAAW,QAC3BuI,qBAAe/M,KAAKwE,SAAW,QAC/BwI,UAAW,SACXnF,MAAO7H,KAAK8H,oBAAoB9H,KAAKC,aAEzC4M,WAAY,CACR1L,MAAe,IAARiL,IAAYpM,KAAKiE,WAAW,YAAcjE,KAAKiE,WAAW,wBAI7D,IAARmI,SACKa,WAAaH,gBAEbI,YAAcJ,iBAIjBK,UAAYnN,KAAKqM,iBAAiB,MAAO,CAC3CC,OAAQtM,KAAKqG,KACbkG,WAAY,gBACZC,OAAQ,CACJ5E,SAAU,WACVtB,eAASA,WACTC,cAAQA,UACRL,gBAAUlG,KAAKwE,SAAW,QAC1BiI,iBAAWzM,KAAKwE,SAAW,QAC3BwI,UAAW,SACXnF,MAAO7H,KAAK8H,oBAAoB9H,KAAKC,aAEzC4M,WAAY,CACR1L,MAAOnB,KAAKiE,WAAW,uBAInB,IAARmI,SACKgB,eAAiBD,eAEjBE,gBAAkBF,eAGtBG,eAAe,mBAAoBhH,KAAMC,IAAMvG,KAAKwE,SAAWxE,KAAKwE,SAAW,EAChFxE,KAAKwE,SAAW,EAAGxE,KAAKwE,SAAW,EAAG4H,WAGpCmB,aAAevN,KAAKqM,iBAAiB,MAAO,CAC9CC,OAAQtM,KAAKqG,KACbkG,WAAY,gBACZC,OAAQ,CACJ5E,SAAU,WACVtB,eAASA,KAAOtG,KAAKwE,SAAW,QAChC+B,cAAQA,UACRL,gBAAUlG,KAAKwE,SAAW,QAC1BiI,iBAAWzM,KAAKwE,SAAW,QAC3BwI,UAAW,SACXlI,mBAAa9E,KAAKwE,SAAW,QAC7BuI,qBAAe/M,KAAKwE,SAAW,QAC/BqD,MAAOsF,UAAUxF,MAAME,OAE3BgF,WAAY,CACR1L,MAAOnB,KAAKiE,WAAW,yBAInB,IAARmI,WACKoB,gBAAkBD,oBAIrBE,cAAgBzN,KAAKqM,iBAAiB,MAAO,CAC/CC,OAAQtM,KAAKqG,KACbkG,WAAY,iBACZC,OAAQ,CACJ5E,SAAU,WACVtB,eAASA,KAAOtG,KAAKwE,SAAW,QAChC+B,cAAQmH,WAAW1N,KAAKiN,WAAWtF,MAAMpB,WACzCL,gBAAUlG,KAAKwE,SAAW,QAC1BiI,iBAAWzM,KAAKwE,SAAW,QAC3BwI,UAAW,SACXD,qBAAe7J,KAAKqB,MAAMvE,KAAKwE,SAAW,SAC1CmJ,WAAY,OACZ9F,MAAOsF,UAAUxF,MAAME,OAE3BgF,WAAY,CACR1L,MAAOnB,KAAKiE,WAAW,iBAInB,IAARmI,WACKwB,YAAcH,eAc3BtI,iBAAiBmB,KAAMC,IAAKL,MAAOM,YAAa1B,UAC5CoB,OAAS,EAAIlG,KAAKyE,cAEZoJ,cAAgB3M,SAASwG,cAAc,UAC7CmG,cAAclG,MAAMC,SAAW,WAC/BiG,cAAclG,MAAMzB,gBAAWA,YAC/B2H,cAAclG,MAAM7C,mBAAcA,eAClC+I,cAAczK,UAAYpD,KAAK0C,WAE3B8D,YAAa,MACRH,KAAK6B,YAAY2F,qBAChBpD,KAAO,CAACoD,cAAczF,YAAayF,cAAcxF,0BAClDhC,KAAKR,YAAYgI,eACfpD,KAIXoD,cAAclG,MAAMiF,WAAa5M,KAAK6K,YAAY7K,KAAKD,iBACvD8N,cAAclG,MAAME,MAAQ7H,KAAK8H,oBAAoB9H,KAAKD,iBAC1D8N,cAAclG,MAAMrB,eAAUA,WAC9BuH,cAAclG,MAAMpB,cAASA,UAC7BsH,cAAclG,MAAMmG,sBAAiB9N,KAAKyE,cAC1CoJ,cAAclG,MAAMoG,uBAAkB/N,KAAKyE,mBAEtCkB,KAAKuC,YAAY2F,qBAEhBpB,OAASoB,cAAcxF,aAAerI,KAAKyE,eACjDoJ,cAAclG,MAAM8E,iBAAYA,kBAE3BuB,iBAAmBvB,YACnBwB,cAAgBJ,cAEd,CAACA,cAAczF,YAAayF,cAAcxF,cAcrDnE,oBAAUgK,SAACA,SAADC,cAAWA,cAAXC,iBAA0BA,iBAA1BC,KAA4CA,KAA5CC,SAAkDA,SAAlDC,SAA4DA,qBAE5DC,eAAyBhM,IAAb8L,sBAA+BA,iBAAiB,GAC9DtO,KAAKiN,WAAW7J,YAAcoL,iBACzBvB,WAAW7J,UAAYoL,eACvBC,eAAezO,KAAKiN,WAAYjN,KAAKwE,SAAW,EAAIxE,KAAKyE,QAASzE,KAAKwE,SAAW,GAAG,EAAO,EAAG,EAAG,IAIvGxE,KAAKoN,eAAehK,YAAciL,YAC7BjB,eAAehK,UAAYiL,MAAQ,QACnCI,eAAezO,KAAKoN,eAAgBpN,KAAKwE,SAAUxE,KAAKwE,SAAW,GAAG,EAAM,EAAG,EAAG,SAI1EhC,IAAb+L,WACArN,SAASC,gBAAWoN,qBAAYtN,MAAQ,WAItCyN,kBAA4BlM,IAAb0L,SAAyBA,SAAW,GACrDlO,KAAK2O,cAAcvL,YAAcsL,oBAC5BC,cAAcvL,UAAYsL,kBAC1BD,eAAezO,KAAK2O,cAAe3O,KAAKwE,SAAW,EAAIxE,KAAKyE,QAASzE,KAAKwE,SAAW,GAAG,EAAO,EAAG,EAAG,IAI1GxE,KAAKwN,gBAAgBpK,YAAc+K,qBAC9BX,gBAAgBpK,UAAY+K,eAAiB,QAC7CM,eAAezO,KAAKwN,gBAAiB,GAAMxN,KAAKwE,SAAW,EAAGxE,KAAKwE,SAAW,GAAG,EAAM,EAAG,EAAG,UAIhGoK,oBAAsCpM,IAArB4L,2BAAoClL,KAAKqB,MAAM,IAAM6J,uBAAuB,GAC/FpO,KAAK4N,YAAYxK,YAAcwL,sBAC1BhB,YAAYxK,UAAYwL,oBACxBH,eAAezO,KAAK4N,YAAa,GAAM5N,KAAKwE,SAAW,EAAGxE,KAAKwE,SAAW,GAAG,EAAM,EAAG,EAAG,IAOtG8E,qBAE8B9G,IAAtBxC,KAAK2D,cACL2H,aAAatL,KAAK2D,mBAGjBA,kBAAenB,EAEpBqM,QAAQ,CAAC,cAAeC,aACdC,OAAS,CACX5E,UAAWnK,KAAKmK,UAChBE,SAAUrK,KAAKqK,SACfC,KAAMtK,KAAKsK,KACXvI,QAAS/B,KAAK+B,QACdM,OAAQrC,KAAKqC,QAAU,KACvB6G,SAAUlJ,KAAKkJ,UAAY,KAC3B8F,WAAY,IAGhBF,KAAKG,KAAK,CAAC,CACPC,WAAY,8BACZC,KAAMJ,UACN,GAAGK,MAAM3D,gBACJ4D,iBAAiBpF,KAAKqF,MAAM7D,cAClC8D,MAAMC,aACAC,UAAUD"}