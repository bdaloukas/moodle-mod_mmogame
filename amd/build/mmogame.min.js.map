{"version":3,"file":"mmogame.min.js","sources":["../src/mmogame.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine([''], function() {\n    return class MmoGame {\n        // Define default properties with appropriate types\n        state; // State of the game\n        body;\n        minFontSize;\n        maxFontSize;\n        fontSize;\n        iconSize;\n        padding;\n        cIcons;\n\n        // Colors\n        colorBackground;\n\n        // Timer variables\n        timestart = 0;\n        timeclose = 0;\n\n        /**\n         * Initialize game properties and compute initial sizes.\n         *\n         * @module mmogame\n         * @copyright 2024 Vasilis Daloukas\n         * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n         */\n        constructor() {\n            // Initialize default properties.\n            this.state = 0;\n            this.minFontSize = 1;\n            this.maxFontSize = 0;\n            this.fontSize = 0;\n            this.iconSize = 0;\n            this.padding = 0;\n            this.body = document.getElementsByTagName(\"body\")[0];\n            this.setColorsString();\n\n            // Compute and set font size properties.\n            const size = parseFloat(getComputedStyle(document.documentElement).fontSize);\n            this.minFontSize = size;\n            this.maxFontSize = 2 * size;\n            this.fontSize = size;\n        }\n\n        // UI element creation methods\n        /**\n         * Creates a DOM element with specified attributes and styles.\n         * @param {string} tag - The HTML tag to create (e.g., 'div', 'img').\n         * @param {Object} options - Configuration for the element.\n         * @param {HTMLElement} options.parent - Parent element where the new element will be appended.\n         * @param {string} [options.classnames] - Space-separated string of CSS class names.\n         * @param {Object} [options.styles] - Inline styles for the element.\n         * @param {Object} [options.attributes] - Attributes for the element (e.g., src, alt, role).\n         * @returns {HTMLElement} - The created DOM element.\n         */\n        createDOMElement(tag, {parent, classnames = '', styles = {}, attributes = {}} = {}) {\n            const element = document.createElement(tag);\n\n            // Apply classes\n            if (classnames) {\n                element.classList.add(...classnames.split(/\\s+/));\n            }\n\n            // Apply styles\n            Object.assign(element.style, styles);\n\n            // Apply attributes\n            Object.entries(attributes).forEach(([key, value]) => {\n                if (value !== undefined && value !== null) {\n                    element.setAttribute(key, value);\n                }\n            });\n\n            // Append to parent\n            if (parent) {\n                parent.appendChild(element);\n            }\n\n            return element;\n        }\n\n        /**\n         * Creates a <div> element.\n         *\n         * @param {HTMLElement} parent - The parent element.\n         * @param {string} classnames - Horizontal position in pixels.\n         * @param {number} left - Horizontal position in pixels.\n         * @param {number} top - Vertical position in pixels.\n         * @param {number} width - Width of the <div>.\n         * @param {number} height - Height of the <div>.\n         * @returns {HTMLElement} - The created <div> element.\n         */\n        createDiv(parent, classnames, left, top, width, height) {\n            return this.createDOMElement('div', {\n                parent,\n                classnames,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${width}px`,\n                    height: `${height}px`,\n                },\n            });\n        }\n\n        /**\n         * Creates an <img> element.\n         *\n         * @param {HTMLElement} parent - The parent element.\n         * @param {string} classnames - List of classes separated by space.\n         * @param {number} left - Horizontal position in pixels.\n         * @param {number} top - Vertical position in pixels.\n         * @param {number} width - Width of the <img> element.\n         * @param {number} height - Height of the <img> element.\n         * @param {string} filename - The source file for the image.\n         * @returns {HTMLElement} - The created <img> element.\n         */\n        createImage(parent, classnames, left, top, width, height, filename) {\n            const styles = {\n                position: 'absolute',\n                left: `${left}px`,\n                top: `${top}px`,\n            };\n\n            // Only add width to styles if it's not 0\n            if (width !== 0) {\n                styles.width = `${width}px`;\n            }\n\n            // Only add height to styles if it's not 0\n            if (height !== 0) {\n                styles.height = `${height}px`;\n            }\n\n            const attributes = {draggable: false};\n            if (filename !== '') {\n                attributes.src = filename;\n            }\n\n            return this.createDOMElement('img', {\n                parent,\n                classnames,\n                styles,\n                attributes,\n            });\n        }\n\n        // For check\n        createButton(parent, classnames, left, top, width, height, src, alt, role = 'button') {\n            return this.createDOMElement('img', {\n                parent,\n                classnames,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${width}px`,\n                    height: `${height}px`,\n                },\n                attributes: {src, alt, role},\n            });\n        }\n\n        // Game logic and utility methods\n\n        /**\n         * Compute sizes for icons and padding based on the screen dimensions.\n         */\n        computeSizes() {\n            const cIcons = Math.max(this.cIcons || 5, 5);\n            const maxIconWidth = window.innerWidth / cIcons;\n            const maxIconHeight = window.innerHeight / 5;\n            this.iconSize = Math.min(maxIconWidth, maxIconHeight);\n            const adjustment = this.iconSize / 10 / cIcons;\n            this.iconSize = Math.round(this.iconSize - adjustment);\n            this.padding = Math.round(this.iconSize / 10);\n            this.iconSize -= this.padding;\n        }\n\n        /**\n         * Creates a centered image button with automatic scaling.\n         * @param {HTMLElement} parent - The parent element where the button will be appended.\n         * @param {number} left - The left position of the container in pixels.\n         * @param {number} top - The top position of the container in pixels.\n         * @param {number} width - The width of the container in pixels.\n         * @param {number} height - The height of the container in pixels.\n         * @param {string} classname - Additional CSS classes to apply to the button.\n         * @param {string} filename - The source URL of the image.\n         * @returns {HTMLElement} - The created image button element.\n         */\n        createCenterImageButton(parent, left, top, width, height, classname, filename) {\n            const button = this.createDOMElement('img', {\n                parent,\n                classnames: `mmogame_imgbutton ${classname}`,\n                styles: {\n                    position: 'absolute',\n                    draggable: false,\n                },\n            });\n\n            const img = new Image();\n            img.onload = function() {\n                if (this.width > 0 && this.height > 0) {\n                    const mul = Math.min(width / this.width, height / this.height);\n                    const w = Math.round(this.width * mul);\n                    const h = Math.round(this.height * mul);\n\n                    Object.assign(button.style, {\n                        width: `${w}px`,\n                        height: `${h}px`,\n                        left: `${left + width / 2 - w / 2}px`,\n                        top: `${top + height / 2 - h / 2}px`,\n                    });\n\n                    button.src = filename;\n                }\n            };\n            img.src = filename;\n\n            return button;\n        }\n\n        /**\n         * Clear all children of the <body> element.\n         */\n        clearBodyChildren() {\n            this.removeDivMessage();\n            let child;\n            while ((child = this.body.firstChild)) {\n                this.body.removeChild(child);\n            }\n        }\n\n        /**\n         * Opens the game by resetting the body and computing sizes.\n         */\n        openGame() {\n            this.clearBodyChildren();\n            this.computeSizes();\n        }\n\n        autoResizeText(item, width, height, wrap, minFontSize, maxFontSize) {\n            const text = item.innerHTML.toString();\n            if (text.length === 0) {\n                return;\n            }\n\n            const tempDiv = document.createElement(\"div\");\n            tempDiv.style.visibility = \"hidden\";\n            tempDiv.style.position = \"absolute\";\n            tempDiv.style.whiteSpace = wrap ? \"normal\" : \"nowrap\";\n\n            this.body.appendChild(tempDiv);\n\n            let low = Math.max(1, minFontSize);\n            let up = maxFontSize || Math.min(width, height);\n\n            let fitSize = low;\n            let fitHeight = 0;\n            let newHeight = 0;\n            let newWidth = 0;\n\n            let step = 1;\n            let fontSize;\n            for (; step <= 10; step++) {\n                fontSize = (low + up) / 2;\n                tempDiv.style.fontSize = `${fontSize}px`;\n                tempDiv.style.width = `${width}px`;\n                tempDiv.style.height = `0`;\n                tempDiv.innerHTML = text;\n\n                newHeight = tempDiv.scrollHeight;\n                newWidth = tempDiv.scrollWidth - 1;\n                if (newWidth > width || newHeight > height) {\n                    up = fontSize;\n                } else {\n                    low = fontSize;\n                    if (Math.abs(fitHeight - newHeight) <= 2) {\n                        break;\n                    }\n                    fitSize = fontSize;\n                    fitHeight = newHeight;\n                }\n            }\n            item.style.fontSize = `${fitSize}px`;\n            this.body.removeChild(tempDiv);\n        }\n\n        /**\n         * Returns the hex color string for a given color code.\n         *\n         * @param {Number} colorCode - The color code.\n         * @returns {string} Hexadecimal representation of the color.\n         */\n        getColorHex(colorCode) {\n            return `#${colorCode.toString(16).padStart(6, '0').toUpperCase()}`;\n        }\n\n        /**\n         * Calculates contrast value for a given color.\n         *\n         * @param {Number} colorCode - The color code.\n         * @returns {Number} Contrast value.\n         */\n        getContrast(colorCode) {\n            // eslint-disable-next-line no-bitwise\n            const r = (colorCode >> 16) & 0xff;\n            // eslint-disable-next-line no-bitwise\n            const g = (colorCode >> 8) & 0xff;\n            // eslint-disable-next-line no-bitwise\n            const b = colorCode & 0xff;\n            return (r * 299 + g * 587 + b * 114) / 1000;\n        }\n\n        /**\n         * Returns a contrasting color (black or white) based on brightness.\n         * @param {Number} colorCode - The color code.\n         * @returns {string} \"#000000\" or \"#FFFFFF\".\n         */\n        getContrastingColor(colorCode) {\n            // eslint-disable-next-line no-bitwise\n            const r = (colorCode >> 16) & 0xff;\n            // eslint-disable-next-line no-bitwise\n            const g = (colorCode >> 8) & 0xff;\n            // eslint-disable-next-line no-bitwise\n            const b = colorCode & 0xff;\n            const brightness = (r * 299 + g * 587 + b * 114) / 1000;\n            return brightness >= 128 ? \"#000000\" : \"#FFFFFF\";\n        }\n\n        /**\n         * Repairs <p> tags in a string by cleaning up unnecessary tags.\n         * @param {string} text - The input string with potential <p> tags.\n         * @returns {string} The cleaned-up string.\n         */\n        repairP(text) {\n            if (!text) {\n                return '';\n            }\n            return text.replace(/<p[^>]*>/g, '').replace(/<\\/p>/g, '<br>').trim();\n        }\n\n        /**\n         * Finds the best value based on a condition.\n         * @param {number} low - The lower bound.\n         * @param {number} high - The upper bound.\n         * @param {function} condition - A condition to evaluate.\n         */\n        findbest(low, high, condition) {\n            while (high - low > 1) {\n                const mid = Math.floor((low + high) / 2);\n                if (condition(mid) < 0) {\n                    low = mid;\n                } else {\n                    high = mid;\n                }\n            }\n\n            return low;\n        }\n\n        disableButtons(buttons, disabled) {\n            for (let i = 0; i < buttons.length; i++) {\n                let btn = buttons[i];\n                if (btn !== undefined) {\n                    if (disabled) {\n                        btn.classList.add(\"mmogame_imgbutton_disabled\");\n                    } else {\n                        btn.classList.remove(\"mmogame_imgbutton_disabled\");\n                    }\n                }\n            }\n        }\n\n        repairNickname(nickname) {\n            if (nickname === undefined) {\n                return '';\n            }\n\n            let s = nickname;\n            if (s !== '') {\n                while (s.indexOf('_') !== -1) {\n                    s = s.replace('_', ' ');\n                }\n            }\n\n            return s;\n        }\n\n        showColorPalette(canvas, colors) {\n            let ctx = canvas.getContext(\"2d\");\n            let width = canvas.width;\n            let height = canvas.height;\n            let strip = width / 5;\n\n            // Sort colors based on their contrast value using an arrow function\n            colors.sort((a, b) => this.getContrast(a) - this.getContrast(b));\n\n            for (let i = 0; i < 5; i++) {\n                ctx.fillStyle = this.getColorHex(colors[i]);\n                ctx.fillRect(i * strip, 0, (i + 1) * strip, height);\n            }\n\n            ctx.strokeStyle = \"#FFFFFF\";\n            ctx.lineWidth = 1;\n            ctx.strokeRect(0, 0, width, height);\n        }\n\n        setColorsString(s) {\n            let colors = [0x9B7ED9, 0x79F2F2, 0x67BF5A, 0xD0F252, 0xBF5B21];\n            if (s !== undefined && s.length >= 0) {\n                let b = s.split(\",\");\n                if (b.length === 5) {\n                    colors = [];\n                    for (let i = 0; i < 5; i++) {\n                        colors[i] = parseInt(b[i]);\n                    }\n                }\n            }\n\n            this.setColors(this.sortColors(colors));\n        }\n\n        sortColors(colors) {\n            return colors.sort((a, b) => this.getContrast(a) - this.getContrast(b));\n        }\n\n        computeDifClock(time) {\n            if (time !== undefined) {\n                this.difClock = ((new Date()).getTime() - time) / 1000;\n            }\n        }\n\n        computeTimeStartClose(timeStart, timeClose) {\n            if (timeStart !== undefined) {\n                this.timestart = parseInt(timeStart) !== 0 ? parseInt(timeStart) + this.difClock : 0;\n                this.timeclose = parseInt(timeClose) !== 0 ? parseInt(timeClose) + this.difClock : 0;\n            } else {\n                this.timestart = 0;\n                this.timeclose = 0;\n            }\n        }\n\n        drawRadio(canvas, color1, color2) {\n            let ctx = canvas.getContext(\"2d\");\n\n            // Ensure the canvas dimensions match its displayed size\n            canvas.width = canvas.offsetWidth;\n            canvas.height = canvas.offsetHeight;\n\n            let size = canvas.width;\n            let height = canvas.height;\n\n            // Clear previous drawing\n            ctx.clearRect(0, 0, size, height);\n\n            // Draw outer circle\n            ctx.beginPath();\n            ctx.arc(size / 2, height / 2, Math.min(size, height) / 2, 0, 2 * Math.PI, false);\n\n            ctx.fillStyle = this.getColorHex(color1);\n            ctx.fill();\n\n            // Draw inner circle if checked\n            let checked = canvas.classList.contains(\"checked\");\n            if (checked) {\n                ctx.beginPath();\n                ctx.arc(size / 2, height / 2, Math.min(size, height) / 4, 0, 2 * Math.PI, false);\n                ctx.fillStyle = this.getColorHex(color2);\n                ctx.fill();\n            }\n        }\n\n\n        createRadiobox(parent, size, color1, color2, checked, disabled) {\n            let canvas = document.createElement('canvas');\n            canvas.style.position = \"absolute\";\n            canvas.width = size;\n            canvas.height = size;\n            parent.appendChild(canvas);\n            if (checked) {\n                canvas.classList.add(\"checked\");\n            }\n            if (disabled) {\n                canvas.classList.add(\"disabled\");\n            }\n\n            if (size > 0) {\n                this.drawRadio(canvas, disabled ? color1 : 0xFFFFFF, color2);\n            }\n\n            return canvas;\n        }\n\n        createImageButton(parent, classnames, left, top, width, height, filename) {\n            const imgButton = this.createImage(parent, classnames, left, top, width, height, filename);\n            imgButton.style.cursor = 'pointer';\n            return imgButton;\n        }\n\n        createDivColor(parent, classnames, left, top, width, height, color) {\n            const colorDiv = this.createDiv(parent, classnames, left, top, width, height);\n            colorDiv.style.backgroundColor = color;\n            colorDiv.style.border = '1px solid #000';\n            return colorDiv;\n        }\n\n        /**\n         * Retrieves localized strings.\n         * @param {string} name - The name of the string.\n         * @returns {string} The localized string.\n         */\n        getStringM(name) {\n            return M.util.get_string(name, 'mmogame');\n        }\n\n        /**\n         * Retrieves user options from IndexedDB.\n         * @param {string}name\n         * @returns {Promise<Object>} A promise that resolves with the options.\n         */\n        async getOption(name) {\n            if (typeof name !== \"string\" || !name.trim()) {\n                throw new Error(\"name must be a non-empty string\");\n            }\n\n            return new Promise((resolve, reject) => {\n                const request = indexedDB.open('mmoGameDB', 1);\n\n                request.onupgradeneeded = function(event) {\n                    const db = event.target.result;\n                    // Create the \"options\" object store if it doesn't exist\n                    if (!db.objectStoreNames.contains('options')) {\n                        db.createObjectStore('options', {keyPath: 'name'});\n                    }\n                };\n\n                request.onsuccess = function(event) {\n                    const db = event.target.result;\n                    const transaction = db.transaction(['options'], 'readonly');\n                    const store = transaction.objectStore('options');\n\n                    const getRequest = store.get(name);\n                    getRequest.onsuccess = function(event) {\n                        resolve(event.target.result || null); // Return the full object or null if not found\n                    };\n                    getRequest.onerror = function() {\n                        reject(new Error(`Failed to retrieve option: ${name}`));\n                    };\n                };\n\n                request.onerror = function() {\n                    reject(new Error('Failed to open database'));\n                };\n            });\n        }\n\n        /**\n         * Saves user options to IndexedDB.\n         * @param {string}name\n         * @param {object}data\n         * @returns {Promise<void>} A promise that resolves when the save is complete.\n         */\n        async setOption(name, data) {\n            if (typeof name !== \"string\" || !name.trim()) {\n                throw new Error(\"name must be a non-empty string\");\n            }\n            if (typeof data !== \"object\" || data === null) {\n                throw new Error(\"data must be a non-null object\");\n            }\n\n            return new Promise((resolve, reject) => {\n                const request = indexedDB.open('mmoGameDB', 1);\n\n                request.onupgradeneeded = function(event) {\n                    const db = event.target.result;\n                    // Create the \"options\" object store if it doesn't exist\n                    if (!db.objectStoreNames.contains('options')) {\n                        db.createObjectStore('options', {keyPath: 'name'});\n                    }\n                };\n\n                request.onsuccess = function(event) {\n                    const db = event.target.result;\n                    const transaction = db.transaction(['options'], 'readwrite');\n                    const store = transaction.objectStore('options');\n\n                    // Ensure the object contains the correct key\n                    const record = {name, ...data};\n\n                    const putRequest = store.put(record);\n                    putRequest.onsuccess = function() {\n                        resolve(true);\n                    };\n                    putRequest.onerror = function() {\n                        reject(new Error(`Failed to save option: ${name}`));\n                    };\n                };\n\n                request.onerror = function() {\n                    reject(new Error('Failed to open database'));\n                };\n            });\n        }\n\n        debounce(func, delay) {\n            let timer;\n            return function(...args) {\n                clearTimeout(timer);\n                timer = setTimeout(() => func.apply(this, args), delay);\n            };\n        }\n\n        /**\n         * Displays an error message on the screen.\n         * @param {string} name - The name of the error context.\n         * @param {Error} [error] - The error object to display.\n         */\n        showError(name, error) {\n            return name + error;\n        }\n\n        setColors(colors) {\n            this.colorBackground = colors[0];\n            this.colorBackground2 = colors[1];\n            this.body.style.backgroundColor = this.getColorHex(this.colorBackground);\n        }\n\n        /**\n         * Creates the main game area.\n         */\n\n        createArea(top, bottomSpace) {\n            if (this.area !== undefined) {\n                this.body.removeChild(this.area);\n            }\n            this.area = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: 'mmogame-area',\n                styles: {\n                    position: 'absolute',\n                    left: `${this.padding}px`,\n                    top: `${top}px`,\n                    right: `${this.padding}px`,\n                    bottom: `${this.padding + bottomSpace}px`,\n                    overflow: 'hidden',\n                }\n            });\n\n            this.areaRect = {\n                left: this.padding,\n                top: top,\n                width: this.area.offsetWidth,\n                height: this.area.offsetHeight,\n                bottom: bottomSpace,\n            };\n        }\n\n    };\n});"],"names":["define","state","body","minFontSize","maxFontSize","fontSize","iconSize","padding","cIcons","colorBackground","timestart","timeclose","constructor","document","getElementsByTagName","setColorsString","size","parseFloat","getComputedStyle","documentElement","createDOMElement","tag","parent","classnames","styles","attributes","element","createElement","classList","add","split","Object","assign","style","entries","forEach","_ref","key","value","setAttribute","appendChild","createDiv","left","top","width","height","this","position","createImage","filename","draggable","src","createButton","alt","role","computeSizes","Math","max","maxIconWidth","window","innerWidth","maxIconHeight","innerHeight","min","adjustment","round","createCenterImageButton","classname","button","img","Image","onload","mul","w","h","clearBodyChildren","child","removeDivMessage","firstChild","removeChild","openGame","autoResizeText","item","wrap","text","innerHTML","toString","length","tempDiv","visibility","whiteSpace","low","up","fitSize","fitHeight","newHeight","newWidth","step","scrollHeight","scrollWidth","abs","getColorHex","colorCode","padStart","toUpperCase","getContrast","getContrastingColor","repairP","replace","trim","findbest","high","condition","mid","floor","disableButtons","buttons","disabled","i","btn","undefined","remove","repairNickname","nickname","s","indexOf","showColorPalette","canvas","colors","ctx","getContext","strip","sort","a","b","fillStyle","fillRect","strokeStyle","lineWidth","strokeRect","parseInt","setColors","sortColors","computeDifClock","time","difClock","Date","getTime","computeTimeStartClose","timeStart","timeClose","drawRadio","color1","color2","offsetWidth","offsetHeight","clearRect","beginPath","arc","PI","fill","contains","createRadiobox","checked","createImageButton","imgButton","cursor","createDivColor","color","colorDiv","backgroundColor","border","getStringM","name","M","util","get_string","Error","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","db","target","result","objectStoreNames","createObjectStore","keyPath","onsuccess","getRequest","transaction","objectStore","get","onerror","data","store","record","putRequest","put","debounce","func","delay","timer","args","clearTimeout","setTimeout","apply","showError","error","colorBackground2","createArea","bottomSpace","area","right","bottom","overflow","areaRect"],"mappings":"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"}