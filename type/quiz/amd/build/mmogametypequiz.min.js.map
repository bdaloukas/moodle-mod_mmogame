{"version":3,"file":"mmogametypequiz.min.js","sources":["../src/mmogametypequiz.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mod_mmogame/mmogameui'], function(MmoGameUI) {\n    return class MmoGameTypeQuiz extends MmoGameUI {\n        kinduser;\n        user;\n        url;\n        pin;\n        labelTimer;\n        timeForSendFastJson = 3000;\n        timefastjson;\n        type;\n\n        // Colors.\n        colorScore;\n        colorScore2;\n\n        /**\n         * Base class for Quiz mmmogame\n         *\n         * @module mmogametype_quiz\n         * @copyright 2024 Vasilis Daloukas\n         * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n         */\n\n        constructor(type) {\n            super();\n            this.type = type;\n        }\n\n        /**\n         * Initializes the game by loading required audio assets.\n         */\n        openGame() {\n            super.openGame(); // Call the parent class method\n\n            // Optimized Audio Loading\n            this.audioYes = new Audio('assets/yes1.mp3');\n            this.audioYes.load();\n            this.audioNo = new Audio('assets/no1.mp3');\n            this.audioNo.load();\n        }\n\n        /**\n         * Creates a vertical layout for the quiz screen.\n         *\n         * @param {number}left\n         * @param {number}top\n         * @param {number}width\n         * @param {boolean}onlyMetrics\n         * @param {number}fontSize\n         * @param {boolean} disabled - Whether user input should be disabled.\n         */\n        createAnswer(left, top, width, onlyMetrics, fontSize, disabled) {\n            return this.createAnswerMultichoice(left, top, width, onlyMetrics, fontSize, disabled);\n        }\n\n        /**\n         * Creates multiple-choice answer options.\n         *\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} width - The maximum width available for answers.\n         * @param {boolean} onlyMetrics - Whether to only calculate size metrics.\n         * @param {number} fontSize - The font size for answer text.\n         * @param {boolean} disabled - Whether the answers are disabled.\n         * @returns {number} The total height used by the answer options.\n         */\n        createAnswerMultichoice(left, top, width, onlyMetrics, fontSize, disabled) {\n            const n = this.answers ? this.answers.length : 0;\n            const aChecked = this.answer;\n            const fragment = document.createDocumentFragment(); // âœ… Batch DOM updates\n\n            const retSize = [0, 0];\n            const checkboxSize = Math.round(fontSize);\n            this.aItemAnswer = Array(n);\n            this.aItemLabel = Array(n);\n            this.aItemCorrectX = new Array(n);\n\n            // Iterate over each answer\n            for (let i = 0; i < n; i++) {\n                const label = this.createDOMElement('label', {\n                    parent: null,\n                    classnames: 'mmogame-quiz-label' + i,\n                    styles: {\n                        position: 'absolute',\n                        width: `${width - fontSize - this.padding}px`,\n                        fontSize: `${fontSize}px`,\n                        color: this.getContrastingColor(this.colorBackground),\n                    }\n                });\n                label.innerHTML = this.answers[i];\n\n                if (onlyMetrics) {\n                    this.area.appendChild(label);\n                    const newSize = label.scrollWidth + fontSize + this.padding;\n                    retSize[0] = Math.max(retSize[0], newSize);\n                    retSize[1] += Math.max(label.scrollHeight, fontSize) + this.padding;\n                    this.area.removeChild(label);\n                    continue;\n                }\n\n                label.htmlFor = \"mmogame_quiz_input\" + i;\n                label.style.left = `${left + fontSize + this.padding}px`;\n                label.style.top = `${top}px`;\n                label.style.align = \"left\";\n                label.style.color = this.getContrastingColor(this.colorBackground);\n\n                // Create the checkbox\n                const checked = aChecked !== undefined && aChecked !== null && aChecked.includes(this.answersID[i]);\n                const item = this.createRadiobox(this.body, checkboxSize, this.colorBackground2, this.colorScore,\n                    checked, disabled);\n                item.style.position = \"absolute\";\n                item.style.left = `${left}px`;\n                item.style.top = `${top}px`;\n                item.id = \"mmogame_quiz_input\" + i;\n\n                // Event listeners for interactions\n                item.addEventListener('click', () => {\n                    if (!item.classList.contains(\"disabled\")) {\n                        this.onClickRadio(i, this.colorBackground2, this.colorScore);\n                    }\n                });\n\n                label.addEventListener('click', () => {\n                    this.onClickRadio(i, this.colorBackground2, this.colorScore);\n                });\n\n                fragment.appendChild(item);\n                this.area.appendChild(label);\n\n                const heightLabel = label.scrollHeight;\n                if (heightLabel > fontSize) {\n                    item.style.top = Math.round(top + (heightLabel - fontSize) / 2) + \"px\";\n                }\n\n                this.aItemAnswer[i] = item;\n                this.aItemCorrectX[i] = left + fontSize + this.padding;\n                this.aItemLabel[i] = label;\n\n                // Adjust positioning\n                top += Math.max(label.scrollHeight, fontSize) + this.padding;\n            }\n\n            this.area.appendChild(fragment); // Batch insert into DOM\n\n            return onlyMetrics ? retSize : top;\n        }\n\n        /**\n         * Handles radio button click events for answers.\n         *\n         * @param {number} index - The index of the clicked radio button.\n         * @param {string} colorBack - The background color for the radio button.\n         * @param {string} color - The color for the radio button when selected.\n         */\n        onClickRadio(index, colorBack, color) {\n            if (this.aItemAnswer[index].classList.contains(\"disabled\")) {\n                return;\n            }\n\n            // Update the selected radio button and deselect others\n            this.aItemAnswer.forEach((item, i) => {\n                const isDisabled = item.classList.contains(\"disabled\");\n                if (i === index) {\n                    item.classList.add(\"checked\");\n                    this.answerid = this.answersID[i];\n                } else {\n                    item.classList.remove(\"checked\");\n                }\n\n                this.drawRadio(item, isDisabled ? colorBack : 0xFFFFFF, color);\n            });\n\n            // Send the answer\n            this.callSetAnswer();\n        }\n\n        /**\n         * Generates an SVG for a correct or incorrect icon.\n         *\n         * @param {number} size - The size of the SVG.\n         * @param {boolean} iscorrect - Whether the answer is correct.\n         * @param {int} colorCorrect - Color for correct answers.\n         * @param {int} colorError - Color for incorrect answers.\n         * @returns {string} The SVG markup as a string.\n         */\n        getSVGcorrect(size, iscorrect, colorCorrect, colorError) {\n            if (iscorrect) {\n                let c = colorCorrect !== undefined ? this.getColorHex(colorCorrect) : '#398439';\n                return \"<svg aria-hidden=\\\"true\\\" class=\\\"svg-icon iconCheckmarkLg\\\" width=\\\"\" + size + \"\\\" height=\\\"\" + size +\n                    \"\\\" viewBox=\\\"0 0 36 36\\\"><path fill=\\\"\" + c + \"\\\" d=\\\"m6 14 8 8L30 6v8L14 30l-8-8v-8z\\\"></path></svg>\";\n            } else {\n                let c = colorError !== undefined ? this.getColorHex(colorError) : '#398439';\n                return \"<svg width=\\\"\" + size + \"\\\" height=\\\"\" + size +\n                    \"\\\" class=\\\"bi bi-x-lg\\\" viewBox=\\\"0 0 18 18\\\"> <path fill=\\\"\" + c +\n                    `\" d=\"M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 \n                1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z\"/></svg>`;\n            }\n        }\n\n        /**\n         * Disables all answer inputs to prevent further interaction.\n         */\n        disableInput() {\n            if (!this.aItemAnswer) {\n                return;\n            }\n\n            this.aItemAnswer.forEach(item => {\n                item.classList.add(\"disabled\");\n                item.setAttribute(\"disabled\", \"true\"); // Ensuring proper disabling\n                this.drawRadio(item, this.colorScore, this.colorBackground2); // Update styling\n            });\n        }\n        /**\n         * Sends periodic fast JSON updates to the server.\n         */\n        /**\n         * Improved AJAX request using Fetch API instead of XMLHttpRequest\n         */\n        async sendFastJSON() {\n            // Clear any existing timeout before setting a new one\n            if (this.timeoutFastJSON !== undefined) {\n                clearTimeout(this.timeoutFastJSON);\n            }\n\n            this.timeoutFastJSON = setTimeout(async() => {\n                try {\n                    // Create URL-encoded form data\n                    const formData = new URLSearchParams();\n                    formData.append(\"fastjson\", this.fastjson.toString());\n                    formData.append(\"type\", this.type);\nconsole.log(\"this.url=\", this.url, this);\n                    // Send POST request with application/x-www-form-urlencoded format\n                    const response = await fetch(`${this.url}/state.php`, {\n                        method: 'POST',\n                        headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n                        body: formData.toString(),\n                    });\n\n                    // Check if the response is successful\n                    if (!response.ok) {\n                        throw new Error(`Server responded with status ${response.status}`);\n                    }\n\n                    // Read server response\n                    const data = await response.text();\n                    await this.processFastJson(data);\n                } catch (error) {\n                    this.showError('Error sending Fast JSON:', error);\n                }\n            }, this.timeForSendFastJson);\n        }\n\n\n        getStringT(name) {\n            return M.util.get_string(name, 'mmogametype_quiz');\n        }\n\n        /**\n         * Creates a percentage-based score display using createDOMElement.\n         *\n         * @param {any} parent\n         * @param {string} prefixclassname\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {boolean} createAddScore\n         * @param {number} colorBackground\n         * */\n        createDivScorePercent(parent, prefixclassname, left, top,\n                              createAddScore, colorBackground) {\n            const colorText = this.getContrastingColor(colorBackground);\n            // Create the main button container\n            const divMain = this.createDOMElement('div', {\n                parent: parent,\n                classnames: `${prefixclassname}-main`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                    border: \"0px solid \" + this.getColorHex(colorBackground),\n                    boxShadow: \"inset 0 0 0.125em rgba(255, 255, 255, 0.75)\",\n                    background: this.getColorHex(colorBackground),\n                    color: colorText,\n                    borderRadius: createAddScore ? `${this.iconSize / 10}px` : `${this.iconSize}px`,\n                },\n                attributes: {\n                    disabled: true,\n                    innerHTML: '',\n                },\n            });\n\n            const cellSize = Math.round(this.iconSize / 2);\n\n            let lblAddScore;\n            if (createAddScore) {\n                // Create the additional score label (line3)\n                lblAddScore = this.createDOMElement('div', {\n                    parent: parent,\n                    classnames: `${prefixclassname}-addscore`,\n                    styles: {\n                        position: 'absolute',\n                        left: `${left}px`,\n                        width: `${cellSize}px`,\n                        top: `${top}px`,\n                        height: `${cellSize}px`,\n                        textAlign: 'center',\n                        fontWeight: 'bold',\n                        color: colorText,\n                    },\n                    attributes: {\n                        title: this.getStringM('js_add_score'),\n                    },\n                });\n            }\n\n            // Create the ranking grade label (line1)\n            const lblRank = this.createDOMElement('div', {\n                parent: parent,\n                classnames: `${prefixclassname}-rank`,\n                styles: {\n                    position: 'absolute',\n                    left: `${createAddScore ? left + cellSize : left}px`,\n                    width: `${createAddScore ? cellSize : 2 * cellSize}px`,\n                    top: `${top}px`,\n                    height: `${cellSize}px`,\n                    textAlign: 'center',\n                    color: colorText,\n                },\n                attributes: {\n                    title: this.getStringM('js_ranking'),\n                },\n            });\n\n            // Create the main score label (line2)\n            const lblScore = this.createDOMElement('div', {\n                parent: parent,\n                classnames: `${prefixclassname}-score`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    width: `${createAddScore ? cellSize : 2 * cellSize}px`,\n                    top: `${top + cellSize}px`,\n                    height: `${cellSize}px`,\n                    lineHeight: `${cellSize}px`,\n                    textAlign: 'center',\n                    color: colorText,\n                },\n                attributes: {\n                    title: this.getStringM('js_grade'),\n                },\n            });\n\n            // Create the percentage label (line2)\n            let lblPercent;\n            if (createAddScore) {\n                lblPercent = this.createDOMElement('div', {\n                    parent: parent,\n                    classnames: `${prefixclassname}-percent`,\n                    styles: {\n                        position: 'absolute',\n                        left: `${left + cellSize}px`,\n                        width: `${cellSize}px`,\n                        top: `${top + cellSize}px`,\n                        height: `${cellSize}px`,\n                        textAlign: 'center',\n                        lineHeight: `${cellSize}px`,\n                        color: colorText,\n                    },\n                    attributes: {\n                        title: this.getStringM('js_percent'),\n                    },\n                });\n            }\n\n            return {divMain: divMain, lblRank: lblRank, lblScore: lblScore, lblPercent: lblPercent,\n                lblAddScore: lblAddScore, cellSize: cellSize};\n        }\n\n        showScore(player, score, rank, percent, rankpercent, showPercent) {\n            let boldScore = false;\n            let boldPercent = false;\n            if (rank !== undefined && rankpercent !== undefined) {\n                if (parseInt(rankpercent) < parseInt(rank)) {\n                    boldScore = true;\n                    rank = rankpercent;\n                } else if (parseInt(rankpercent) === parseInt(rank)) {\n                    boldScore = true;\n                    boldPercent = true;\n                }\n            }\n\n            if (rank !== '') {\n                player.lblRank.innerHTML = `#${rank}`;\n                this.autoResizeText(player.lblRank, player.cellSize, player.cellSize, false, 0, 0);\n            } else {\n                player.lblRank.innerHTML = '';\n            }\n\n            let s = boldScore ? `<b>${score}</b>` : score;\n            if (player.cacheScore !== s) {\n                player.cacheScore = s;\n                player.lblScore.innerHTML = s;\n                const width = showPercent ? player.cellSize : 2 * player.cellSize;\n                this.autoResizeText(player.lblScore, width, player.cellSize, false, 0, 0);\n            }\n\n            if (showPercent) {\n                s = percent === '' ? '' : (boldPercent ? `<b>${Math.round(100 * percent)} </b>` : Math.round(100 * percent)) + '%';\n                if (player.lblPercent !== undefined) {\n                    if (player.cachePercent !== s) {\n                        player.cachePercent = s;\n                        player.lblPercent.innerHTML = s;\n                        this.autoResizeText(player.lblPercent, player.cellSize - this.padding, player.cellSize, false, 0, 0);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Creates and displays the definition area for the question.\n         *\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} width - The width of the definition area.\n         * @param {number} height - The height of the definition area.\n         * @param {boolean} onlyMetrics - Whether to only measure size.\n         * @param {number} fontSize - The font size for the definition text.\n         * @param {string} definition\n         * @returns {Array} The width and height of the definition area.\n         */\n        createDefinition(left, top, width, height, onlyMetrics, fontSize, definition) {\n            const definitionDiv = this.createDOMElement(\n                'div',\n                {\n                    parent: null,\n                    classnames: 'mmogame-quiz-definition',\n                    styles: {\n                        position: 'absolute',\n                        width: `${width}px`,\n                        fontSize: `${fontSize}px`,\n                    }\n                }\n            );\n            definitionDiv.innerHTML = definition;\n\n            if (onlyMetrics) {\n                document.body.appendChild(definitionDiv);\n\n                const size = [definitionDiv.scrollWidth, definitionDiv.scrollHeight];\n\n                document.body.removeChild(definitionDiv);\n                return size;\n            }\n\n            // Apply styling and position\n            definitionDiv.style.background = this.getColorHex(this.colorBackground2);\n            definitionDiv.style.color = this.getContrastingColor(this.colorBackground2);\n            definitionDiv.style.left = `${left}px`;\n            definitionDiv.style.top = `${top}px`;\n            if (height !== 0) {\n                definitionDiv.style.height = `${height}px`;\n            }\n            definitionDiv.style.padding = `0 ${this.padding}px`;\n\n            this.area.appendChild(definitionDiv);\n\n            return [definitionDiv.scrollWidth, definitionDiv.scrollHeight];\n        }\n\n        /**\n         * Sends the selected answer to the server using Moodle's AJAX API.\n         * @param {string} subcommand\n         */\n        callSetAnswer(subcommand = '') {\n            // Clear existing timeout\n            if (this.timerTimeout !== undefined) {\n                clearTimeout(this.timerTimeout);\n            }\n\n            this.timerTimeout = undefined;\n\n            require(['core/ajax'], (Ajax) => {\n                const params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    attempt: this.attempt,\n                    answer: this.answer || null,\n                    answerid: this.answerid || null,\n                    subcommand: subcommand,\n                };\n\n                Ajax.call([{\n                    methodname: 'mmogametype_quiz_set_answer', // API endpoint\n                    args: params,\n                }])[0].done((response) => {\n                    this.processSetAnswer(JSON.parse(response)); // Process the server's response\n                }).fail((error) => {\n                    this.showError(error); // Handle errors\n                });\n            });\n        }\n\n        /**\n         * Sets the colors for different UI elements and repairs them if necessary.\n         *\n         * @param {Array} colors - Array of color codes to be applied.\n         */\n        setColors(colors) {\n            super.setColors(colors);\n\n            // Assign specific colors to UI elements\n            this.colorScore = colors[2];\n            this.colorScore2 = colors[4];\n        }\n\n        updateNicknameAvatar(player, avatarSrc, nickname, nicknameWidth, nicknameHeight) {\n            if (avatarSrc === undefined) {\n                avatarSrc = \"\";\n            }\n            if (nickname === undefined) {\n                nickname = \"\";\n            }\n\n            if (avatarSrc === \"\" && nickname === \"\") {\n                player.avatarElement.style.visibility = 'hidden';\n                player.nicknameElement.style.visibility = 'hidden';\n                return;\n            }\n\n            if (player.cacheNickname !== nickname || nickname === \"\") {\n                player.cacheNickname = nickname;\n                let s = nickname;\n\n                if (nickname.length === 0) {\n                    const filenameWithExt = avatarSrc.split('/').pop(); // Extract file name\n                    // Remove extension, fallback if no extension\n                    s = filenameWithExt.split('.').slice(0, -1).join('.') || filenameWithExt;\n                }\n                s = this.repairNickname(s);\n                player.nicknameElement.innerHTML = s;\n                player.nicknameElement.style.textAlign = \"center\";\n                player.nicknameElement.style.color = this.getContrastingColor(this.colorBackground);\n                this.autoResizeText(player.nicknameElement, nicknameWidth, nicknameHeight, true, 0, 0);\n            }\n\n            if (avatarSrc !== player.cacheAvatar) {\n                player.avatarElement.src = avatarSrc !== \"\" ? \"assets/avatars/\" + avatarSrc : \"\";\n                player.cacheAvatar = avatarSrc;\n            }\n\n            player.avatarElement.alt = player.cacheNickname;\n            player.avatarElement.style.visibility = 'visible';\n\n            player.nicknameElement.style.visibility = 'visible';\n        }\n\n        computeBestFontSize(json) {\n            let maxHeight, definitionWidth;\n\n            maxHeight = this.areaRect.height - this.iconSize - 3 * this.padding;\n            definitionWidth = this.isVertical ? this.areaRect.width : Math.round((this.areaRect.width - this.padding) / 2);\n\n            for (let step = 1; step <= 2; step++) {\n                let defSize;\n                this.fontSize = this.findbest(step === 1 ? this.minFontSize : this.minFontSize / 2, this.maxFontSize,\n                    (fontSize) => {\n                        defSize = this.createDefinition(0, 0, definitionWidth, 0, true, fontSize,\n                            json);\n                        if (defSize[0] > definitionWidth) {\n                            return 1;\n                        }\n                        let ansSize = this.createAnswer(0, 0, definitionWidth, true, fontSize, false);\n                        if (ansSize[0] > definitionWidth) {\n                            return 1;\n                        }\n                        if (this.isVertical) {\n                            return defSize[1] + ansSize[1] < maxHeight ? -1 : 1;\n                        } else {\n                            return defSize[1] < maxHeight && ansSize[1] < maxHeight ? -1 : 1;\n                        }\n                    });\n                if (defSize[0] <= definitionWidth && defSize[1] <= this.areaRect.height) {\n                    break;\n                }\n            }\n            return [definitionWidth];\n        }\n\n        createNextButton(left, top) {\n            let btn = super.createImageButton(this.area, 'mmogame-quiz-next',\n                left, top, 0, this.iconSize, 'assets/next.svg');\n            btn.title = this.getStringM('js_next_question');\n            btn.addEventListener(\"click\", () => {\n                this.callGetAttempt();\n                this.area.removeChild(btn);\n            });\n        }\n\n        async processFastJson(response) {\n            if (response === '') {\n                response = await this.callGetState();\n            }\n            let a = response.split('-'); // Are state,timefastjson.\n            let newstate = a.length > 0 ? parseInt(a[0]) : 0;\n            let newTimeFastJSON = a.length > 1 ? parseInt(a[1]) : 0;\n\n            if (this.timefastjson === null) {\n                this.timefastjson = 0;\n            }\n\n            if (newstate !== this.state || newTimeFastJSON !== this.timefastjson) {\n                this.removeMessageDivs();\n                await this.callGetAttempt();\n                return;\n            }\n\n            await this.sendFastJSON();\n        }\n\n        processGetAttempt(json) {\n            this.fastjson = parseInt(json.fastjson);\n            this.timefastjson = parseInt(json.timefastjson);\n\n            // Calculate time difference and set up the clock\n            this.computeDifClock(json.time);\n        }\n    };\n    });"],"names":["define","MmoGameUI","kinduser","user","url","pin","labelTimer","timeForSendFastJson","timefastjson","type","colorScore","colorScore2","constructor","openGame","audioYes","Audio","load","audioNo","createAnswer","left","top","width","onlyMetrics","fontSize","disabled","this","createAnswerMultichoice","n","answers","length","aChecked","answer","fragment","document","createDocumentFragment","retSize","checkboxSize","Math","round","aItemAnswer","Array","aItemLabel","aItemCorrectX","i","label","createDOMElement","parent","classnames","styles","position","padding","color","getContrastingColor","colorBackground","innerHTML","area","appendChild","newSize","scrollWidth","max","scrollHeight","removeChild","htmlFor","style","align","checked","includes","answersID","item","createRadiobox","body","colorBackground2","id","addEventListener","classList","contains","onClickRadio","heightLabel","index","colorBack","forEach","isDisabled","add","answerid","remove","drawRadio","callSetAnswer","getSVGcorrect","size","iscorrect","colorCorrect","colorError","undefined","getColorHex","disableInput","setAttribute","timeoutFastJSON","clearTimeout","setTimeout","async","formData","URLSearchParams","append","fastjson","toString","console","log","response","fetch","method","headers","ok","Error","status","data","text","processFastJson","error","showError","getStringT","name","M","util","get_string","createDivScorePercent","prefixclassname","createAddScore","colorText","divMain","iconSize","height","border","boxShadow","background","borderRadius","attributes","cellSize","lblAddScore","textAlign","fontWeight","title","getStringM","lblRank","lblScore","lineHeight","lblPercent","showScore","player","score","rank","percent","rankpercent","showPercent","boldScore","boldPercent","parseInt","autoResizeText","s","cacheScore","cachePercent","createDefinition","definition","definitionDiv","subcommand","timerTimeout","require","Ajax","params","mmogameid","attempt","call","methodname","args","done","processSetAnswer","JSON","parse","fail","setColors","colors","updateNicknameAvatar","avatarSrc","nickname","nicknameWidth","nicknameHeight","avatarElement","visibility","nicknameElement","cacheNickname","filenameWithExt","split","pop","slice","join","repairNickname","cacheAvatar","src","alt","computeBestFontSize","json","maxHeight","definitionWidth","areaRect","isVertical","step","defSize","findbest","minFontSize","maxFontSize","ansSize","createNextButton","btn","super","createImageButton","callGetAttempt","callGetState","a","newstate","newTimeFastJSON","state","removeMessageDivs","sendFastJSON","processGetAttempt","computeDifClock","time"],"mappings":"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"}