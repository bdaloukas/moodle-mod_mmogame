{"version":3,"file":"mmogametypequiz.min.js","sources":["../src/mmogametypequiz.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mod_mmogame/mmogameui'], function(MmoGameUI) {\n    return class MmoGameTypeQuiz extends MmoGameUI {\n        mmogameid;\n        kinduser;\n        user;\n        url;\n        pin;\n        labelTimer;\n        timeForSendAnswer;\n        divDefinition;\n        definitionHeight;\n\n        /**\n         * Base class for Quiz mmmogame\n         *\n         * @module mmogametype_quiz\n         * @copyright 2024 Vasilis Daloukas\n         * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n         */\n\n        constructor() {\n            super();\n            this.hideSubmit = false;\n            this.timeForSendAnswer = 10000;\n        }\n\n        /**\n         * Initializes the game by loading required audio assets.\n         */\n        openGame() {\n            super.openGame(); // Call the parent class method\n\n            // Load sound effects\n            this.audioYes = new Audio('assets/yes1.mp3');\n            this.audioYes.load();\n            this.audioNo = new Audio('assets/no1.mp3');\n            this.audioNo.load();\n        }\n\n        /**\n         * Processes the response for a game attempt, updating the state and UI.\n         *\n         * @param {Object} json - The server response containing attempt data.\n         */\n        processGetAttempt(json) {\n            // Calculate time difference and set up the clock\n            this.computeDifClock(json.time, json.timestart, json.timeclose);\n\n            // Set colors if provided\n            if (json.colors) {\n                this.setColorsString(json.colors);\n                this.createIconBar(); // Initialize the top bar with icons\n            }\n\n            // Update the window title if a name is provided\n            if (json.name) {\n                document.title = json.name;\n            }\n\n            // Set help URL if available\n            if (json.helpurl) {\n                this.helpUrl = json.helpurl;\n            }\n\n            // Handle error messages from the server\n            if (json.errorcode) {\n                this.createDivMessage('mmogame-error', json.errorcode);\n                return;\n            }\n\n            // Update game state and user-related data\n            this.state = parseInt(json.state, 10);\n            this.fastjson = json.fastjson;\n            this.timefastjson = parseInt(json.timefastjson, 10);\n            this.updateButtonsAvatar(1, json.avatar, json.nickname);\n\n            this.attempt = json.attempt;\n\n            // Process question type and answers\n            this.qtype = json.qtype;\n            if (this.qtype === 'multichoice') {\n                this.answers = [];\n                this.answersID = json.answerids;\n                json.answers.forEach((answer, index) => {\n                    this.answers[index] = this.repairP(answer); // Process each answer\n                });\n            }\n            this.answer = json.answer ?? undefined;\n\n            // Handle end-of-game scenarios\n            this.endofgame = json.endofgame !== undefined && json.endofgame !== 0;\n            this.definition = this.repairP(json.definition);\n            this.errorcode = json.errorcode;\n\n            if (json.state !== 0) {\n                this.createScreen(json, false);\n            }\n\n            this.updateLabelTimer(); // Start or update the timer\n            this.sendFastJSON(); // Send fast JSON updates\n        }\n\n        updateLabelTimer() {\n            // Exit if labelTimer or timeclose are undefined\n            if (!this.labelTimer || !this.timeclose) {\n                return;\n            }\n\n            // Calculate the remaining time in seconds\n            const now = Date.now() / 1000; // Get current time in seconds\n            let remainingTime = Math.max(0, this.timeclose - now);\n\n            // If no time is remaining, clear the label and handle timeout\n            if (remainingTime === 0) {\n                this.labelTimer.innerHTML = '';\n                this.onTimeout();\n                return;\n            }\n\n            // Format the remaining time as mm:ss\n            const minutes = Math.floor(remainingTime / 60);\n            const seconds = String(Math.floor(remainingTime % 60)).padStart(2, '0');\n            this.labelTimer.innerHTML = `${minutes}:${seconds}`;\n\n            // Set a timeout to update the timer every 500ms\n            this.timerTimeout = setTimeout(() => this.updateLabelTimer(), 500);\n        }\n\n        /**\n         * Handles the timeout scenario by disabling inputs and sending timeout data.\n         */\n        onTimeout() {\n            this.labelTimer.innerHTML = ''; // Clear the timer display\n            this.disableInput(); // Prevent further user input\n            this.sendTimeout(); // Notify the server about the timeout\n        }\n        /**\n         * Creates the game screen layout based on the current state.\n         *\n         * @param {Object} json - The game data used to build the screen.\n         * @param {boolean} disabled - Determines whether user input should be disabled.\n         */\n        createScreen(json, disabled) {\n            this.createArea(); // Prepare the main game area\n\n            if (this.endofgame) {\n                // Display end-of-game message and final score\n                this.createDivMessage('mmogame-endofgame', this.getStringM('js_game_over'));\n                this.showScore(json);\n                return;\n            }\n\n            // Render the screen layout based on orientation (vertical or horizontal)\n            if (this.vertical) {\n                this.createScreenVertical(disabled);\n            } else {\n                this.createScreenHorizontal(disabled);\n            }\n\n            // Display the current score\n            this.showScore(json);\n        }\n\n        /**\n         * Creates a vertical layout for the quiz screen.\n         *\n         * @param {boolean} disabled - Whether user input should be disabled.\n         */\n        createScreenVertical(disabled) {\n            const nickNameHeight = Math.round(this.iconSize / 3) + this.padding;\n            let maxHeight = this.areaHeight - 4 * this.padding - nickNameHeight;\n\n            if (!this.hideSubmit) {\n                maxHeight -= this.iconSize; // Reserve space for the submit button\n            }\n\n            const maxWidth = this.areaWidth;\n\n            // Dynamically adjust font size to fit content within constraints\n            this.fontSize = this.findbest(this.minFontSize, this.maxFontSize, (fontSize) => {\n                const defSize = this.createDefinition(0, 0, maxWidth - 1, true, fontSize);\n                if (defSize[0] >= maxWidth) {\n                    return 1;\n                }\n\n                const ansSize = this.createAnswer(0, 0, maxWidth - 1, true, fontSize, disabled);\n                return defSize[1] + ansSize[1] < maxHeight ? -1 : 1;\n            });\n\n            this.radioSize = Math.round(this.fontSize);\n            const defSize = this.createDefinition(0, 0, maxWidth, false, this.fontSize);\n\n            // Position answers below the definition\n            this.nextTop = this.createAnswer(0, defSize[1] + this.padding, maxWidth, false, this.fontSize, disabled);\n\n            if (!this.hideSubmit) {\n                // Create and position the submit button\n                const space = (this.areaWidth - this.iconSize) / 2;\n                this.btnSubmit = this.createImageButton(\n                    this.area,\n                    'mmogame-quiz-submit',\n                    space,\n                    this.nextTop,\n                    0,\n                    this.iconSize,\n                    'assets/submit.svg',\n                    false,\n                    'submit'\n                );\n                this.btnSubmit.addEventListener('click', () => {\n                    this.area.removeChild(this.btnSubmit);\n                    this.btnSubmit = undefined;\n                    this.sendAnswer();\n                });\n            }\n\n            // Adjust strip dimensions\n            this.stripLeft = this.padding;\n            this.stripWidth = 2 * this.iconSize;\n            this.stripHeight = this.iconSize;\n        }\n\n        /**\n         * Creates a horizontal layout for the quiz screen.\n         *\n         * @param {boolean} disabled - Whether user input should be disabled.\n         */\n        createScreenHorizontal(disabled) {\n            let maxHeight = this.areaHeight - 2 * this.padding;\n\n            if (!this.hideSubmit) {\n                maxHeight -= this.iconSize + this.padding; // Reserve space for submit button\n            }\n\n            const width = Math.round((this.areaWidth - this.padding) / 2);\n            for (let step = 1; step <= 2; step++) {\n                let defSize;\n                this.fontSize = this.findbest(step === 1 ? this.minFontSize : this.minFontSize / 2, this.maxFontSize,\n                    (fontSize) => {\n                        defSize = this.createDefinition(0, 0, width - this.padding, true, fontSize);\n\n                        if (defSize[0] >= width) {\n                            return 1;\n                        }\n                        let ansSize = this.createAnswer(0, 0, width - this.padding, true, fontSize, disabled);\n                        if (ansSize[0] >= width) {\n                            return 1;\n                        }\n                        return defSize[1] < maxHeight && ansSize[1] < maxHeight ? -1 : 1;\n                    }\n                );\n                if (defSize[0] <= width && defSize[1] <= this.areaHeight) {\n                    break;\n                }\n            }\n\n            this.radioSize = Math.round(this.fontSize);\n            this.createDefinition(0, 0, width - this.padding, false, this.fontSize);\n\n            this.nextTop = this.createAnswer(width, 0, width - this.padding, false, this.fontSize, disabled) + this.padding;\n\n            if (!this.hideSubmit) {\n                // Create and position the submit button\n                this.btnSubmit = this.createImageButton(\n                    this.body,\n                    'mmogame-quiz-submit',\n                    width + (width - this.iconSize) / 2,\n                    this.nextTop,\n                    0,\n                    this.iconSize,\n                    'assets/submit.svg',\n                    false,\n                    'submit'\n                );\n                this.btnSubmit.addEventListener('click', () => {\n                    this.sendAnswer();\n                });\n            }\n\n            // Adjust strip dimensions\n            this.stripLeft = width + this.padding;\n            this.stripWidth = 2 * this.iconSize;\n            this.stripHeight = this.iconSize;\n        }\n\n        createAnswer(left, top, width, onlyMetrics, fontSize, disabled) {\n            return this.createAnswerMultichoice(left, top, width, onlyMetrics, fontSize, disabled);\n        }\n\n        /**\n         * Creates multiple-choice answer options.\n         *\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} width - The maximum width available for answers.\n         * @param {boolean} onlyMetrics - Whether to only calculate size metrics.\n         * @param {number} fontSize - The font size for answer text.\n         * @param {boolean} disabled - Whether the answers are disabled.\n         * @returns {number} The total height used by the answer options.\n         */\n        createAnswerMultichoice(left, top, width, onlyMetrics, fontSize, disabled) {\n            const n = this.answers ? this.answers.length : 0;\n            const aChecked = this.answer?.split(\",\").filter(Boolean) || [];\n            const retSize = [0, 0];\n            const checkboxSize = Math.round(fontSize);\n            this.aItemAnswer = Array(n);\n            this.aItemLabel = Array(n);\n            this.aItemCorrectX = new Array(n);\n\n            // Iterate over each answer\n            for (let i = 0; i < n; i++) {\n                const label = document.createElement(\"label\");\n                label.style.position = \"absolute\";\n                label.style.width = `${width}px`;\n                label.style.fontSize = `${fontSize}px`;\n                label.style.color = this.getContrastingColor(this.colorBackground);\n                label.innerHTML = this.answers[i];\n                label.classList.add('mmogame-quiz-multichoice-label');\n\n                if (onlyMetrics) {\n                    this.area.appendChild(label);\n                    const newSize = label.scrollWidth + fontSize + this.padding;\n                    retSize[0] = Math.max(retSize[0], newSize);\n                    retSize[1] += Math.max(label.scrollHeight, fontSize) + this.padding;\n                    this.area.removeChild(label);\n                    continue;\n                }\n\n                label.htmlFor = \"mmogame_quiz_input\" + i;\n                label.style.left = (left + fontSize + this.padding) + \"px\";\n                label.style.top = top + \"px\";\n                label.style.align = \"left\";\n                label.style.color = this.getContrastingColor(this.colorBackground);\n\n                // Create the checkbox\n                const checked = aChecked.includes(this.answersID[i]);\n                const item = this.createRadiobox(this.body, checkboxSize, this.colorBackground2, this.colorScore, checked, disabled);\n                item.style.position = \"absolute\";\n                item.style.left = `${left}px`;\n                item.style.top = `${top}px`;\n                item.id = \"mmogame_quiz_input\" + i;\n\n                // Event listeners for interactions\n                item.addEventListener('click', () => {\n                    if (!item.classList.contains(\"disabled\")) {\n                        this.onClickRadio(i, this.colorBackground2, this.colorScore, true);\n                    }\n                });\n\n                label.addEventListener('click', () => {\n                    this.onClickRadio(i, this.colorBackground2, this.colorScore, true);\n                });\n\n                this.area.appendChild(item);\n                this.area.appendChild(label);\n\n                this.aItemAnswer[i] = item;\n                this.aItemCorrectX[i] = left + fontSize + this.padding;\n                this.aItemLabel[i] = label;\n\n                // Adjust positioning\n                top += Math.max(label.scrollHeight, fontSize) + this.padding;\n            }\n\n            return onlyMetrics ? retSize : top;\n        }\n\n        /**\n         * Handles radio button click events for answers.\n         *\n         * @param {number} index - The index of the clicked radio button.\n         * @param {string} colorBack - The background color for the radio button.\n         * @param {string} color - The color for the radio button when selected.\n         * @param {boolean} callSendAnswer - Whether to send the answer immediately.\n         */\n        onClickRadio(index, colorBack, color, callSendAnswer) {\n            if (this.aItemAnswer[index].classList.contains(\"disabled\")) {\n                return;\n            }\n\n            // Update the selected radio button and deselect others\n            this.aItemAnswer.forEach((item, i) => {\n                const isDisabled = item.classList.contains(\"disabled\");\n                if (i === index) {\n                    item.classList.add(\"checked\");\n                    this.answerid = this.answersID[i];\n                } else {\n                    item.classList.remove(\"checked\");\n                }\n\n                this.drawRadio(item, isDisabled ? colorBack : 0xFFFFFF, color);\n            });\n\n            // Send the answer if autosave is enabled\n            if (this.autosave && callSendAnswer) {\n                this.callSetAnswer();\n            }\n        }\n\n        sendTimeout() {\n            let xmlhttp = new XMLHttpRequest();\n            xmlhttp.onreadystatechange = () => {\n                if (this.readyState === 4 && this.status === 200) {\n                    this.sendGetAttempt();\n                }\n            };\n            xmlhttp.open(\"POST\", this.url, true);\n\n            xmlhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n            let data = JSON.stringify({\n                \"command\": \"timeout\", \"mmogameid\": this.mmogameid, \"pin\": this.pin, 'kinduser': this.kinduser,\n                \"user\": this.user, \"attempt\": this.attempt\n            });\n            xmlhttp.send(data);\n        }\n\n        /**\n         * Generates an SVG for a correct or incorrect icon.\n         *\n         * @param {number} size - The size of the SVG.\n         * @param {boolean} iscorrect - Whether the answer is correct.\n         * @param {int} colorCorrect - Color for correct answers.\n         * @param {int} colorError - Color for incorrect answers.\n         * @returns {string} The SVG markup as a string.\n         */\n        getSVGcorrect(size, iscorrect, colorCorrect, colorError) {\n            if (iscorrect) {\n                let c = colorCorrect !== undefined ? this.getColorHex(colorCorrect) : '#398439';\n                return \"<svg aria-hidden=\\\"true\\\" class=\\\"svg-icon iconCheckmarkLg\\\" width=\\\"\" + size + \"\\\" height=\\\"\" + size +\n                    \"\\\" viewBox=\\\"0 0 36 36\\\"><path fill=\\\"\" + c + \"\\\" d=\\\"m6 14 8 8L30 6v8L14 30l-8-8v-8z\\\"></path></svg>\";\n            } else {\n                let c = colorError !== undefined ? this.getColorHex(colorError) : '#398439';\n                return \"<svg width=\\\"\" + size + \"\\\" height=\\\"\" + size +\n                    \"\\\" class=\\\"bi bi-x-lg\\\" viewBox=\\\"0 0 18 18\\\"> <path fill=\\\"\" + c +\n                    `\" d=\"M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 \n                1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z\"/></svg>`;\n            }\n        }\n\n\n        /**\n         * Updates the screen to show the correctness of the user's answers.\n         */\n        updateScreenAfterAnswerMultichoice() {\n            const correctAnswers = this.correct.split(\",\"); // Split correct answer IDs into an array\n\n            for (let i = 0; i < this.answersID.length; i++) {\n                const label = this.aItemLabel[i];\n                const isChecked = this.aItemAnswer[i].classList.contains(\"checked\");\n                const isCorrect = correctAnswers.includes(this.answersID[i]);\n\n                // Skip answers that are neither checked nor correct\n                if (!isCorrect && !isChecked) {\n                    continue;\n                }\n\n                // Adjust label styling and add correct/incorrect icon\n                const labelWidth = label.scrollWidth - this.radioSize;\n                label.style.left = `${parseInt(label.style.left) + this.radioSize}px`;\n                label.style.width = `${labelWidth}px`;\n\n                if (isCorrect) {\n                    label.innerHTML = `<b>${label.innerHTML}</b>`;\n                }\n\n                const top = parseInt(this.aItemAnswer[i].style.top);\n                const feedbackDiv = this.createDiv(this.area, 'mmogame-quiz-correct',\n                    this.aItemCorrectX[i], top, this.radioSize, this.radioSize);\n                feedbackDiv.innerHTML = this.getSVGcorrect(this.radioSize, isCorrect, this.colorScore, this.colorScore);\n            }\n        }\n\n        /**\n         * Disables all answer inputs to prevent further interaction.\n         */\n        disableInput() {\n            if (!this.aItemAnswer) {\n                return;\n            }\n\n            for (const item of this.aItemAnswer) {\n                item.classList.add(\"disabled\"); // Add 'disabled' class to each input\n                this.drawRadio(item, this.colorScore, this.colorBackground2); // Update styling\n            }\n        }\n        /**\n         * Sends periodic fast JSON updates to the server.\n         */\n        sendFastJSON() {\n            // Clear existing timeout if any\n            if (this.timeoutFastJSON !== undefined) {\n                clearTimeout(this.timeoutFastJSON);\n            }\n\n            this.timeoutFastJSON = setTimeout(() => {\n                const xhr = new XMLHttpRequest();\n                xhr.onreadystatechange = () => {\n                    this.timeoutFastJSON = undefined;\n                    if (xhr.readyState === 4 && xhr.status === 200) {\n                        this.onServerFastJson(xhr.response);\n                    }\n                };\n\n                const url = `${this.url}/state.php`;\n                xhr.open(\"POST\", url, true);\n\n                const data = new FormData();\n                data.set('fastjson', this.fastjson);\n                data.set('type', this.type);\n\n                xhr.send(data); // Send the fast JSON data\n            }, this.timeForSendAnswer);\n        }\n\n\n        onClickHelp() {\n            if (this.helpUrl !== '') {\n                window.open(this.helpUrl, \"_blank\");\n            }\n        }\n\n        getStringT(name) {\n            return M.util.get_string(name, 'mmogametype_quiz');\n        }\n\n        /**\n         * Creates a percentage-based score display using createDOMElement.\n         *\n         * @param {string} prefixclassname\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} color\n         * @param {boolean} createAddScore\n         */\n        createDivScorePercent(prefixclassname, left, top, color, createAddScore) {\n            // Create the main button container\n            const main = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${prefixclassname}-main`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                    border: \"0px solid \" + this.getColorHex(0xFFFFFF),\n                    boxShadow: \"inset 0 0 0.125em rgba(255, 255, 255, 0.75)\",\n                    color: color,\n                },\n                attributes: {\n                    disabled: true,\n                    innerHTML: '',\n                },\n            });\n\n            // Create the main score label\n            const scoreLabel = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${prefixclassname}-score`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top + this.iconSize / 4}px`,\n                    width: `${this.iconSize / 2}px`,\n                    height: `${this.iconSize / 2}px`,\n                    lineHeight: `${this.iconSize / 2}px`,\n                    textAlign: 'center',\n                    color: this.getContrastingColor(this.colorScore),\n                },\n                attributes: {\n                    title: this.getStringM('js_grade'),\n                },\n            });\n\n            // Create the ranking grade label\n            const rankLabel = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${prefixclassname}-rank`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize / 2}px`,\n                    height: `${this.iconSize / 3}px`,\n                    textAlign: 'center',\n                    color: this.getContrastingColor(this.colorScore),\n                },\n                attributes: {\n                    title: this.getStringM('js_ranking_grade'),\n                },\n            });\n\n            // Create the percentage label\n            const percentLabel = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${prefixclassname}-percent`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left + this.iconSize / 2}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize / 2}px`,\n                    height: `${this.iconSize / 3}px`,\n                    textAlign: 'center',\n                    fontSize: `${this.iconSize / 3}px`,\n                    lineHeight: `${this.iconSize / 3}px`,\n                    color: rankLabel.style.color,\n                },\n                attributes: {\n                    title: this.getStringM('js_ranking_percent'),\n                },\n            });\n\n            // Create the additional score label\n            let addScoreLabel = null;\n            if (createAddScore) {\n                addScoreLabel = this.createDOMElement('div', {\n                    parent: this.body,\n                    classnames: `${prefixclassname}-addscore`,\n                    styles: {\n                        position: 'absolute',\n                        left: `${left + this.iconSize / 2}px`,\n                        top: `${top + this.iconSize - this.iconSize / 3}px`,\n                        width: `${this.iconSize / 2}px`,\n                        height: `${this.iconSize / 3}px`,\n                        textAlign: 'center',\n                        fontWeight: 'bold',\n                        color: color,\n                    },\n                    attributes: {\n                        title: this.getStringM('js_percent'),\n                    },\n                });\n            }\n\n            return {main, scoreLabel, rankLabel, percentLabel, addScoreLabel};\n        }\n\n        /**\n         * Creates and displays the definition area for the question.\n         *\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} width - The width of the definition area.\n         * @param {boolean} onlyMetrics - Whether to only measure size.\n         * @param {number} fontSize - The font size for the definition text.\n         * @returns {Array} The width and height of the definition area.\n         */\n        createDefinition(left, top, width, onlyMetrics, fontSize) {\n            width -= 2 * this.padding;\n\n            const definitionDiv = document.createElement(\"div\");\n            definitionDiv.style.position = \"absolute\";\n            definitionDiv.style.width = `${width}px`;\n            definitionDiv.style.fontSize = `${fontSize}px`;\n            definitionDiv.innerHTML = this.definition;\n\n            if (onlyMetrics) {\n                this.body.appendChild(definitionDiv);\n                const size = [definitionDiv.scrollWidth, definitionDiv.scrollHeight];\n                this.body.removeChild(definitionDiv);\n                return size;\n            }\n\n            // Apply styling and position\n            definitionDiv.style.background = this.getColorHex(this.colorBackground2);\n            definitionDiv.style.color = this.getContrastingColor(this.colorBackground2);\n            definitionDiv.style.left = `${left}px`;\n            definitionDiv.style.top = `${top}px`;\n            definitionDiv.style.paddingLeft = `${this.padding}px`;\n            definitionDiv.style.paddingRight = `${this.padding}px`;\n\n            this.area.appendChild(definitionDiv);\n\n            const height = definitionDiv.scrollHeight + this.padding;\n            definitionDiv.style.height = `${height}px`;\n\n            this.definitionHeight = height;\n            this.divDefinition = definitionDiv;\n\n            return [definitionDiv.scrollWidth, definitionDiv.scrollHeight];\n        }\n\n        /**\n         * Displays the current score and ranking on the screen.\n         *\n         * @param {Object} scoreData - The data containing score, rank, and percentages.\n         * @param {string} scoreData.addscore\n         * @param {int} scoreData.completedrank\n         * @param {int} scoreData.percentcompleted\n         * @param {int} scoreData.rank\n         * @param {int} scoreData.sumscore\n         * @param {string} scoreData.usercode\n         */\n        showScore({addscore, completedrank, percentcompleted, rank, sumscore, usercode}) {\n            // Update total score display\n            const scoreText = sumscore !== undefined ? `<b>${sumscore}</b>` : '';\n            if (this.labelScore.innerHTML !== scoreText) {\n                this.labelScore.innerHTML = scoreText;\n                this.autoResizeText(this.labelScore, this.iconSize - 2 * this.padding, this.iconSize / 2, false, 0, 0, 1);\n            }\n\n            // Update rank display\n            if (this.labelScoreRank.innerHTML !== rank) {\n                this.labelScoreRank.innerHTML = rank || '';\n                this.autoResizeText(this.labelScoreRank, this.iconSize, this.iconSize / 3, true, 0, 0, 1);\n            }\n\n            // Update document title if applicable\n            if (usercode !== undefined) {\n                document.title = `${usercode} ${name || ''}`;\n            }\n\n            // Update additional score\n            const addScoreText = addscore !== undefined ? addscore : '';\n            if (this.labelAddScore.innerHTML !== addScoreText) {\n                this.labelAddScore.innerHTML = addScoreText;\n                this.autoResizeText(this.labelAddScore, this.iconSize - 2 * this.padding, this.iconSize / 3, false, 0, 0, 1);\n            }\n\n            // Update completed rank display\n            if (this.labelScoreRankB.innerHTML !== completedrank) {\n                this.labelScoreRankB.innerHTML = completedrank || '';\n                this.autoResizeText(this.labelScoreRankB, 0.9 * this.iconSize / 2, this.iconSize / 3, true, 0, 0, 1);\n            }\n\n            // Update percentage completed\n            const percentageText = percentcompleted !== undefined ? `${Math.round(100 * percentcompleted)}%` : '';\n            if (this.labelScoreB.innerHTML !== percentageText) {\n                this.labelScoreB.innerHTML = percentageText;\n                this.autoResizeText(this.labelScoreB, 0.8 * this.iconSize / 2, this.iconSize / 3, true, 0, 0, 1);\n            }\n        }\n\n        /**\n         * Sends the selected answer to the server using Moodle's AJAX API.\n         */\n        callSetAnswer() {\n            // Clear existing timeout\n            if (this.timerTimeout !== undefined) {\n                clearTimeout(this.timerTimeout);\n            }\n\n            this.timerTimeout = undefined;\n\n            require(['core/ajax'], (Ajax) => {\n                const params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    attempt: this.attempt,\n                    answer: this.answer || null,\n                    answerid: this.answerid || null,\n                    subcommand: '',\n                };\n\n                Ajax.call([{\n                    methodname: 'mmogametype_quiz_set_answer', // API endpoint\n                    args: params,\n                }])[0].done((response) => {\n                    this.processSetAnswer(JSON.parse(response)); // Process the server's response\n                }).fail((error) => {\n                    this.showError(error); // Handle errors\n                });\n            });\n        }\n\n        /**\n         * Sets the colors for different UI elements and repairs them if necessary.\n         *\n         * @param {Array} colors - Array of color codes to be applied.\n         */\n        setColors(colors) {\n            super.setColors(colors);\n\n            // Assign specific colors to UI elements\n            this.colorScore = colors[2];\n            this.colorCopyright = colors[3];\n            this.colorScore2 = colors[4];\n        }\n    };\n    });"],"names":["define","MmoGameUI","constructor","super","_defineProperty","this","hideSubmit","timeForSendAnswer","openGame","audioYes","Audio","load","audioNo","processGetAttempt","json","_json$answer","computeDifClock","time","timestart","timeclose","colors","setColorsString","createIconBar","name","document","title","helpurl","helpUrl","errorcode","createDivMessage","state","parseInt","fastjson","timefastjson","updateButtonsAvatar","avatar","nickname","attempt","qtype","answers","answersID","answerids","forEach","answer","index","repairP","undefined","endofgame","definition","createScreen","updateLabelTimer","sendFastJSON","labelTimer","now","Date","remainingTime","Math","max","innerHTML","onTimeout","minutes","floor","seconds","String","padStart","concat","timerTimeout","setTimeout","disableInput","sendTimeout","disabled","createArea","getStringM","showScore","vertical","createScreenVertical","createScreenHorizontal","nickNameHeight","round","iconSize","padding","maxHeight","areaHeight","maxWidth","areaWidth","fontSize","findbest","minFontSize","maxFontSize","defSize","createDefinition","ansSize","createAnswer","radioSize","nextTop","space","btnSubmit","createImageButton","area","addEventListener","removeChild","sendAnswer","stripLeft","stripWidth","stripHeight","width","step","body","left","top","onlyMetrics","createAnswerMultichoice","_this$answer","n","length","aChecked","split","filter","Boolean","retSize","checkboxSize","aItemAnswer","Array","aItemLabel","aItemCorrectX","i","label","createElement","style","position","color","getContrastingColor","colorBackground","classList","add","appendChild","newSize","scrollWidth","scrollHeight","htmlFor","align","checked","includes","item","createRadiobox","colorBackground2","colorScore","id","contains","onClickRadio","colorBack","callSendAnswer","isDisabled","answerid","remove","drawRadio","autosave","callSetAnswer","xmlhttp","XMLHttpRequest","onreadystatechange","readyState","status","sendGetAttempt","open","url","setRequestHeader","data","JSON","stringify","command","mmogameid","pin","kinduser","user","send","getSVGcorrect","size","iscorrect","colorCorrect","colorError","getColorHex","updateScreenAfterAnswerMultichoice","correctAnswers","correct","isChecked","isCorrect","labelWidth","createDiv","timeoutFastJSON","clearTimeout","xhr","onServerFastJson","response","FormData","set","type","onClickHelp","window","getStringT","M","util","get_string","createDivScorePercent","prefixclassname","createAddScore","main","createDOMElement","parent","classnames","styles","height","border","boxShadow","attributes","scoreLabel","lineHeight","textAlign","rankLabel","percentLabel","addScoreLabel","fontWeight","definitionDiv","background","paddingLeft","paddingRight","definitionHeight","divDefinition","_ref","addscore","completedrank","percentcompleted","rank","sumscore","usercode","scoreText","labelScore","autoResizeText","labelScoreRank","addScoreText","labelAddScore","labelScoreRankB","percentageText","labelScoreB","require","Ajax","params","subcommand","call","methodname","args","done","processSetAnswer","parse","fail","error","showError","setColors","colorCopyright","colorScore2"],"mappings":"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"}