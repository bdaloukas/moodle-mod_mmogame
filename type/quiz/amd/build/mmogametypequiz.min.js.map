{"version":3,"file":"mmogametypequiz.min.js","sources":["../src/mmogametypequiz.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mod_mmogame/mmogameui'], function(MmoGameUI) {\n    return class MmoGameTypeQuiz extends MmoGameUI {\n        kinduser;\n        user;\n        url;\n        pin;\n        labelTimer;\n        timeForSendAnswer;\n        divDefinition;\n        definitionHeight;\n\n        /**\n         * Base class for Quiz mmmogame\n         *\n         * @module mmogametype_quiz\n         * @copyright 2024 Vasilis Daloukas\n         * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n         */\n\n        constructor() {\n            super();\n            this.hideSubmit = false;\n            this.timeForSendAnswer = 10000;\n        }\n\n        /**\n         * Initializes the game by loading required audio assets.\n         */\n        openGame() {\n            super.openGame(); // Call the parent class method\n\n            // Load sound effects\n            this.audioYes = new Audio('assets/yes1.mp3');\n            this.audioYes.load();\n            this.audioNo = new Audio('assets/no1.mp3');\n            this.audioNo.load();\n        }\n\n        /**\n         * Processes the response for a game attempt, updating the state and UI.\n         *\n         * @param {Object} json - The server response containing attempt data.\n         */\n        /*\n        processGetAttempt(json) {\n            // Calculate time difference and set up the clock\n            this.computeDifClock(json.time, json.timestart, json.timeclose);\n\n            // Set colors if provided\n            if (json.colors) {\n                this.setColorsString(json.colors);\n                this.createIconBar(); // Initialize the top bar with icons\n            }\n\n            // Update the window title if a name is provided\n            if (json.name) {\n                document.title = json.name;\n            }\n\n            // Set help URL if available\n            if (json.helpurl) {\n                this.helpUrl = json.helpurl;\n            }\n\n            // Handle error messages from the server\n            if (json.errorcode) {\n                this.createDivMessage('mmogame-error', json.errorcode);\n                return;\n            }\n\n            // Update game state and user-related data\n            this.state = parseInt(json.state, 10);\n            this.fastjson = json.fastjson;\n            this.timefastjson = parseInt(json.timefastjson, 10);\n            this.updateButtonsAvatar(1, this.avatarElement, this.nicknameElement, json.avatar, json.nickname, this.iconSize,\n                Math.round(this.iconSize / 3));\n\n            this.attempt = json.attempt;\n\n            // Process question type and answers\n            this.qtype = json.qtype;\n            if (this.qtype === 'multichoice') {\n                this.answers = [];\n                this.answersID = json.answerids;\n                json.answers.forEach((answer, index) => {\n                    this.answers[index] = this.repairP(answer); // Process each answer\n                });\n            }\n            this.answer = json.answer ?? undefined;\n\n            // Handle end-of-game scenarios\n            this.endofgame = json.endofgame !== undefined && json.endofgame !== 0;\n            this.definition = this.repairP(json.definition);\n            this.errorcode = json.errorcode;\n\n            if (json.state !== 0) {\n                this.createScreen(json, false);\n            }\n\n            this.updateLabelTimer(); // Start or update the timer\n            this.sendFastJSON(); // Send fast JSON updates\n        }*/\n\n        updateLabelTimer() {\n            // Exit if labelTimer or timeclose are undefined\n            if (!this.labelTimer || !this.timeclose) {\n                return;\n            }\n\n            // Calculate the remaining time in seconds\n            const now = Date.now() / 1000; // Get current time in seconds\n            let remainingTime = Math.max(0, this.timeclose - now);\n\n            // If no time is remaining, clear the label and handle timeout\n            if (remainingTime === 0) {\n                this.labelTimer.innerHTML = '';\n                this.onTimeout();\n                return;\n            }\n\n            // Format the remaining time as mm:ss\n            const minutes = Math.floor(remainingTime / 60);\n            const seconds = String(Math.floor(remainingTime % 60)).padStart(2, '0');\n            this.labelTimer.innerHTML = `${minutes}:${seconds}`;\n\n            // Set a timeout to update the timer every 500ms\n            this.timerTimeout = setTimeout(() => this.updateLabelTimer(), 500);\n        }\n\n        /**\n         * Handles the timeout scenario by disabling inputs and sending timeout data.\n         */\n        onTimeout() {\n            this.labelTimer.innerHTML = ''; // Clear the timer display\n            this.disableInput(); // Prevent further user input\n            this.sendTimeout(); // Notify the server about the timeout\n        }\n        /**\n         * Creates the game screen layout based on the current state.\n         *\n         * @param {Object} json - The game data used to build the screen.\n         * @param {boolean} disabled - Determines whether user input should be disabled.\n         */\n        createScreen(json, disabled) {\n            this.createArea(); // Prepare the main game area\n\n            if (this.endofgame) {\n                // Display end-of-game message and final score\n                this.createDivMessage('mmogame-endofgame', this.getStringM('js_game_over'));\n                this.showScore(json);\n                return;\n            }\n\n            // Render the screen layout based on orientation (vertical or horizontal)\n            if (this.vertical) {\n                this.createScreenVertical(disabled);\n            } else {\n                this.createScreenHorizontal(disabled);\n            }\n\n            // Display the current score\n            this.showScore(json);\n        }\n\n        /**\n         * Creates a vertical layout for the quiz screen.\n         *\n         * @param {boolean} disabled - Whether user input should be disabled.\n         */\n        createScreenVertical(disabled) {\n            const nickNameHeight = Math.round(this.iconSize / 3) + this.padding;\n            let maxHeight = this.areaHeight - 4 * this.padding - nickNameHeight;\n\n            if (!this.hideSubmit) {\n                maxHeight -= this.iconSize; // Reserve space for the submit button\n            }\n\n            const maxWidth = this.areaWidth;\n\n            // Dynamically adjust font size to fit content within constraints\n            this.fontSize = this.findbest(this.minFontSize, this.maxFontSize, (fontSize) => {\n                const defSize = this.createDefinition(0, 0, maxWidth - 1, true, fontSize);\n                if (defSize[0] >= maxWidth) {\n                    return 1;\n                }\n\n                const ansSize = this.createAnswer(0, 0, maxWidth - 1, true, fontSize, disabled);\n                return defSize[1] + ansSize[1] < maxHeight ? -1 : 1;\n            });\n\n            this.radioSize = Math.round(this.fontSize);\n            const defSize = this.createDefinition(0, 0, maxWidth, false, this.fontSize);\n\n            // Position answers below the definition\n            this.nextTop = this.createAnswer(0, defSize[1] + this.padding, maxWidth, false, this.fontSize, disabled);\n\n            if (!this.hideSubmit) {\n                // Create and position the submit button\n                const space = (this.areaWidth - this.iconSize) / 2;\n                this.btnSubmit = this.createImageButton(\n                    this.area,\n                    'mmogame-quiz-submit',\n                    space,\n                    this.nextTop,\n                    0,\n                    this.iconSize,\n                    'assets/submit.svg',\n                    false,\n                    'submit'\n                );\n                this.btnSubmit.addEventListener('click', () => {\n                    this.area.removeChild(this.btnSubmit);\n                    this.btnSubmit = undefined;\n                    this.sendAnswer();\n                });\n            }\n\n            // Adjust strip dimensions\n            this.stripLeft = this.padding;\n            this.stripWidth = 2 * this.iconSize;\n            this.stripHeight = this.iconSize;\n        }\n\n        /**\n         * Creates a horizontal layout for the quiz screen.\n         *\n         * @param {boolean} disabled - Whether user input should be disabled.\n         */\n        createScreenHorizontal(disabled) {\n            let maxHeight = this.areaHeight - 2 * this.padding;\n\n            if (!this.hideSubmit) {\n                maxHeight -= this.iconSize + this.padding; // Reserve space for submit button\n            }\n\n            const width = Math.round((this.areaWidth - this.padding) / 2);\n            for (let step = 1; step <= 2; step++) {\n                let defSize;\n                this.fontSize = this.findbest(step === 1 ? this.minFontSize : this.minFontSize / 2, this.maxFontSize,\n                    (fontSize) => {\n                        defSize = this.createDefinition(0, 0, width - this.padding, true, fontSize);\n\n                        if (defSize[0] >= width) {\n                            return 1;\n                        }\n                        let ansSize = this.createAnswer(0, 0, width - this.padding, true, fontSize, disabled);\n                        if (ansSize[0] >= width) {\n                            return 1;\n                        }\n                        return defSize[1] < maxHeight && ansSize[1] < maxHeight ? -1 : 1;\n                    }\n                );\n                if (defSize[0] <= width && defSize[1] <= this.areaHeight) {\n                    break;\n                }\n            }\n\n            this.radioSize = Math.round(this.fontSize);\n            this.createDefinition(0, 0, width - this.padding, false, this.fontSize);\n\n            this.nextTop = this.createAnswer(width, 0, width - this.padding, false, this.fontSize, disabled) + this.padding;\n\n            if (!this.hideSubmit) {\n                // Create and position the submit button\n                this.btnSubmit = this.createImageButton(\n                    this.body,\n                    'mmogame-quiz-submit',\n                    width + (width - this.iconSize) / 2,\n                    this.nextTop,\n                    0,\n                    this.iconSize,\n                    'assets/submit.svg',\n                    false,\n                    'submit'\n                );\n                this.btnSubmit.addEventListener('click', () => {\n                    this.sendAnswer();\n                });\n            }\n\n            // Adjust strip dimensions\n            this.stripLeft = width + this.padding;\n            this.stripWidth = 2 * this.iconSize;\n            this.stripHeight = this.iconSize;\n        }\n\n        createAnswer(left, top, width, onlyMetrics, fontSize, disabled) {\n            return this.createAnswerMultichoice(left, top, width, onlyMetrics, fontSize, disabled);\n        }\n\n        /**\n         * Creates multiple-choice answer options.\n         *\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} width - The maximum width available for answers.\n         * @param {boolean} onlyMetrics - Whether to only calculate size metrics.\n         * @param {number} fontSize - The font size for answer text.\n         * @param {boolean} disabled - Whether the answers are disabled.\n         * @returns {number} The total height used by the answer options.\n         */\n        createAnswerMultichoice(left, top, width, onlyMetrics, fontSize, disabled) {\n            const n = this.answers ? this.answers.length : 0;\n            const aChecked = this.answer?.split(\",\").filter(Boolean) || [];\n            const retSize = [0, 0];\n            const checkboxSize = Math.round(fontSize);\n            this.aItemAnswer = Array(n);\n            this.aItemLabel = Array(n);\n            this.aItemCorrectX = new Array(n);\n\n            // Iterate over each answer\n            for (let i = 0; i < n; i++) {\n                const label = document.createElement(\"label\");\n                label.style.position = \"absolute\";\n                label.style.width = `${width}px`;\n                label.style.fontSize = `${fontSize}px`;\n                label.style.color = this.getContrastingColor(this.colorBackground);\n                label.innerHTML = this.answers[i];\n                label.classList.add('mmogame-quiz-multichoice-label');\n\n                if (onlyMetrics) {\n                    this.area.appendChild(label);\n                    const newSize = label.scrollWidth + fontSize + this.padding;\n                    retSize[0] = Math.max(retSize[0], newSize);\n                    retSize[1] += Math.max(label.scrollHeight, fontSize) + this.padding;\n                    this.area.removeChild(label);\n                    continue;\n                }\n\n                label.htmlFor = \"mmogame_quiz_input\" + i;\n                label.style.left = (left + fontSize + this.padding) + \"px\";\n                label.style.top = top + \"px\";\n                label.style.align = \"left\";\n                label.style.color = this.getContrastingColor(this.colorBackground);\n\n                // Create the checkbox\n                const checked = aChecked.includes(this.answersID[i]);\n                const item = this.createRadiobox(this.body, checkboxSize, this.colorBackground2, this.colorScore,\n                    checked, disabled);\n                item.style.position = \"absolute\";\n                item.style.left = `${left}px`;\n                item.style.top = `${top}px`;\n                item.id = \"mmogame_quiz_input\" + i;\n\n                // Event listeners for interactions\n                item.addEventListener('click', () => {\n                    if (!item.classList.contains(\"disabled\")) {\n                        this.onClickRadio(i, this.colorBackground2, this.colorScore, true);\n                    }\n                });\n\n                label.addEventListener('click', () => {\n                    this.onClickRadio(i, this.colorBackground2, this.colorScore, true);\n                });\n\n                this.area.appendChild(item);\n                this.area.appendChild(label);\n\n                this.aItemAnswer[i] = item;\n                this.aItemCorrectX[i] = left + fontSize + this.padding;\n                this.aItemLabel[i] = label;\n\n                // Adjust positioning\n                top += Math.max(label.scrollHeight, fontSize) + this.padding;\n            }\n\n            return onlyMetrics ? retSize : top;\n        }\n\n        /**\n         * Handles radio button click events for answers.\n         *\n         * @param {number} index - The index of the clicked radio button.\n         * @param {string} colorBack - The background color for the radio button.\n         * @param {string} color - The color for the radio button when selected.\n         * @param {boolean} callSendAnswer - Whether to send the answer immediately.\n         */\n        onClickRadio(index, colorBack, color, callSendAnswer) {\n            if (this.aItemAnswer[index].classList.contains(\"disabled\")) {\n                return;\n            }\n\n            // Update the selected radio button and deselect others\n            this.aItemAnswer.forEach((item, i) => {\n                const isDisabled = item.classList.contains(\"disabled\");\n                if (i === index) {\n                    item.classList.add(\"checked\");\n                    this.answerid = this.answersID[i];\n                } else {\n                    item.classList.remove(\"checked\");\n                }\n\n                this.drawRadio(item, isDisabled ? colorBack : 0xFFFFFF, color);\n            });\n\n            // Send the answer if autosave is enabled\n            if (this.autosave && callSendAnswer) {\n                this.callSetAnswer();\n            }\n        }\n\n        sendTimeout() {\n            let xmlhttp = new XMLHttpRequest();\n            xmlhttp.onreadystatechange = () => {\n                if (this.readyState === 4 && this.status === 200) {\n                    this.sendGetAttempt();\n                }\n            };\n            xmlhttp.open(\"POST\", this.url, true);\n\n            xmlhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n            let data = JSON.stringify({\n                \"command\": \"timeout\", \"mmogameid\": this.mmogameid, \"pin\": this.pin, 'kinduser': this.kinduser,\n                \"user\": this.user, \"attempt\": this.attempt\n            });\n            xmlhttp.send(data);\n        }\n\n        /**\n         * Generates an SVG for a correct or incorrect icon.\n         *\n         * @param {number} size - The size of the SVG.\n         * @param {boolean} iscorrect - Whether the answer is correct.\n         * @param {int} colorCorrect - Color for correct answers.\n         * @param {int} colorError - Color for incorrect answers.\n         * @returns {string} The SVG markup as a string.\n         */\n        getSVGcorrect(size, iscorrect, colorCorrect, colorError) {\n            if (iscorrect) {\n                let c = colorCorrect !== undefined ? this.getColorHex(colorCorrect) : '#398439';\n                return \"<svg aria-hidden=\\\"true\\\" class=\\\"svg-icon iconCheckmarkLg\\\" width=\\\"\" + size + \"\\\" height=\\\"\" + size +\n                    \"\\\" viewBox=\\\"0 0 36 36\\\"><path fill=\\\"\" + c + \"\\\" d=\\\"m6 14 8 8L30 6v8L14 30l-8-8v-8z\\\"></path></svg>\";\n            } else {\n                let c = colorError !== undefined ? this.getColorHex(colorError) : '#398439';\n                return \"<svg width=\\\"\" + size + \"\\\" height=\\\"\" + size +\n                    \"\\\" class=\\\"bi bi-x-lg\\\" viewBox=\\\"0 0 18 18\\\"> <path fill=\\\"\" + c +\n                    `\" d=\"M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 \n                1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z\"/></svg>`;\n            }\n        }\n\n\n        /**\n         * Updates the screen to show the correctness of the user's answers.\n         */\n        updateScreenAfterAnswerMultichoice() {\n            const correctAnswers = this.correct.split(\",\"); // Split correct answer IDs into an array\n\n            for (let i = 0; i < this.answersID.length; i++) {\n                const label = this.aItemLabel[i];\n                const isChecked = this.aItemAnswer[i].classList.contains(\"checked\");\n                const isCorrect = correctAnswers.includes(this.answersID[i]);\n\n                // Skip answers that are neither checked nor correct\n                if (!isCorrect && !isChecked) {\n                    continue;\n                }\n\n                // Adjust label styling and add correct/incorrect icon\n                const labelWidth = label.scrollWidth - this.radioSize;\n                label.style.left = `${parseInt(label.style.left) + this.radioSize}px`;\n                label.style.width = `${labelWidth}px`;\n\n                if (isCorrect) {\n                    label.innerHTML = `<b>${label.innerHTML}</b>`;\n                }\n\n                const top = parseInt(this.aItemAnswer[i].style.top);\n                const feedbackDiv = this.createDiv(this.area, 'mmogame-quiz-correct',\n                    this.aItemCorrectX[i], top, this.radioSize, this.radioSize);\n                feedbackDiv.innerHTML = this.getSVGcorrect(this.radioSize, isCorrect, this.colorScore, this.colorScore);\n            }\n        }\n\n        /**\n         * Disables all answer inputs to prevent further interaction.\n         */\n        disableInput() {\n            if (!this.aItemAnswer) {\n                return;\n            }\n\n            for (const item of this.aItemAnswer) {\n                item.classList.add(\"disabled\"); // Add 'disabled' class to each input\n                this.drawRadio(item, this.colorScore, this.colorBackground2); // Update styling\n            }\n        }\n        /**\n         * Sends periodic fast JSON updates to the server.\n         */\n        sendFastJSON() {\n            // Clear existing timeout if any\n            if (this.timeoutFastJSON !== undefined) {\n                clearTimeout(this.timeoutFastJSON);\n            }\n\n            this.timeoutFastJSON = setTimeout(() => {\n                const xhr = new XMLHttpRequest();\n                xhr.onreadystatechange = () => {\n                    this.timeoutFastJSON = undefined;\n                    if (xhr.readyState === 4 && xhr.status === 200) {\n                        this.onServerFastJson(xhr.response);\n                    }\n                };\n\n                const url = `${this.url}/state.php`;\n                xhr.open(\"POST\", url, true);\n\n                const data = new FormData();\n                data.set('fastjson', this.fastjson);\n                data.set('type', this.type);\n\n                xhr.send(data); // Send the fast JSON data\n            }, this.timeForSendAnswer);\n        }\n\n\n        onClickHelp() {\n            if (this.helpUrl !== '') {\n                window.open(this.helpUrl, \"_blank\");\n            }\n        }\n\n        getStringT(name) {\n            return M.util.get_string(name, 'mmogametype_quiz');\n        }\n\n        /**\n         * Creates a percentage-based score display using createDOMElement.\n         *\n         * @param {string} prefixclassname\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} color\n         * @param {boolean} createAddScore\n         */\n        createDivScorePercent(prefixclassname, left, top, color, createAddScore) {\n            // Create the main button container\n            const main = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${prefixclassname}-main`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                    border: \"0px solid \" + this.getColorHex(0xFFFFFF),\n                    boxShadow: \"inset 0 0 0.125em rgba(255, 255, 255, 0.75)\",\n                    color: color,\n                },\n                attributes: {\n                    disabled: true,\n                    innerHTML: '',\n                },\n            });\n\n            // Create the main score label\n            const scoreLabel = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${prefixclassname}-score`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top + this.iconSize / 4}px`,\n                    width: `${this.iconSize / 2}px`,\n                    height: `${this.iconSize / 2}px`,\n                    lineHeight: `${this.iconSize / 2}px`,\n                    textAlign: 'center',\n                    color: this.getContrastingColor(this.colorScore),\n                },\n                attributes: {\n                    title: this.getStringM('js_grade'),\n                },\n            });\n\n            // Create the ranking grade label\n            const rankLabel = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${prefixclassname}-rank`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize / 2}px`,\n                    height: `${this.iconSize / 3}px`,\n                    textAlign: 'center',\n                    color: this.getContrastingColor(this.colorScore),\n                },\n                attributes: {\n                    title: this.getStringM('js_ranking_grade'),\n                },\n            });\n\n            // Create the percentage label\n            const percentLabel = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${prefixclassname}-percent`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left + this.iconSize / 2}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize / 2}px`,\n                    height: `${this.iconSize / 3}px`,\n                    textAlign: 'center',\n                    fontSize: `${this.iconSize / 3}px`,\n                    lineHeight: `${this.iconSize / 3}px`,\n                    color: rankLabel.style.color,\n                },\n                attributes: {\n                    title: this.getStringM('js_ranking_percent'),\n                },\n            });\n\n            // Create the additional score label\n            let addScoreLabel = null;\n            if (createAddScore) {\n                addScoreLabel = this.createDOMElement('div', {\n                    parent: this.body,\n                    classnames: `${prefixclassname}-addscore`,\n                    styles: {\n                        position: 'absolute',\n                        left: `${left + this.iconSize / 2}px`,\n                        top: `${top + this.iconSize - this.iconSize / 3}px`,\n                        width: `${this.iconSize / 2}px`,\n                        height: `${this.iconSize / 3}px`,\n                        textAlign: 'center',\n                        fontWeight: 'bold',\n                        color: color,\n                    },\n                    attributes: {\n                        title: this.getStringM('js_percent'),\n                    },\n                });\n            }\n\n            return {main, scoreLabel, rankLabel, percentLabel, addScoreLabel};\n        }\n\n        /**\n         * Creates and displays the definition area for the question.\n         *\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} width - The width of the definition area.\n         * @param {boolean} onlyMetrics - Whether to only measure size.\n         * @param {number} fontSize - The font size for the definition text.\n         * @returns {Array} The width and height of the definition area.\n         */\n        createDefinition(left, top, width, onlyMetrics, fontSize) {\n            width -= 2 * this.padding;\n\n            const definitionDiv = document.createElement(\"div\");\n            definitionDiv.style.position = \"absolute\";\n            definitionDiv.style.width = `${width}px`;\n            definitionDiv.style.fontSize = `${fontSize}px`;\n            definitionDiv.innerHTML = this.definition;\n\n            if (onlyMetrics) {\n                this.body.appendChild(definitionDiv);\n                const size = [definitionDiv.scrollWidth, definitionDiv.scrollHeight];\n                this.body.removeChild(definitionDiv);\n                return size;\n            }\n\n            // Apply styling and position\n            definitionDiv.style.background = this.getColorHex(this.colorBackground2);\n            definitionDiv.style.color = this.getContrastingColor(this.colorBackground2);\n            definitionDiv.style.left = `${left}px`;\n            definitionDiv.style.top = `${top}px`;\n            definitionDiv.style.paddingLeft = `${this.padding}px`;\n            definitionDiv.style.paddingRight = `${this.padding}px`;\n\n            this.area.appendChild(definitionDiv);\n\n            const height = definitionDiv.scrollHeight + this.padding;\n            definitionDiv.style.height = `${height}px`;\n\n            this.definitionHeight = height;\n            this.divDefinition = definitionDiv;\n\n            return [definitionDiv.scrollWidth, definitionDiv.scrollHeight];\n        }\n\n        /**\n         * Displays the current score and ranking on the screen.\n         *\n         * @param {Object} scoreData - The data containing score, rank, and percentages.\n         * @param {string} scoreData.addscore\n         * @param {int} scoreData.completedrank\n         * @param {int} scoreData.percentcompleted\n         * @param {int} scoreData.rank\n         * @param {int} scoreData.sumscore\n         * @param {string} scoreData.usercode\n         */\n        showScore({addscore, completedrank, percentcompleted, rank, sumscore, usercode}) {\n            // Update total score display\n            const scoreText = sumscore !== undefined ? `<b>${sumscore}</b>` : '';\n            if (this.labelScore.innerHTML !== scoreText) {\n                this.labelScore.innerHTML = scoreText;\n                this.autoResizeText(this.labelScore, this.iconSize - 2 * this.padding, this.iconSize / 2, false, 0, 0, 1);\n            }\n\n            // Update rank display\n            if (this.labelScoreRank.innerHTML !== rank) {\n                this.labelScoreRank.innerHTML = rank || '';\n                this.autoResizeText(this.labelScoreRank, this.iconSize, this.iconSize / 3, true, 0, 0, 1);\n            }\n\n            // Update document title if applicable\n            if (usercode !== undefined) {\n                document.title = `${usercode} ${name || ''}`;\n            }\n\n            // Update additional score\n            const addScoreText = addscore !== undefined ? addscore : '';\n            if (this.labelAddScore.innerHTML !== addScoreText) {\n                this.labelAddScore.innerHTML = addScoreText;\n                this.autoResizeText(this.labelAddScore, this.iconSize - 2 * this.padding, this.iconSize / 3, false, 0, 0, 1);\n            }\n\n            // Update completed rank display\n            if (this.labelScoreRankB.innerHTML !== completedrank) {\n                this.labelScoreRankB.innerHTML = completedrank || '';\n                this.autoResizeText(this.labelScoreRankB, 0.9 * this.iconSize / 2, this.iconSize / 3, true, 0, 0, 1);\n            }\n\n            // Update percentage completed\n            const percentageText = percentcompleted !== undefined ? `${Math.round(100 * percentcompleted)}%` : '';\n            if (this.labelScoreB.innerHTML !== percentageText) {\n                this.labelScoreB.innerHTML = percentageText;\n                this.autoResizeText(this.labelScoreB, 0.8 * this.iconSize / 2, this.iconSize / 3, true, 0, 0, 1);\n            }\n        }\n\n        /**\n         * Sends the selected answer to the server using Moodle's AJAX API.\n         */\n        callSetAnswer() {\n            // Clear existing timeout\n            if (this.timerTimeout !== undefined) {\n                clearTimeout(this.timerTimeout);\n            }\n\n            this.timerTimeout = undefined;\n\n            require(['core/ajax'], (Ajax) => {\n                const params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    attempt: this.attempt,\n                    answer: this.answer || null,\n                    answerid: this.answerid || null,\n                    subcommand: '',\n                };\n\n                Ajax.call([{\n                    methodname: 'mmogametype_quiz_set_answer', // API endpoint\n                    args: params,\n                }])[0].done((response) => {\n                    this.processSetAnswer(JSON.parse(response)); // Process the server's response\n                }).fail((error) => {\n                    this.showError(error); // Handle errors\n                });\n            });\n        }\n\n        /**\n         * Sets the colors for different UI elements and repairs them if necessary.\n         *\n         * @param {Array} colors - Array of color codes to be applied.\n         */\n        setColors(colors) {\n            super.setColors(colors);\n\n            // Assign specific colors to UI elements\n            this.colorScore = colors[2];\n            this.colorCopyright = colors[3];\n            this.colorScore2 = colors[4];\n        }\n    };\n    });"],"names":["define","MmoGameUI","kinduser","user","url","pin","labelTimer","timeForSendAnswer","divDefinition","definitionHeight","constructor","super","this","hideSubmit","openGame","audioYes","Audio","load","audioNo","updateLabelTimer","timeclose","now","Date","remainingTime","Math","max","innerHTML","onTimeout","minutes","floor","seconds","String","padStart","timerTimeout","setTimeout","disableInput","sendTimeout","createScreen","json","disabled","createArea","endofgame","createDivMessage","getStringM","showScore","vertical","createScreenVertical","createScreenHorizontal","nickNameHeight","round","iconSize","padding","maxHeight","areaHeight","maxWidth","areaWidth","fontSize","findbest","minFontSize","maxFontSize","defSize","createDefinition","ansSize","createAnswer","radioSize","nextTop","space","btnSubmit","createImageButton","area","addEventListener","removeChild","undefined","sendAnswer","stripLeft","stripWidth","stripHeight","width","step","body","left","top","onlyMetrics","createAnswerMultichoice","n","answers","length","aChecked","answer","split","filter","Boolean","retSize","checkboxSize","aItemAnswer","Array","aItemLabel","aItemCorrectX","i","label","document","createElement","style","position","color","getContrastingColor","colorBackground","classList","add","appendChild","newSize","scrollWidth","scrollHeight","htmlFor","align","checked","includes","answersID","item","createRadiobox","colorBackground2","colorScore","id","contains","onClickRadio","index","colorBack","callSendAnswer","forEach","isDisabled","answerid","remove","drawRadio","autosave","callSetAnswer","xmlhttp","XMLHttpRequest","onreadystatechange","readyState","status","sendGetAttempt","open","setRequestHeader","data","JSON","stringify","command","mmogameid","attempt","send","getSVGcorrect","size","iscorrect","colorCorrect","colorError","getColorHex","updateScreenAfterAnswerMultichoice","correctAnswers","correct","isChecked","isCorrect","labelWidth","parseInt","createDiv","sendFastJSON","timeoutFastJSON","clearTimeout","xhr","onServerFastJson","response","FormData","set","fastjson","type","onClickHelp","helpUrl","window","getStringT","name","M","util","get_string","createDivScorePercent","prefixclassname","createAddScore","main","createDOMElement","parent","classnames","styles","height","border","boxShadow","attributes","scoreLabel","lineHeight","textAlign","title","rankLabel","percentLabel","addScoreLabel","fontWeight","definitionDiv","definition","background","paddingLeft","paddingRight","_ref","addscore","completedrank","percentcompleted","rank","sumscore","usercode","scoreText","labelScore","autoResizeText","labelScoreRank","addScoreText","labelAddScore","labelScoreRankB","percentageText","labelScoreB","require","Ajax","params","subcommand","call","methodname","args","done","processSetAnswer","parse","fail","error","showError","setColors","colors","colorCopyright","colorScore2"],"mappings":"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"}