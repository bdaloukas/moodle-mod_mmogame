{"version":3,"file":"mmogameui.min.js","sources":["../src/mmogameui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mod_mmogame/mmogame'], function(MmoGame) {\n    return class MmoGameUI extends MmoGame {\n\n        isVertical;\n        kindSound; // Type: Number (0 = on, 1 = off, 2 = speak)\n        buttonSound;\n        colorBackground2;\n\n        // Other\n        nickname;\n        user;\n        paletteid;\n        avatarid;\n        iconSize;\n        padding;\n\n        // Area\n        area;\n        areaRect;\n\n        // Form fields\n        edtNickname;\n\n        // Gate variables\n        mmogameid;\n\n        constructor() {\n            super();\n            this.isVertical = window.innerWidth < window.innerHeight;\n            this.area = undefined;\n        }\n\n        /**\n         * Returns the appropriate file for mute/unmute.\n         * @returns {string} The file path.\n         */\n        getMuteFile() {\n            return this.kindSound === 0 ? 'assets/sound-on-flat.png' : 'assets/sound-off-flat.png';\n        }\n\n        /**\n         * Plays a sound file if sound is enabled.\n         *\n         * @param {HTMLAudioElement} audioElement - The audio element to play.\n         */\n        playAudio(audioElement) {\n            if (this.kindSound !== 0 && audioElement) {\n                if (audioElement.readyState >= 2) { // Βεβαιωθείτε ότι ο ήχος έχει φορτωθεί\n                    audioElement.play().catch(error => {\n                        this.showError(\"Playback failed:\", error);\n                    });\n                } else {\n                    this.showError(\"Audio not ready yet.\");\n                }\n            }\n        }\n\n        createButtonSound(left, top) {\n            this.buttonSound = this.createDOMElement('img', {\n                parent: this.body,\n                classnames: 'mmogame-button-sound',\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                },\n                attributes: {\n                    src: this.getMuteFile(),\n                    alt: this.getStringM('js_sound'),\n                    role: 'button',\n                },\n            });\n            this.buttonSound.addEventListener(\"click\", () => this.onClickSound(this.buttonSound));\n        }\n\n        /**\n         * Toggles sound on or off when clicked.\n         * @param {HTMLElement} button - The sound toggle button.\n         */\n        onClickSound(button) {\n            this.kindSound = (this.kindSound + 1) % 2;\n            button.src = this.getMuteFile();\n            this.setOptions({kindSound: this.kindSound});\n        }\n\n        /**\n         * Opens the gate UI, computes sizes, and initializes settings based on the user type.\n         * @param {number} mmogameid - The game ID.\n         * @param {string} pin - The game PIN.\n         * @param {string} kinduser - The type of user (e.g., \"moodle\" or \"guid\").\n         * @param {string} user - The user identifier.\n         * @param {string} url - The game URL.\n         */\n        gateOpen(mmogameid, pin, kinduser, user, url) {\n            const instance = this;\n\n            try {\n                // Initialize class variables\n                this.url = url;\n                this.mmogameid = mmogameid;\n                this.pin = pin;\n                this.kinduser = kinduser;\n                instance.user = user;\n\n                // Load options and initialize UI\n                this.getOptions()\n                    .then((options) => {\n                        // Set default options if undefined\n                        options.kindsound = options.kindsound || 0;\n                        options.nickname = options.nickname || '';\n                        options.avatarid = options.avatarid || 0;\n                        options.paletteid = options.paletteid || 0;\n\n                        // Assign kindSound within valid range\n                        this.kindSound = [1, 2].includes(options.kindSound) ? options.kindSound : 0;\n\n                        const isReady = options.nickname && options.avatarid && options.paletteid;\n\n                        if (kinduser === 'moodle' && isReady) {\n                            this.gatePlayGame(false, options.nickname, options.paletteid, options.avatarid);\n                        } else if (kinduser === 'guid') {\n                            options.userGUID = options.userGUID || '';\n\n                            if (options.userGUID.length >= 10 && isReady) {\n                                instance.user = options.userGUID;\n                                this.gatePlayGame(false, options.nickname, options.paletteid, options.avatarid);\n                            } else {\n                                this.gateCreateScreen();\n                            }\n                        } else {\n                            this.gateCreateScreen();\n                        }\n\n                        return true;\n                    })\n                    .catch((error) => {\n                        this.showError('gateOpen unexpected', error);\n                    });\n            } catch (error) {\n               this.showError('gateOpen', error);\n            }\n        }\n\n        gatePlayGame(save, nickname, paletteid, avatarid) {\n            let instance = this;\n\n            if (instance.kinduser === 'guid' && instance.user === '') {\n                this.uuid4();\n            }\n\n            if (!save) {\n                instance.nickname = nickname;\n                instance.paletteid = paletteid;\n                instance.avatarid = avatarid;\n                instance.callGetAttempt({nickname: nickname, colorpaletteid: paletteid, avatarid: avatarid});\n                return;\n            }\n\n            let options = {nickname: nickname, avatarid: avatarid, paletteid: paletteid};\n\n            this.setOptions(options)\n                .then(() => {\n                    return true;\n                })\n                .catch(error => {\n                    this.showError(error.message);\n                    return false;\n                });\n\n            this.nickname = nickname;\n            this.paletteid = paletteid;\n            this.avatarid = avatarid;\n            this.callGetAttempt();\n        }\n\n        gateCreateScreen() {\n            this.gateCompute();\n\n            let maxHeight = this.areaRect.height - 5 * this.padding - this.iconSize;\n            let maxWidth = this.areaRect.width;\n            let size;\n\n            const labels = [\n                `${this.getStringM('js_name')}: `,\n                this.getStringM('js_code'),\n                this.getStringM('js_palette')\n            ];\n\n            this.fontSize = this.findbest(this.minFontSize, this.maxFontSize, (fontSize) => {\n                size = this.gateComputeLabelSize(fontSize, labels);\n\n                if (size[0] >= maxWidth) {\n                    return 1;\n                }\n\n                const heightColors = (maxHeight - 4 * fontSize) * 2 / 5;\n                let n = Math.floor(heightColors / this.iconSize);\n                if (n === 0) {\n                    return 1;\n                }\n                const heightAvatars = (maxHeight - 4 * fontSize + heightColors) * 3 / 5;\n                const computedHeight = 3 * size[1] + 8 * this.padding + heightColors + heightAvatars;\n\n                return computedHeight < maxHeight ? -1 : 1;\n            });\n\n            this.gateCreateScreenDo(maxWidth, maxHeight);\n        }\n\n        gateCreateScreenDo(maxWidth, maxHeight) {\n            const instance = this;\n\n            let top = this.gateCreateNickName(0, maxWidth) + this.padding;\n            this.edtNickname.focus();\n            // Creates the \"nickname\" field.\n\n            // Palette\n            const [lblPalette, btnPalette] = instance.gateCreateLabelRefresh(top, instance.getStringM('js_palette'),\n                'mmogame-gate-palette-label', 'mmogame-gate-palette-refresh', 'assets/refresh.svg');\n            top += lblPalette.scrollHeight + instance.padding;\n            const topGridPalette = top;\n            let gridHeightPalette = (maxHeight - topGridPalette - lblPalette.scrollHeight) * 2 / 5;\n            const countX = Math.floor((maxWidth - this.padding) / this.iconSize);\n            const countYpalette = Math.floor(gridHeightPalette / this.iconSize);\n            gridHeightPalette = countYpalette * instance.iconSize;\n            top += gridHeightPalette + this.padding;\n            // Label Avatars\n            const [lblAvatars, btnAvatars] = instance.gateCreateLabelRefresh(top, instance.getStringM('js_avatars'),\n                'mmogame-gate-avatars-label', 'mmogame-gate-avatars-refresh', 'assets/refresh.svg');\n\n            top += lblAvatars.scrollHeight + instance.padding;\n\n            const countYavatars = Math.floor(Math.floor(maxHeight - top - this.padding) / this.iconSize);\n            const gridHeightAvatars = countYavatars * this.iconSize;\n\n            instance.addEventListenerRefresh(btnPalette, topGridPalette, countX, countYpalette,\n                top, countX, countYavatars, true, false);\n\n            instance.addEventListenerRefresh(btnAvatars, topGridPalette, countX, countYpalette,\n                top, countX, countYavatars, false, true);\n\n            // Horizontal\n            instance.gateSendGetColorsAvatars(0, topGridPalette, countX, countYpalette,\n                0, top, countX, countYavatars, true, true);\n\n            this.gateCreateSubmit(top + gridHeightAvatars + 2 * this.padding, maxWidth);\n        }\n\n        gateCreateNickName(top, maxWidth) {\n            const lblNickName = this.createDOMElement('label', {\n                parent: this.area,\n                classnames: 'mmogame-gate-name-label',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: '0',\n                    top: `${top}px`,\n                    width: '0',\n                    color: this.getContrastingColor(this.colorBackground),\n                },\n            });\n            lblNickName.innerHTML = this.getStringM('js_name') + \": \";\n\n            if (this.isVertical) {\n                top += lblNickName.scrollHeight + this.padding;\n            }\n\n            const leftEdit = this.isVertical ? 0 : lblNickName.scrollWidth + this.padding;\n            const width = this.isVertical ? maxWidth : maxWidth - 2 * this.padding;\n            this.edtNickname = this.createDOMElement('input', {\n                parent: this.area,\n                classnames: 'mmogame-gate-name',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${leftEdit}px`,\n                    top: `${top}px`,\n                    width: `${width - leftEdit - this.padding}px`\n                },\n            });\n            this.edtNickname.addEventListener(\"keyup\", this.debounce(() => this.gateUpdateSubmit(), 300));\n            top += this.padding + (this.isVertical ? this.fontSize : Math.max(lblNickName.scrollHeight, this.fontSize));\n\n            return top;\n        }\n\n        gateCreateSubmit(top, maxWidth) {\n           this.btnSubmit = this.createDOMElement('img', {\n                parent: this.area,\n                classnames: 'mmogame-button-gate-submit',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${(maxWidth - this.iconSize) / 2}px`,\n                    top: `${top}px`,\n                    height: `${this.iconSize}px`,\n                    color: this.getContrastingColor(this.colorBackground),\n                    cursor: 'pointer',\n                    visibility: 'hidden',\n                },\n                attributes: {\n                    src: 'assets/submit.svg',\n                }\n            });\n            this.btnSubmit.addEventListener(\"click\", () => {\n                this.gatePlayGame(true, this.edtNickname.value, this.paletteid, this.avatarid);\n            });\n        }\n\n        gateComputeLabelSize(fontSize, aLabel) {\n            const instance = this;\n            let maxWidth = 0;\n            let maxHeight = 0;\n\n            for (let i = 0; i < aLabel.length; i++) {\n                const label = document.createElement(\"label\");\n                label.style.position = \"absolute\";\n                label.innerHTML = aLabel[i];\n                label.style.whiteSpace = \"nowrap\";\n                label.style.font = \"FontAwesome\";\n                label.style.fontSize = fontSize + \"px\";\n                label.style.width = \"0px\";\n                label.style.height = \"0px\";\n                instance.area.appendChild(label);\n\n                if (label.scrollWidth > maxWidth) {\n                    maxWidth = label.scrollWidth;\n                }\n\n                if (label.scrollHeight > maxHeight) {\n                    maxHeight = label.scrollHeight;\n                }\n                instance.area.removeChild(label);\n            }\n\n            return [maxWidth, maxHeight];\n        }\n\n        gateShowAvatars(left, top, countX, countY, avatarids, avatars) {\n            const instance = this;\n            if (!avatars || avatars.length === 0) {\n                return; // Exit early if no avatars exist\n            }\n\n            // Delete all previous avatar icons.\n            const elements = document.querySelectorAll('.mmogame-avatar');\n            elements.forEach(element => element.remove());\n\n            const fragment = document.createDocumentFragment();\n\n            instance.avatar = undefined;\n            const count = avatars.length;\n            let leftOriginal = left;\n            let w = Math.round(this.padding / 2) + \"px\";\n            for (let i = 0; i < count; i++) {\n                let avatarImagePath = 'assets/avatars/' + avatars[i];\n                let btn = instance.createCenterImageButton(\n                    fragment,\n                    left, top,\n                    instance.iconSize - instance.padding, instance.iconSize - instance.padding,\n                    'mmogame-avatar',\n                    avatarImagePath\n                );\n                btn.classList.add(\"mmogame-avatar\");\n                let id = avatarids[i];\n                btn.addEventListener(\"click\", () => {\n                    instance.gateUpdateAvatar(btn, id, w);\n                });\n\n                // Move left position after placing the button\n                left += instance.iconSize;\n\n                // Reset left and move to the next row after filling countX buttons\n                if ((i + 1) % countX === 0) {\n                    top += instance.iconSize;\n                    left = leftOriginal;\n                }\n            }\n            instance.area.appendChild(fragment);\n        }\n\n        gateSendGetColorsAvatars(leftPalette, topPalette, countXpalette, countYpalette,\n                                 leftAvatars, topAvatars, countXavatars, countYavatars,\n                                 updatePalette = true, updateAvatars = true) {\n            const instance = this;\n\n            require(['core/ajax'], (Ajax) => {\n                // Defining the parameters to be passed to the service\n                let params = {\n                    mmogameid: instance.mmogameid,\n                    kinduser: instance.kinduser,\n                    user: instance.user,\n                    avatars: updateAvatars ? countXavatars * countYavatars : 0,\n                    colorpalettes: updatePalette ? countXpalette * countYpalette : 0,\n                };\n                // Calling the service through the Moodle AJAX API\n                let getAssets = Ajax.call([{\n                    methodname: 'mod_mmogame_get_assets',\n                    args: params\n                }]);\n\n                // Handling the response\n                getAssets[0].done(({avatarids, avatars, colorpaletteids, colorpalettes}) => {\n                    if (updatePalette) {\n                        instance.gateShowColorPalettes(leftPalette, topPalette, countXpalette, countYpalette,\n                            colorpaletteids, colorpalettes);\n                    }\n                    if (updateAvatars) {\n                        instance.gateShowAvatars(leftAvatars, topAvatars, countXavatars, countYavatars,\n                            avatarids, avatars);\n                    }\n                }).fail((error) => {\n                    return error;\n                });\n            });\n        }\n\n        gateShowColorPalettes(left, top, countX, countY, colorpaletteids, colorpalettes) {\n            const instance = this;\n            let i = 0; // Counter for color palettes\n            const count = colorpalettes.length;\n            this.canvasColor = undefined;\n            const canvasSize = instance.iconSize - instance.padding * 3 / 2;\n            const parsedPalettes = colorpalettes.map(palette =>\n                palette.split(\",\").map(value => parseInt(value, 10) || 0)\n            );\n            const fragment = document.createDocumentFragment();\n            for (let iy = 0; iy < countY; iy++) {\n                for (let ix = 0; ix < countX; ix++) {\n                    // Check if we exceed available palettes or encounter invalid data\n                    if (i >= count || !parsedPalettes[i] || !colorpaletteids[i]) {\n                        i++; // Increment and continue if invalid\n                        continue;\n                    }\n\n                    // Create a new canvas element\n                    let canvas = document.createElement('canvas');\n                    canvas.style.position = \"absolute\";\n                    canvas.style.left = `${left + ix * instance.iconSize}px`;\n                    canvas.style.top = `${top + iy * instance.iconSize}px`;\n                    canvas.width = canvasSize;\n                    canvas.height = canvasSize;\n                    canvas.style.cursor = 'pointer';\n                    canvas.classList.add(\"mmogame_color\");\n\n                    // Append canvas to the area\n                    fragment.appendChild(canvas);\n\n                    // Render the color palette on the canvas\n                    instance.showColorPalette(canvas, parsedPalettes[i]);\n\n                    // Get the palette ID and attach a click event listener\n                    let id = colorpaletteids[i];\n                    canvas.addEventListener(\"click\", () => {\n                        instance.gateUpdateColorPalette(canvas, id);\n                    });\n\n                    i++;\n                }\n            }\n            instance.area.appendChild(fragment);\n        }\n\n        gateUpdateColorPalette(canvas, id) {\n            if (this.canvasColor !== undefined) {\n                this.canvasColor.style.borderStyle = \"none\";\n            }\n            this.canvasColor = canvas;\n            let w = Math.round(this.padding / 2) + \"px\";\n\n            Object.assign(canvas.style, {\n                borderStyle: \"outset\",\n                borderLeftWidth: w,\n                borderTopWidth: w,\n                borderRightWidth: w,\n                borderBottomWidth: w,\n            });\n            this.paletteid = id;\n\n            this.gateUpdateSubmit();\n        }\n\n        gateUpdateAvatar(avatar, id, w) {\n            const instance = this;\n\n            if (instance.avatar !== undefined) {\n                instance.avatar.style.borderStyle = \"none\";\n            }\n            instance.avatar = avatar;\n            avatar.style.borderStyle = \"outset\";\n\n            avatar.style.borderLeftWidth = w;\n            avatar.style.borderTopWidth = w;\n            avatar.style.borderRightWidth = w;\n            avatar.style.borderBottomWidth = w;\n\n            instance.avatarid = id;\n\n            instance.gateUpdateSubmit();\n        }\n\n        /**\n         * Updates the visibility of the submit button based on form input validation.\n         */\n        gateUpdateSubmit() {\n            const hasAvatar = this.avatarid !== undefined;\n            const hasPalette = this.paletteid !== undefined;\n            const hasNickname = this.edtNickname?.value?.length > 0;\n\n            this.btnSubmit.style.visibility = hasAvatar && hasPalette && hasNickname ? 'visible' : 'hidden';\n        }\n\n        gateComputeSizes() {\n            const instance = this;\n\n            instance.computeSizes();\n            instance.iconSize = Math.round(0.8 * instance.iconSize);\n            instance.padding = Math.round(0.8 * instance.padding);\n        }\n\n        /**\n         * Creates the screen palette UI with a label and a refresh button.\n         * @param {number} top - The vertical position for the elements.\n         * @param {string} title\n         * @param {string} classLabel\n         * @param {string} classButton\n         * @param {string} src\n         */\n        gateCreateLabelRefresh(top, title, classLabel, classButton, src) {\n            // Create and configure the label\n            const label = this.createDOMElement('label', {\n                parent: this.area,\n                classnames: classLabel,\n                styles: {\n                    position: 'absolute',\n                    font: 'FontAwesome',\n                    fontSize: `${this.fontSize}px`,\n                    width: '0px',\n                    whiteSpace: 'nowrap',\n                    color: this.getContrastingColor(this.colorBackground),\n                    top: `${top}px`,\n                    left: '0px',\n                },\n            });\n            label.innerHTML = title;\n\n            // Button refresh color palettes\n            let button = this.createDOMElement('img', {\n                parent: this.area,\n                classnames: classButton,\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${label.scrollWidth + this.padding}px`,\n                    top: `${top}px`,\n                    height: `${label.scrollHeight}px`,\n                    color: this.getContrastingColor(this.colorBackground),\n                    cursor: 'pointer',\n                },\n                attributes: {\n                    src: src,\n                }\n            });\n\n            return [label, button];\n        }\n\n        /**\n         * Adds an event listener to refresh colors and avatars.\n         *\n         * @param {HTMLElement} btn - The button to attach the event listener to.\n         * @param {number} topPalette - The Y-coordinate offset for grid positioning.\n         * @param {number} countXpalette - Width of the color grid.\n         * @param {number} countYpalette - Height of the color grid.\n         * @param {number} topAvatars - The Y-coordinate offset for grid positioning.\n         * @param {number} countXavatars - Width of the avatar grid.\n         * @param {number} countYavatars - Height of the avatar grid.\n         * @param {boolean} updateColors - Callback to update colors.\n         * @param {boolean} updateAvatars - Callback to update avatars.\n         */\n        addEventListenerRefresh(btn, topPalette, countXpalette, countYpalette, topAvatars,\n                                countXavatars, countYavatars, updateColors, updateAvatars) {\n            btn.addEventListener(\"click\", () => {\n                const elements = Array.from(this.area.getElementsByClassName(\"mmogame-color\"));\n                elements.forEach(element => element.remove());\n\n                this.gateSendGetColorsAvatars(0, topPalette, countXpalette, countYpalette,\n                    0, topAvatars, countXavatars, countYavatars,\n                    updateColors, updateAvatars);\n            });\n        }\n\n        /**\n         * Creates the main game area.\n         */\n\n        createArea(top) {\n            if (this.area !== undefined) {\n                this.body.removeChild(this.area);\n            }\n\n            this.area = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: 'mmogame-area',\n                styles: {\n                    position: 'absolute',\n                    left: `${this.padding}px`,\n                    top: `${top}px`,\n                    right: `${this.padding}px`,\n                    bottom: `${this.padding}px`,\n                    overflow: 'hidden',\n                }\n            });\n\n            this.areaRect = {\n                left: this.padding,\n                top: top,\n                width: this.area.offsetWidth,\n                height: this.area.offsetHeight,\n            };\n        }\n\n        createDivMessage(classnames, message) {\n            const instance = this;\n\n            if (instance.area !== undefined) {\n                instance.body.removeChild(instance.area);\n                instance.area = undefined;\n            }\n\n            if (instance.divMessageHelp !== undefined) {\n                instance.body.removeChild(instance.divMessageHelp);\n                instance.divMessageHelp = undefined;\n            }\n\n            let left = instance.padding;\n            let top = instance.areaRect !== undefined ? instance.areaRect.top : 0;\n            let width = window.innerWidth - 2 * instance.padding;\n            let height = window.innerHeight - instance.padding - top;\n\n            instance.createDivMessageDo(classnames, left, top, width, height, message, height);\n\n            instance.divMessage.style.top = (height - instance.divMessage.scrollHeight) / 2 + \"px\";\n        }\n\n        createNicknameAvatar(prefixclassname, left, topNickname, widthNickname, heightNickname, topAvatar, widthAvatar) {\n            const nickname = this.createDOMElement('div', {\n                parent: this.body,\n                classname: `${prefixclassname}-nickname`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${topNickname}px`,\n                    width: `${widthNickname}px`,\n                }\n            });\n\n            let leftAvatar = Math.round(left + this.iconSize / 2);\n            const avatar = this.createDOMElement('img', {\n                classname: `${prefixclassname}-avatar`,\n                parent: this.body,\n                styles: {\n                    position: 'absolute',\n                    left: `${leftAvatar}px`,\n                    top: `${topAvatar}px`,\n                    height: `${widthAvatar}px`,\n                    maxWidth: `${widthAvatar}px`,\n                    transform: 'translateX(-50%)',\n                }\n            });\n\n            return [nickname, avatar];\n        }\n\n\n        createDivMessageStart(message) {\n            const instance = this;\n\n            if (instance.area !== undefined) {\n                instance.body.removeChild(instance.area);\n                instance.area = undefined;\n            }\n\n            let left = instance.padding;\n            let top = instance.areaRect.top;\n            let width = window.innerWidth - 2 * instance.padding;\n            let height = window.innerHeight - instance.padding - top;\n\n            let height1 = height / 8;\n\n            instance.createDivMessageDo('mmogame-message-start', left, top, width, height, message, height1);\n\n            top += (height1 - instance.divMessage.scrollHeight) / 2;\n            instance.divMessage.style.top = top + \"px\";\n\n            if (instance.divMessageHelp === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"left\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.color = instance.getContrastingColor(this.colorBackground2);\n                let top = instance.iconSize + 3 * instance.padding + height1;\n                div.style.top = (top + instance.padding) + \"px\";\n                div.style.height = (height - height1) + \"px\";\n                instance.divMessageHelp = div;\n                instance.body.appendChild(instance.divMessageHelp);\n\n                instance.showHelpScreen(div, (width - 2 * instance.padding), (height - height1));\n            }\n        }\n\n        /**\n         * Calls the Moodle Web Service 'mmogametype_quiz_get_attempt' and processes the response.\n         *\n         * @param {Object} extraparams - Additional parameters to override default ones.\n         */\n        callGetAttempt(extraparams = undefined) {\n            require(['core/ajax'], (Ajax) => {\n                let params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    nickname: null,\n                    colorpaletteid: null,\n                    avatarid: null,\n                };\n                if (extraparams !== undefined) {\n                    params = {...params, ...extraparams};\n                }\n                // Calling the service through the Moodle AJAX API\n                let getAttempt = Ajax.call([{\n                    methodname: 'mmogametype_quiz_get_attempt',\n                    args: params,\n                }]);\n\n                // Handling the response\n                getAttempt[0].done((response) => {\n                    if (extraparams !== undefined && extraparams.colorpaletteid !== undefined) {\n                        this.openGame();\n                        this.colors = undefined;\n                    }\n                    this.processGetAttempt(JSON.parse(response));\n                }).fail((error) => {\n                    this.createDivMessage('mmogame-error', error.message);\n                    return error;\n                });\n            });\n        }\n\n        createDivMessageDo(classnames, left, top, width, height, message, heightmessage) {\n            if (this.divMessageBackground === undefined) {\n                let div = this.createDiv(this.body, classnames, left, top, width, height);\n                div.style.background = this.getColorHex(this.colorBackground2);\n                this.divMessageBackground = div;\n            }\n\n            if (this.divMessage === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"center\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.background = this.getColorHex(this.colorBackground2);\n                div.style.color = this.getContrastingColor(this.colorBackground2);\n                this.divMessage = div;\n            }\n            this.divMessage.innerHTML = message;\n            this.body.appendChild(this.divMessage);\n            this.autoResizeText(this.divMessage, width, heightmessage, false, this.minFontSize, this.maxFontSize, 0.5);\n        }\n\n        setColors(colors) {\n            super.setColors(colors);\n\n            this.colorBackground2 = colors[1];\n        }\n\n        /**\n         * Displays an error message on the screen.\n         * @param {string} name - The name of the error context.\n         * @param {Error} [error] - The error object to display.\n         */\n        showError(name, error) {\n            const message = error?.message || 'An unknown error occurred.';\n            this.createDivMessage('mmogame-error', message);\n        }\n\n        createButtonHelp(left, top) {\n            return this.createDOMElement('img', {\n                parent: this.body,\n                classnames: 'mmogame-button-help',\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                },\n                attributes: {\n                    src: 'assets/help.svg',\n                    alt: this.getStringM('js_help'),\n                    role: 'button',\n                },\n            });\n        }\n\n        onClickHelp() {\n            this.createDivMessageStart('test');\n        }\n\n        gateCompute() {\n            // Adjust font sizes\n            this.minFontSize *= 2;\n            this.maxFontSize *= 2;\n\n            // Compute sizes and layout\n            this.gateComputeSizes();\n            this.createArea(this.padding);\n        }\n    };\n});"],"names":["define","MmoGame","isVertical","kindSound","buttonSound","colorBackground2","nickname","user","paletteid","avatarid","iconSize","padding","area","areaRect","edtNickname","mmogameid","constructor","super","this","window","innerWidth","innerHeight","undefined","getMuteFile","playAudio","audioElement","readyState","play","catch","error","showError","createButtonSound","left","top","createDOMElement","parent","body","classnames","styles","position","width","height","attributes","src","alt","getStringM","role","addEventListener","onClickSound","button","setOptions","gateOpen","pin","kinduser","url","instance","getOptions","then","options","kindsound","includes","isReady","gatePlayGame","userGUID","length","gateCreateScreen","save","uuid4","callGetAttempt","colorpaletteid","message","gateCompute","size","maxHeight","maxWidth","labels","fontSize","findbest","minFontSize","maxFontSize","gateComputeLabelSize","heightColors","Math","floor","heightAvatars","gateCreateScreenDo","gateCreateNickName","focus","lblPalette","btnPalette","gateCreateLabelRefresh","scrollHeight","topGridPalette","gridHeightPalette","countX","countYpalette","lblAvatars","btnAvatars","countYavatars","gridHeightAvatars","addEventListenerRefresh","gateSendGetColorsAvatars","gateCreateSubmit","lblNickName","color","getContrastingColor","colorBackground","innerHTML","leftEdit","scrollWidth","debounce","gateUpdateSubmit","max","btnSubmit","cursor","visibility","value","aLabel","i","label","document","createElement","style","whiteSpace","font","appendChild","removeChild","gateShowAvatars","countY","avatarids","avatars","querySelectorAll","forEach","element","remove","fragment","createDocumentFragment","avatar","count","leftOriginal","w","round","avatarImagePath","btn","createCenterImageButton","classList","add","id","gateUpdateAvatar","leftPalette","topPalette","countXpalette","leftAvatars","topAvatars","countXavatars","updatePalette","arguments","updateAvatars","require","Ajax","params","colorpalettes","call","methodname","args","done","_ref","colorpaletteids","gateShowColorPalettes","fail","canvasColor","canvasSize","parsedPalettes","map","palette","split","parseInt","iy","ix","canvas","showColorPalette","gateUpdateColorPalette","borderStyle","Object","assign","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","hasAvatar","hasPalette","hasNickname","gateComputeSizes","computeSizes","title","classLabel","classButton","updateColors","Array","from","getElementsByClassName","createArea","right","bottom","overflow","offsetWidth","offsetHeight","createDivMessage","divMessageHelp","createDivMessageDo","divMessage","createNicknameAvatar","prefixclassname","topNickname","widthNickname","heightNickname","topAvatar","widthAvatar","classname","leftAvatar","transform","createDivMessageStart","height1","div","textAlign","paddingLeft","paddingRight","showHelpScreen","extraparams","response","openGame","colors","processGetAttempt","JSON","parse","heightmessage","divMessageBackground","createDiv","background","getColorHex","autoResizeText","setColors","name","createButtonHelp","onClickHelp"],"mappings":"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"}