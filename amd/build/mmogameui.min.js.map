{"version":3,"file":"mmogameui.min.js","sources":["../src/mmogameui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mod_mmogame/mmogame'], function(MmoGame) {\n    return class MmoGameUI extends MmoGame {\n\n        isVertical;\n        kindSound; // Type: Number (0 = on, 1 = off, 2 = speak)\n        buttonSound;\n        colorBackground2;\n\n        // Other\n        nickname;\n        user;\n        paletteid;\n        avatarid;\n        iconSize;\n        padding;\n\n        // Area\n        area;\n        areaRect;\n\n        // Form fields\n        edtNickname;\n\n        // Gate variables\n        mmogameid;\n\n        // Messages\n        divMessage;\n        divMessageHelp;\n        divMessageBackground;\n\n        constructor() {\n            super();\n            this.isVertical = window.innerWidth < window.innerHeight;\n            this.area = undefined;\n        }\n\n        /**\n         * Returns the appropriate file for mute/unmute.\n         * @returns {string} The file path.\n         */\n        getMuteFile() {\n            return this.kindSound === 0 ? 'assets/sound-on-flat.png' : 'assets/sound-off-flat.png';\n        }\n\n        /**\n         * Plays a sound file if sound is enabled.\n         *\n         * @param {HTMLAudioElement} audioElement - The audio element to play.\n         */\n        async playAudio(audioElement) {\n            if (this.kindSound !== 0 && audioElement) {\n                try {\n                    await audioElement.play();\n                } catch (error) {\n                    this.showError(\"Playback failed:\", error);\n                }\n            }\n        }\n\n        createButtonSound(parent, left, top) {\n            this.buttonSound = this.createDOMElement('img', {\n                parent: parent,\n                classnames: 'mmogame-button-sound',\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                },\n                attributes: {\n                    src: this.getMuteFile(),\n                    alt: this.getStringM('js_sound'),\n                    role: 'button',\n                },\n            });\n            this.buttonSound.addEventListener(\"click\", () => this.onClickSound(this.buttonSound));\n        }\n\n        /**\n         * Toggles sound on or off when clicked.\n         * @param {HTMLElement} button - The sound toggle button.\n         */\n        onClickSound(button) {\n            this.kindSound = (this.kindSound + 1) % 2;\n            button.src = this.getMuteFile();\n            this.setOption('kindSound', {value: this.kindSound});\n        }\n\n        /**\n         * Opens the gate UI, computes sizes, and initializes settings based on the user type.\n         * @param {number} mmogameid - The game ID.\n         * @param {string} pin - The game PIN.\n         * @param {string} kinduser - The type of user (e.g., \"moodle\" or \"guid\").\n         * @param {string} user - The user identifier.\n         * @param {string} url - The game URL.\n         */\n        async gateOpen(mmogameid, pin, kinduser, user, url) {\n            this.url = url;\n            this.mmogameid = mmogameid;\n            this.pin = pin;\n            this.kinduser = kinduser;\n            this.user = user;\n\n            if (this.kinduser === 'guid') {\n                const option = await this.getOption('guid' + mmogameid);\n                if (option === null) {\n                    this.user = crypto.randomUUID();\n                    this.setOption('guid' + mmogameid, {value: this.user});\n                } else {\n                    this.user = option.value;\n                }\n            }\n            await this.callGetAttempt();\n        }\n\n        gateCreateScreen() {\n            this.gateCompute();\n\n            let maxHeight = this.areaRect.height - 5 * this.padding - this.iconSize;\n            let maxWidth = this.areaRect.width;\n            let size;\n            const labels = [\n                `${this.getStringM('js_name')}: `,\n                this.getStringM('js_code'),\n                this.getStringM('js_palette')\n            ];\n            this.fontSize = this.findbest(this.minFontSize, this.maxFontSize, (fontSize) => {\n                size = this.gateComputeLabelSize(fontSize, labels);\n\n                if (size[0] >= maxWidth) {\n                    return 1;\n                }\n\n                const heightColors = (maxHeight - 4 * fontSize) * 2 / 5;\n                let n = Math.floor(heightColors / this.iconSize);\n                if (n === 0) {\n                    return 1;\n                }\n                const heightAvatars = (maxHeight - 4 * fontSize + heightColors) * 3 / 5;\n                const computedHeight = 3 * size[1] + 8 * this.padding + heightColors + heightAvatars;\n\n                return computedHeight < maxHeight ? -1 : 1;\n            });\n\n            this.gateCreateScreenDo(maxWidth, maxHeight);\n        }\n\n        gateCreateScreenDo(maxWidth, maxHeight) {\n            // Creates the \"nickname\" field.\n            let top = this.gateCreateNickname(0, maxWidth) + this.padding;\n            this.edtNickname.focus();\n\n            // Palette\n            const [lblPalette, btnPalette] = this.gateCreateLabelRefresh(top, this.getStringM('js_palette'),\n                'mmogame-gate-palette-label', 'mmogame-gate-palette-refresh', 'assets/refresh.svg');\n            top += lblPalette.scrollHeight + this.padding;\n            const topGridPalette = top;\n            let gridHeightPalette = (maxHeight - topGridPalette - lblPalette.scrollHeight) * 2 / 5;\n            const countX = Math.floor((maxWidth - this.padding) / this.iconSize);\n            const countYpalette = Math.floor(gridHeightPalette / this.iconSize);\n            gridHeightPalette = countYpalette * this.iconSize;\n            top += gridHeightPalette + this.padding;\n            // Label Avatars\n            const [lblAvatars, btnAvatars] = this.gateCreateLabelRefresh(top, this.getStringM('js_avatars'),\n                'mmogame-gate-avatars-label', 'mmogame-gate-avatars-refresh', 'assets/refresh.svg');\n\n            top += lblAvatars.scrollHeight + this.padding;\n\n            const countYavatars = Math.floor(Math.floor(maxHeight - top - this.padding) / this.iconSize);\n            const gridHeightAvatars = countYavatars * this.iconSize;\n\n            this.addEventListenerRefresh(btnPalette, topGridPalette, countX, countYpalette,\n                top, countX, countYavatars, true, false);\n\n            this.addEventListenerRefresh(btnAvatars, topGridPalette, countX, countYpalette,\n                top, countX, countYavatars, false, true);\n\n            // Horizontal\n            this.gateSendGetColorsAvatars(0, topGridPalette, countX, countYpalette,\n                0, top, countX, countYavatars, true, true);\n\n            this.gateCreateSubmit(top + gridHeightAvatars + 2 * this.padding, maxWidth);\n        }\n\n        gateCreateNickname(top, maxWidth) {\n            const lblNickname = this.createDOMElement('label', {\n                parent: this.area,\n                classnames: 'mmogame-gate-name-label',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: '0',\n                    top: `${top}px`,\n                    width: '0',\n                    color: this.getContrastingColor(this.colorBackground),\n                },\n            });\n            lblNickname.innerHTML = this.getStringM('js_name') + \": \";\n\n            if (this.isVertical) {\n                top += lblNickname.scrollHeight + this.padding;\n            }\n\n            const leftEdit = this.isVertical ? 0 : lblNickname.scrollWidth + this.padding;\n            const width = this.isVertical ? maxWidth : maxWidth - 2 * this.padding;\n            this.edtNickname = this.createDOMElement('input', {\n                parent: this.area,\n                classnames: 'mmogame-gate-name',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${leftEdit}px`,\n                    top: `${top}px`,\n                    width: `${width - leftEdit - this.padding}px`\n                },\n            });\n            this.edtNickname.addEventListener(\"keyup\", this.debounce(() => this.gateUpdateSubmit(), 300));\n            top += this.padding + (this.isVertical ? this.fontSize : Math.max(lblNickname.scrollHeight, this.fontSize));\n\n            return top;\n        }\n\n        gateCreateSubmit(top, maxWidth) {\n           this.btnSubmit = this.createDOMElement('img', {\n                parent: this.area,\n                classnames: 'mmogame-button-gate-submit',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${(maxWidth - this.iconSize) / 2}px`,\n                    top: `${top}px`,\n                    height: `${this.iconSize}px`,\n                    color: this.getContrastingColor(this.colorBackground),\n                    cursor: 'pointer',\n                    visibility: 'hidden',\n                },\n                attributes: {\n                    src: 'assets/submit.svg',\n                }\n            });\n            this.btnSubmit.addEventListener(\"click\", () => {\n                // This.gatePlayGame(true, this.edtNickname.value, this.paletteid, this.avatarid);\n                this.callGetAttempt(\n                    {nickname: this.edtNickname.value, colorpaletteid: this.paletteid, avatarid: this.avatarid},\n                );\n            });\n        }\n\n        gateComputeLabelSize(fontSize, aLabel) {\n            let maxWidth = 0;\n            let maxHeight = 0;\n\n            for (let i = 0; i < aLabel.length; i++) {\n                const label = document.createElement(\"label\");\n                label.style.position = \"absolute\";\n                label.innerHTML = aLabel[i];\n                label.style.whiteSpace = \"nowrap\";\n                label.style.font = \"FontAwesome\";\n                label.style.fontSize = fontSize + \"px\";\n                label.style.width = \"0px\";\n                label.style.height = \"0px\";\n                this.area.appendChild(label);\n\n                if (label.scrollWidth > maxWidth) {\n                    maxWidth = label.scrollWidth;\n                }\n\n                if (label.scrollHeight > maxHeight) {\n                    maxHeight = label.scrollHeight;\n                }\n                this.area.removeChild(label);\n            }\n\n            return [maxWidth, maxHeight];\n        }\n\n        gateShowAvatars(left, top, countX, countY, avatarids, avatars) {\n            if (!avatars || avatars.length === 0) {\n                return; // Exit early if no avatars exist\n            }\n\n            // Delete all previous avatar icons.\n            const elements = document.querySelectorAll('.mmogame-avatar');\n            elements.forEach(element => element.remove());\n\n            const fragment = document.createDocumentFragment();\n\n            this.avatar = undefined;\n            const count = avatars.length;\n            let leftOriginal = left;\n            let w = Math.round(this.padding / 2) + \"px\";\n            for (let i = 0; i < count; i++) {\n                let avatarImagePath = 'assets/avatars/' + avatars[i];\n                let btn = this.createCenterImageButton(\n                    fragment,\n                    left, top,\n                    this.iconSize - this.padding, this.iconSize - this.padding,\n                    'mmogame-avatar',\n                    avatarImagePath\n                );\n                btn.classList.add(\"mmogame-avatar\");\n                let id = avatarids[i];\n                btn.addEventListener(\"click\", () => {\n                    this.gateUpdateAvatar(btn, id, w);\n                });\n\n                // Move left position after placing the button\n                left += this.iconSize;\n\n                // Reset left and move to the next row after filling countX buttons\n                if ((i + 1) % countX === 0) {\n                    top += this.iconSize;\n                    left = leftOriginal;\n                }\n            }\n            this.area.appendChild(fragment);\n        }\n\n        gateSendGetColorsAvatars(leftPalette, topPalette, countXpalette, countYpalette,\n                                 leftAvatars, topAvatars, countXavatars, countYavatars,\n                                 updatePalette = true, updateAvatars = true) {\n            require(['core/ajax'], (Ajax) => {\n                // Defining the parameters to be passed to the service\n                let params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    avatars: updateAvatars ? countXavatars * countYavatars : 0,\n                    colorpalettes: updatePalette ? countXpalette * countYpalette : 0,\n                };\n                // Calling the service through the Moodle AJAX API\n                let getAssets = Ajax.call([{\n                    methodname: 'mod_mmogame_get_assets',\n                    args: params\n                }]);\n\n                // Handling the response\n                getAssets[0].done(({avatarids, avatars, colorpaletteids, colorpalettes}) => {\n                    if (updatePalette) {\n                        this.gateShowColorPalettes(leftPalette, topPalette, countXpalette, countYpalette,\n                            colorpaletteids, colorpalettes);\n                    }\n                    if (updateAvatars) {\n                        this.gateShowAvatars(leftAvatars, topAvatars, countXavatars, countYavatars,\n                            avatarids, avatars);\n                    }\n                }).fail((error) => {\n                    return error;\n                });\n            });\n        }\n\n        gateShowColorPalettes(left, top, countX, countY, colorpaletteids, colorpalettes) {\n            let i = 0; // Counter for color palettes\n            const count = colorpalettes.length;\n            this.canvasColor = undefined;\n            const canvasSize = this.iconSize - this.padding * 3 / 2;\n            const parsedPalettes = colorpalettes.map(palette =>\n                palette.split(\",\").map(value => parseInt(value, 10) || 0)\n            );\n            const fragment = document.createDocumentFragment();\n            for (let iy = 0; iy < countY; iy++) {\n                for (let ix = 0; ix < countX; ix++) {\n                    // Check if we exceed available palettes or encounter invalid data\n                    if (i >= count || !parsedPalettes[i] || !colorpaletteids[i]) {\n                        i++; // Increment and continue if invalid\n                        continue;\n                    }\n\n                    // Create a new canvas element\n                    let canvas = document.createElement('canvas');\n                    canvas.style.position = \"absolute\";\n                    canvas.style.left = `${left + ix * this.iconSize}px`;\n                    canvas.style.top = `${top + iy * this.iconSize}px`;\n                    canvas.width = canvasSize;\n                    canvas.height = canvasSize;\n                    canvas.style.cursor = 'pointer';\n                    canvas.classList.add(\"mmogame_color\");\n\n                    // Append canvas to the area\n                    fragment.appendChild(canvas);\n\n                    // Render the color palette on the canvas\n                    this.showColorPalette(canvas, parsedPalettes[i]);\n\n                    // Get the palette ID and attach a click event listener\n                    let id = colorpaletteids[i];\n                    canvas.addEventListener(\"click\", () => {\n                        this.gateUpdateColorPalette(canvas, id);\n                    });\n\n                    i++;\n                }\n            }\n            this.area.appendChild(fragment);\n        }\n\n        gateUpdateColorPalette(canvas, id) {\n            if (this.canvasColor !== undefined) {\n                this.canvasColor.style.borderStyle = \"none\";\n            }\n            this.canvasColor = canvas;\n            let w = Math.round(this.padding / 2) + \"px\";\n\n            Object.assign(canvas.style, {\n                borderStyle: \"outset\",\n                borderLeftWidth: w,\n                borderTopWidth: w,\n                borderRightWidth: w,\n                borderBottomWidth: w,\n            });\n            this.paletteid = id;\n\n            this.gateUpdateSubmit();\n        }\n\n        gateUpdateAvatar(avatar, id, w) {\n            if (this.avatar !== undefined) {\n                this.avatar.style.borderStyle = \"none\";\n            }\n            this.avatar = avatar;\n            avatar.style.borderStyle = \"outset\";\n\n            avatar.style.borderLeftWidth = w;\n            avatar.style.borderTopWidth = w;\n            avatar.style.borderRightWidth = w;\n            avatar.style.borderBottomWidth = w;\n\n            this.avatarid = id;\n\n            this.gateUpdateSubmit();\n        }\n\n        /**\n         * Updates the visibility of the submit button based on form input validation.\n         */\n        gateUpdateSubmit() {\n            const hasAvatar = this.avatarid !== undefined;\n            const hasPalette = this.paletteid !== undefined;\n            const hasNickname = this.edtNickname?.value?.length > 0;\n\n            this.btnSubmit.style.visibility = hasAvatar && hasPalette && hasNickname ? 'visible' : 'hidden';\n        }\n\n        gateComputeSizes() {\n            this.computeSizes();\n            this.iconSize = Math.round(0.8 * this.iconSize);\n            this.padding = Math.round(0.8 * this.padding);\n        }\n\n        /**\n         * Creates the screen palette UI with a label and a refresh button.\n         * @param {number} top - The vertical position for the elements.\n         * @param {string} title\n         * @param {string} classLabel\n         * @param {string} classButton\n         * @param {string} src\n         */\n        gateCreateLabelRefresh(top, title, classLabel, classButton, src) {\n            // Create and configure the label\n            const label = this.createDOMElement('label', {\n                parent: this.area,\n                classnames: classLabel,\n                styles: {\n                    position: 'absolute',\n                    font: 'FontAwesome',\n                    fontSize: `${this.fontSize}px`,\n                    width: '0px',\n                    whiteSpace: 'nowrap',\n                    color: this.getContrastingColor(this.colorBackground),\n                    top: `${top}px`,\n                    left: '0px',\n                },\n            });\n            label.innerHTML = title;\n\n            // Button refresh color palettes\n            let button = this.createDOMElement('img', {\n                parent: this.area,\n                classnames: classButton,\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${label.scrollWidth + this.padding}px`,\n                    top: `${top}px`,\n                    height: `${label.scrollHeight}px`,\n                    color: this.getContrastingColor(this.colorBackground),\n                    cursor: 'pointer',\n                },\n                attributes: {\n                    src: src,\n                }\n            });\n\n            return [label, button];\n        }\n\n        /**\n         * Adds an event listener to refresh colors and avatars.\n         *\n         * @param {HTMLElement} btn - The button to attach the event listener to.\n         * @param {number} topPalette - The Y-coordinate offset for grid positioning.\n         * @param {number} countXpalette - Width of the color grid.\n         * @param {number} countYpalette - Height of the color grid.\n         * @param {number} topAvatars - The Y-coordinate offset for grid positioning.\n         * @param {number} countXavatars - Width of the avatar grid.\n         * @param {number} countYavatars - Height of the avatar grid.\n         * @param {boolean} updateColors - Callback to update colors.\n         * @param {boolean} updateAvatars - Callback to update avatars.\n         */\n        addEventListenerRefresh(btn, topPalette, countXpalette, countYpalette, topAvatars,\n                                countXavatars, countYavatars, updateColors, updateAvatars) {\n            btn.addEventListener(\"click\", () => {\n                const elements = Array.from(this.area.getElementsByClassName(\"mmogame-color\"));\n                elements.forEach(element => element.remove());\n\n                this.gateSendGetColorsAvatars(0, topPalette, countXpalette, countYpalette,\n                    0, topAvatars, countXavatars, countYavatars,\n                    updateColors, updateAvatars);\n            });\n        }\n\n        /**\n         * Creates the main game area.\n         */\n\n        createArea(top, bottomSpace) {\n            if (this.area !== undefined) {\n                this.body.removeChild(this.area);\n            }\n            this.area = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: 'mmogame-area',\n                styles: {\n                    position: 'absolute',\n                    left: `${this.padding}px`,\n                    top: `${top}px`,\n                    right: `${this.padding}px`,\n                    bottom: `${this.padding + bottomSpace}px`,\n                    overflow: 'hidden',\n                }\n            });\n\n            this.areaRect = {\n                left: this.padding,\n                top: top,\n                width: this.area.offsetWidth,\n                height: this.area.offsetHeight,\n            };\n        }\n\n        removeAreaChildren() {\n            if (this.area === undefined) {\n                return;\n            }\n            while (this.area.firstChild) {\n                this.area.removeChild(this.area.firstChild);\n            }\n        }\n\n        createDivMessage(classnames, message) {\n            if (this.area !== undefined) {\n                this.body.removeChild(this.area);\n                this.area = undefined;\n            }\n\n            if (this.divMessageHelp !== undefined) {\n                this.body.removeChild(this.divMessageHelp);\n                this.divMessageHelp = undefined;\n            }\n\n            let left = this.padding;\n            let top = this.areaRect !== undefined ? this.areaRect.top : 0;\n            let width = window.innerWidth - 2 * this.padding;\n            let height = window.innerHeight - this.padding - top;\n\n            this.createDivMessageDo(classnames, left, top, width, height, message, height);\n\n            this.divMessage.style.top = (height - this.divMessage.scrollHeight) / 2 + \"px\";\n        }\n\n        createNicknameAvatar(parent, prefixclassname, left, topNickname, widthNickname, heightNickname, topAvatar, widthAvatar) {\n            const nickname = this.createDOMElement('div', {\n                parent: parent,\n                classname: `${prefixclassname}-nickname`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${topNickname}px`,\n                    width: `${widthNickname}px`,\n                }\n            });\n\n            let leftAvatar = Math.round(left + this.iconSize / 2);\n            const avatar = this.createDOMElement('img', {\n                classname: `${prefixclassname}-avatar`,\n                parent: this.body,\n                styles: {\n                    position: 'absolute',\n                    left: `${leftAvatar}px`,\n                    top: `${topAvatar}px`,\n                    height: `${widthAvatar}px`,\n                    maxWidth: `${widthAvatar}px`,\n                    transform: 'translateX(-50%)',\n                }\n            });\n\n            return [nickname, avatar];\n        }\n\n\n        createDivMessageStart(message) {\n            if (this.divMessageHelp !== undefined) {\n                return;\n            }\n            if (this.area !== undefined) {\n                this.body.removeChild(this.area);\n                this.area = undefined;\n            }\n\n            let left = this.padding;\n            let top = this.areaRect.top;\n            let width = window.innerWidth - 2 * this.padding;\n            let height = window.innerHeight - this.padding - top;\n\n            let height1 = height / 8;\n\n            this.createDivMessageDo('mmogame-message-start', left, top, width, height, message, height1);\n\n            top += (height1 - this.divMessage.scrollHeight) / 2;\n            this.divMessage.style.top = top + \"px\";\n\n            let div = document.createElement(\"div\");\n            div.style.position = \"absolute\";\n            div.style.left = left + \"px\";\n            div.style.textAlign = \"left\";\n            div.style.width = (width - 2 * this.padding) + \"px\";\n            div.style.paddingLeft = this.padding + \"px\";\n            div.style.paddingRight = this.padding + \"px\";\n\n            div.style.color = this.getContrastingColor(this.colorBackground2);\n            top = this.iconSize + 3 * this.padding + height1;\n            div.style.top = (top + this.padding) + \"px\";\n            div.style.height = (height - height1) + \"px\";\n            this.divMessageHelp = div;\n            this.body.appendChild(this.divMessageHelp);\n\n            this.showHelpScreen(div, (width - 2 * this.padding), (height - height1));\n        }\n\n        /**\n         * Calls the Moodle Web Service 'mmogametype_quiz_get_attempt' and processes the response.\n         *\n         * @param {Object} extraparams - Additional parameters to override default ones.\n         */\n        async callGetAttempt(extraparams = undefined) {\n            const option = await this.getOption(\"kindSound\");\n            this.kindSound = option !== null ? option.value : 1;\n\n            require(['core/ajax'], (Ajax) => {\n                let params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    nickname: null,\n                    colorpaletteid: null,\n                    avatarid: null,\n                    subcommand: '',\n                };\n                if (extraparams !== undefined) {\n                    params = {...params, ...extraparams};\n                }\n                // Calling the service through the Moodle AJAX API\n                let getAttempt = Ajax.call([{\n                    methodname: 'mmogametype_quiz_get_attempt',\n                    args: params,\n                }]);\n\n                // Handling the response\n                getAttempt[0].done((response) => {\n                    const json = JSON.parse(response);\n                    if (json.errorcode === 'no_user') {\n                        this.gateCreateScreen();\n                        return;\n                    }\n                    if (this.area !== undefined) {\n                        this.body.removeChild(this.area);\n                        this.area = undefined;\n                    }\n                    if (this.iconSize === undefined) {\n                        this.openGame();\n                    }\n\n                    this.processGetAttempt(json);\n                }).fail((error) => {\n                    this.createDivMessage('mmogame-error', error.message);\n                    return error;\n                });\n            });\n        }\n\n        createDivMessageDo(classnames, left, top, width, height, message, heightmessage) {\n            if (this.divMessageBackground === undefined) {\n                let div = this.createDiv(this.body, classnames, left, top, width, height);\n                div.style.background = this.getColorHex(this.colorBackground2);\n                this.divMessageBackground = div;\n            }\n\n            if (this.divMessage === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"center\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.background = this.getColorHex(this.colorBackground2);\n                div.style.color = this.getContrastingColor(this.colorBackground2);\n                this.divMessage = div;\n            }\n            this.divMessage.innerHTML = message;\n            this.body.appendChild(this.divMessage);\n            this.autoResizeText(this.divMessage, width, heightmessage, false, this.minFontSize, this.maxFontSize, 0.5);\n        }\n\n        removeMessageDivs() {\n            if (this.divMessage !== undefined) {\n                this.body.removeChild(this.divMessage);\n                this.divMessage = undefined;\n            }\n            if (this.divMessageHelp !== undefined) {\n                this.body.removeChild(this.divMessageHelp);\n                this.divMessageHelp = undefined;\n            }\n            if (this.divMessageBackground !== undefined) {\n                this.body.removeChild(this.divMessageBackground);\n                this.divMessageBackground = undefined;\n            }\n        }\n\n        setColors(colors) {\n            super.setColors(colors);\n\n            this.colorBackground2 = colors[1];\n        }\n\n        /**\n         * Displays an error message on the screen.\n         * @param {string} name - The name of the error context.\n         * @param {Error} [error] - The error object to display.\n         */\n        showError(name, error) {\n            const message = error?.message || 'An unknown error occurred.';\n            this.createDivMessage('mmogame-error', message);\n        }\n\n        createButtonHelp(parent, left, top) {\n            return this.createDOMElement('img', {\n                parent: parent,\n                classnames: 'mmogame-button-help',\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                },\n                attributes: {\n                    src: 'assets/help.svg',\n                    alt: this.getStringM('js_help'),\n                    role: 'button',\n                },\n            });\n        }\n\n        onClickHelp() {\n            if (this.divMessageHelp === undefined) {\n                this.createDivMessageStart('Help');\n            } else {\n                this.removeMessageDivs();\n                this.callGetAttempt();\n            }\n        }\n\n        gateCompute() {\n            // Adjust font sizes\n            this.minFontSize *= 2;\n            this.maxFontSize *= 2;\n\n            // Compute sizes and layout\n            this.gateComputeSizes();\n            this.createArea(this.padding, 0);\n        }\n\n        removeDivMessage() {\n            if (this.divMessage !== undefined) {\n                this.body.removeChild(this.divMessage);\n                this.divMessage = undefined;\n            }\n            if (this.divMessageHelp !== undefined) {\n                this.body.removeChild(this.divMessageHelp);\n                this.divMessageHelp = undefined;\n            }\n            if (this.divMessageBackground !== undefined) {\n                this.divMessageBackground.remove();\n                this.divMessageBackground = undefined;\n            }\n        }\n    };\n});"],"names":["define","MmoGame","isVertical","kindSound","buttonSound","colorBackground2","nickname","user","paletteid","avatarid","iconSize","padding","area","areaRect","edtNickname","mmogameid","divMessage","divMessageHelp","divMessageBackground","constructor","window","innerWidth","innerHeight","undefined","getMuteFile","this","audioElement","play","error","showError","createButtonSound","parent","left","top","createDOMElement","classnames","styles","position","width","height","attributes","src","alt","getStringM","role","addEventListener","onClickSound","button","setOption","value","pin","kinduser","url","option","getOption","crypto","randomUUID","callGetAttempt","gateCreateScreen","gateCompute","size","maxHeight","maxWidth","labels","fontSize","findbest","minFontSize","maxFontSize","gateComputeLabelSize","heightColors","Math","floor","heightAvatars","gateCreateScreenDo","gateCreateNickname","focus","lblPalette","btnPalette","gateCreateLabelRefresh","scrollHeight","topGridPalette","gridHeightPalette","countX","countYpalette","lblAvatars","btnAvatars","countYavatars","gridHeightAvatars","addEventListenerRefresh","gateSendGetColorsAvatars","gateCreateSubmit","lblNickname","color","getContrastingColor","colorBackground","innerHTML","leftEdit","scrollWidth","debounce","gateUpdateSubmit","max","btnSubmit","cursor","visibility","colorpaletteid","aLabel","i","length","label","document","createElement","style","whiteSpace","font","appendChild","removeChild","gateShowAvatars","countY","avatarids","avatars","querySelectorAll","forEach","element","remove","fragment","createDocumentFragment","avatar","count","leftOriginal","w","round","avatarImagePath","btn","createCenterImageButton","classList","add","id","gateUpdateAvatar","leftPalette","topPalette","countXpalette","leftAvatars","topAvatars","countXavatars","updatePalette","updateAvatars","require","Ajax","params","colorpalettes","call","methodname","args","done","_ref","colorpaletteids","gateShowColorPalettes","fail","canvasColor","canvasSize","parsedPalettes","map","palette","split","parseInt","iy","ix","canvas","showColorPalette","gateUpdateColorPalette","borderStyle","Object","assign","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","hasAvatar","hasPalette","hasNickname","gateComputeSizes","computeSizes","title","classLabel","classButton","updateColors","Array","from","getElementsByClassName","createArea","bottomSpace","body","right","bottom","overflow","offsetWidth","offsetHeight","removeAreaChildren","firstChild","createDivMessage","message","createDivMessageDo","createNicknameAvatar","prefixclassname","topNickname","widthNickname","heightNickname","topAvatar","widthAvatar","classname","leftAvatar","transform","createDivMessageStart","height1","div","textAlign","paddingLeft","paddingRight","showHelpScreen","extraparams","subcommand","response","json","JSON","parse","errorcode","openGame","processGetAttempt","heightmessage","createDiv","background","getColorHex","autoResizeText","removeMessageDivs","setColors","colors","name","createButtonHelp","onClickHelp","removeDivMessage"],"mappings":"AA6BAA,+BAAO,CAAC,wBAAwB,SAASC,gBAC9B,cAAwBA,QAE3BC,WACAC,UACAC,YACAC,iBAGAC,SACAC,KACAC,UACAC,SACAC,SACAC,QAGAC,KACAC,SAGAC,YAGAC,UAGAC,WACAC,eACAC,qBAEAC,2BAESjB,WAAakB,OAAOC,WAAaD,OAAOE,iBACxCV,UAAOW,EAOhBC,qBAC8B,IAAnBC,KAAKtB,UAAkB,2BAA6B,4CAQ/CuB,iBACW,IAAnBD,KAAKtB,WAAmBuB,uBAEdA,aAAaC,OACrB,MAAOC,YACAC,UAAU,mBAAoBD,QAK/CE,kBAAkBC,OAAQC,KAAMC,UACvB7B,YAAcqB,KAAKS,iBAAiB,MAAO,CAC5CH,OAAQA,OACRI,WAAY,uBACZC,OAAQ,CACJC,SAAU,WACVL,KAAO,GAAEA,SACTC,IAAM,GAAEA,QACRK,MAAQ,GAAEb,KAAKf,aACf6B,OAAS,GAAEd,KAAKf,cAEpB8B,WAAY,CACRC,IAAKhB,KAAKD,cACVkB,IAAKjB,KAAKkB,WAAW,YACrBC,KAAM,iBAGTxC,YAAYyC,iBAAiB,SAAS,IAAMpB,KAAKqB,aAAarB,KAAKrB,eAO5E0C,aAAaC,aACJ5C,WAAasB,KAAKtB,UAAY,GAAK,EACxC4C,OAAON,IAAMhB,KAAKD,mBACbwB,UAAU,YAAa,CAACC,MAAOxB,KAAKtB,2BAW9BY,UAAWmC,IAAKC,SAAU5C,KAAM6C,aACtCA,IAAMA,SACNrC,UAAYA,eACZmC,IAAMA,SACNC,SAAWA,cACX5C,KAAOA,KAEU,SAAlBkB,KAAK0B,SAAqB,OACpBE,aAAe5B,KAAK6B,UAAU,OAASvC,WAC9B,OAAXsC,aACK9C,KAAOgD,OAAOC,kBACdR,UAAU,OAASjC,UAAW,CAACkC,MAAOxB,KAAKlB,aAE3CA,KAAO8C,OAAOJ,YAGrBxB,KAAKgC,iBAGfC,wBACSC,kBAIDC,KAFAC,UAAYpC,KAAKZ,SAAS0B,OAAS,EAAId,KAAKd,QAAUc,KAAKf,SAC3DoD,SAAWrC,KAAKZ,SAASyB,YAEvByB,OAAS,CACV,GAAEtC,KAAKkB,WAAW,eACnBlB,KAAKkB,WAAW,WAChBlB,KAAKkB,WAAW,oBAEfqB,SAAWvC,KAAKwC,SAASxC,KAAKyC,YAAazC,KAAK0C,aAAcH,cAC/DJ,KAAOnC,KAAK2C,qBAAqBJ,SAAUD,QAEvCH,KAAK,IAAME,gBACJ,QAGLO,aAA4C,GAA5BR,UAAY,EAAIG,UAAgB,KAE5C,IADFM,KAAKC,MAAMF,aAAe5C,KAAKf,iBAE5B,QAEL8D,cAA4D,GAA3CX,UAAY,EAAIG,SAAWK,cAAoB,SAC/C,EAAIT,KAAK,GAAK,EAAInC,KAAKd,QAAU0D,aAAeG,cAE/CX,WAAa,EAAI,UAGxCY,mBAAmBX,SAAUD,WAGtCY,mBAAmBX,SAAUD,eAErB5B,IAAMR,KAAKiD,mBAAmB,EAAGZ,UAAYrC,KAAKd,aACjDG,YAAY6D,cAGVC,WAAYC,YAAcpD,KAAKqD,uBAAuB7C,IAAKR,KAAKkB,WAAW,cAC9E,6BAA8B,+BAAgC,sBAClEV,KAAO2C,WAAWG,aAAetD,KAAKd,cAChCqE,eAAiB/C,QACnBgD,kBAA6E,GAAxDpB,UAAYmB,eAAiBJ,WAAWG,cAAoB,QAC/EG,OAASZ,KAAKC,OAAOT,SAAWrC,KAAKd,SAAWc,KAAKf,UACrDyE,cAAgBb,KAAKC,MAAMU,kBAAoBxD,KAAKf,UAC1DuE,kBAAoBE,cAAgB1D,KAAKf,SACzCuB,KAAOgD,kBAAoBxD,KAAKd,cAEzByE,WAAYC,YAAc5D,KAAKqD,uBAAuB7C,IAAKR,KAAKkB,WAAW,cAC9E,6BAA8B,+BAAgC,sBAElEV,KAAOmD,WAAWL,aAAetD,KAAKd,cAEhC2E,cAAgBhB,KAAKC,MAAMD,KAAKC,MAAMV,UAAY5B,IAAMR,KAAKd,SAAWc,KAAKf,UAC7E6E,kBAAoBD,cAAgB7D,KAAKf,cAE1C8E,wBAAwBX,WAAYG,eAAgBE,OAAQC,cAC7DlD,IAAKiD,OAAQI,eAAe,GAAM,QAEjCE,wBAAwBH,WAAYL,eAAgBE,OAAQC,cAC7DlD,IAAKiD,OAAQI,eAAe,GAAO,QAGlCG,yBAAyB,EAAGT,eAAgBE,OAAQC,cACrD,EAAGlD,IAAKiD,OAAQI,eAAe,GAAM,QAEpCI,iBAAiBzD,IAAMsD,kBAAoB,EAAI9D,KAAKd,QAASmD,UAGtEY,mBAAmBzC,IAAK6B,gBACd6B,YAAclE,KAAKS,iBAAiB,QAAS,CAC/CH,OAAQN,KAAKb,KACbuB,WAAY,0BACZC,OAAQ,CACJC,SAAU,WACV2B,SAAW,GAAEvC,KAAKuC,aAClBhC,KAAM,IACNC,IAAM,GAAEA,QACRK,MAAO,IACPsD,MAAOnE,KAAKoE,oBAAoBpE,KAAKqE,oBAG7CH,YAAYI,UAAYtE,KAAKkB,WAAW,WAAa,KAEjDlB,KAAKvB,aACL+B,KAAO0D,YAAYZ,aAAetD,KAAKd,eAGrCqF,SAAWvE,KAAKvB,WAAa,EAAIyF,YAAYM,YAAcxE,KAAKd,QAChE2B,MAAQb,KAAKvB,WAAa4D,SAAWA,SAAW,EAAIrC,KAAKd,oBAC1DG,YAAcW,KAAKS,iBAAiB,QAAS,CAC9CH,OAAQN,KAAKb,KACbuB,WAAY,oBACZC,OAAQ,CACJC,SAAU,WACV2B,SAAW,GAAEvC,KAAKuC,aAClBhC,KAAO,GAAEgE,aACT/D,IAAM,GAAEA,QACRK,MAAUA,MAAQ0D,SAAWvE,KAAKd,QAA1B,aAGXG,YAAY+B,iBAAiB,QAASpB,KAAKyE,UAAS,IAAMzE,KAAK0E,oBAAoB,MACxFlE,KAAOR,KAAKd,SAAWc,KAAKvB,WAAauB,KAAKuC,SAAWM,KAAK8B,IAAIT,YAAYZ,aAActD,KAAKuC,WAKrG0B,iBAAiBzD,IAAK6B,eACduC,UAAY5E,KAAKS,iBAAiB,MAAO,CACzCH,OAAQN,KAAKb,KACbuB,WAAY,6BACZC,OAAQ,CACJC,SAAU,WACV2B,SAAW,GAAEvC,KAAKuC,aAClBhC,MAAU8B,SAAWrC,KAAKf,UAAY,EAA/B,KACPuB,IAAM,GAAEA,QACRM,OAAS,GAAEd,KAAKf,aAChBkF,MAAOnE,KAAKoE,oBAAoBpE,KAAKqE,iBACrCQ,OAAQ,UACRC,WAAY,UAEhB/D,WAAY,CACRC,IAAK,4BAGR4D,UAAUxD,iBAAiB,SAAS,UAEhCY,eACD,CAACnD,SAAUmB,KAAKX,YAAYmC,MAAOuD,eAAgB/E,KAAKjB,UAAWC,SAAUgB,KAAKhB,cAK9F2D,qBAAqBJ,SAAUyC,YACvB3C,SAAW,EACXD,UAAY,MAEX,IAAI6C,EAAI,EAAGA,EAAID,OAAOE,OAAQD,IAAK,OAC9BE,MAAQC,SAASC,cAAc,SACrCF,MAAMG,MAAM1E,SAAW,WACvBuE,MAAMb,UAAYU,OAAOC,GACzBE,MAAMG,MAAMC,WAAa,SACzBJ,MAAMG,MAAME,KAAO,cACnBL,MAAMG,MAAM/C,SAAWA,SAAW,KAClC4C,MAAMG,MAAMzE,MAAQ,MACpBsE,MAAMG,MAAMxE,OAAS,WAChB3B,KAAKsG,YAAYN,OAElBA,MAAMX,YAAcnC,WACpBA,SAAW8C,MAAMX,aAGjBW,MAAM7B,aAAelB,YACrBA,UAAY+C,MAAM7B,mBAEjBnE,KAAKuG,YAAYP,aAGnB,CAAC9C,SAAUD,WAGtBuD,gBAAgBpF,KAAMC,IAAKiD,OAAQmC,OAAQC,UAAWC,aAC7CA,SAA8B,IAAnBA,QAAQZ,cAKPE,SAASW,iBAAiB,mBAClCC,SAAQC,SAAWA,QAAQC,iBAE9BC,SAAWf,SAASgB,8BAErBC,YAASvG,QACRwG,MAAQR,QAAQZ,WAClBqB,aAAehG,KACfiG,EAAI3D,KAAK4D,MAAMzG,KAAKd,QAAU,GAAK,SAClC,IAAI+F,EAAI,EAAGA,EAAIqB,MAAOrB,IAAK,KACxByB,gBAAkB,kBAAoBZ,QAAQb,GAC9C0B,IAAM3G,KAAK4G,wBACXT,SACA5F,KAAMC,IACNR,KAAKf,SAAWe,KAAKd,QAASc,KAAKf,SAAWe,KAAKd,QACnD,iBACAwH,iBAEJC,IAAIE,UAAUC,IAAI,sBACdC,GAAKlB,UAAUZ,GACnB0B,IAAIvF,iBAAiB,SAAS,UACrB4F,iBAAiBL,IAAKI,GAAIP,MAInCjG,MAAQP,KAAKf,UAGRgG,EAAI,GAAKxB,QAAW,IACrBjD,KAAOR,KAAKf,SACZsB,KAAOgG,mBAGVpH,KAAKsG,YAAYU,UAG1BnC,yBAAyBiD,YAAaC,WAAYC,cAAezD,cACxC0D,YAAaC,WAAYC,cAAezD,mBACxC0D,yEAAsBC,yEAC3CC,QAAQ,CAAC,cAAeC,WAEhBC,OAAS,CACTrI,UAAWU,KAAKV,UAChBoC,SAAU1B,KAAK0B,SACf5C,KAAMkB,KAAKlB,KACXgH,QAAS0B,cAAgBF,cAAgBzD,cAAgB,EACzD+D,cAAeL,cAAgBJ,cAAgBzD,cAAgB,GAGnDgE,KAAKG,KAAK,CAAC,CACvBC,WAAY,yBACZC,KAAMJ,UAIA,GAAGK,MAAKC,WAACpC,UAACA,UAADC,QAAYA,QAAZoC,gBAAqBA,gBAArBN,cAAsCA,oBACjDL,oBACKY,sBAAsBlB,YAAaC,WAAYC,cAAezD,cAC/DwE,gBAAiBN,eAErBJ,oBACK7B,gBAAgByB,YAAaC,WAAYC,cAAezD,cACzDgC,UAAWC,YAEpBsC,MAAMjI,OACEA,WAKnBgI,sBAAsB5H,KAAMC,IAAKiD,OAAQmC,OAAQsC,gBAAiBN,mBAC1D3C,EAAI,QACFqB,MAAQsB,cAAc1C,YACvBmD,iBAAcvI,QACbwI,WAAatI,KAAKf,SAA0B,EAAfe,KAAKd,QAAc,EAChDqJ,eAAiBX,cAAcY,KAAIC,SACrCA,QAAQC,MAAM,KAAKF,KAAIhH,OAASmH,SAASnH,MAAO,KAAO,MAErD2E,SAAWf,SAASgB,6BACrB,IAAIwC,GAAK,EAAGA,GAAKhD,OAAQgD,SACrB,IAAIC,GAAK,EAAGA,GAAKpF,OAAQoF,KAAM,IAE5B5D,GAAKqB,QAAUiC,eAAetD,KAAOiD,gBAAgBjD,GAAI,CACzDA,iBAKA6D,OAAS1D,SAASC,cAAc,UACpCyD,OAAOxD,MAAM1E,SAAW,WACxBkI,OAAOxD,MAAM/E,KAAQ,GAAEA,KAAOsI,GAAK7I,KAAKf,aACxC6J,OAAOxD,MAAM9E,IAAO,GAAEA,IAAMoI,GAAK5I,KAAKf,aACtC6J,OAAOjI,MAAQyH,WACfQ,OAAOhI,OAASwH,WAChBQ,OAAOxD,MAAMT,OAAS,UACtBiE,OAAOjC,UAAUC,IAAI,iBAGrBX,SAASV,YAAYqD,aAGhBC,iBAAiBD,OAAQP,eAAetD,QAGzC8B,GAAKmB,gBAAgBjD,GACzB6D,OAAO1H,iBAAiB,SAAS,UACxB4H,uBAAuBF,OAAQ/B,OAGxC9B,SAGH9F,KAAKsG,YAAYU,UAG1B6C,uBAAuBF,OAAQ/B,SACFjH,IAArBE,KAAKqI,mBACAA,YAAY/C,MAAM2D,YAAc,aAEpCZ,YAAcS,WACftC,EAAI3D,KAAK4D,MAAMzG,KAAKd,QAAU,GAAK,KAEvCgK,OAAOC,OAAOL,OAAOxD,MAAO,CACxB2D,YAAa,SACbG,gBAAiB5C,EACjB6C,eAAgB7C,EAChB8C,iBAAkB9C,EAClB+C,kBAAmB/C,SAElBzH,UAAYgI,QAEZrC,mBAGTsC,iBAAiBX,OAAQU,GAAIP,QACL1G,IAAhBE,KAAKqG,cACAA,OAAOf,MAAM2D,YAAc,aAE/B5C,OAASA,OACdA,OAAOf,MAAM2D,YAAc,SAE3B5C,OAAOf,MAAM8D,gBAAkB5C,EAC/BH,OAAOf,MAAM+D,eAAiB7C,EAC9BH,OAAOf,MAAMgE,iBAAmB9C,EAChCH,OAAOf,MAAMiE,kBAAoB/C,OAE5BxH,SAAW+H,QAEXrC,mBAMTA,qEACU8E,eAA8B1J,IAAlBE,KAAKhB,SACjByK,gBAAgC3J,IAAnBE,KAAKjB,UAClB2K,4CAAmBrK,0FAAamC,oEAAO0D,QAAS,OAEjDN,UAAUU,MAAMR,WAAa0E,WAAaC,YAAcC,YAAc,UAAY,SAG3FC,wBACSC,oBACA3K,SAAW4D,KAAK4D,MAAM,GAAMzG,KAAKf,eACjCC,QAAU2D,KAAK4D,MAAM,GAAMzG,KAAKd,SAWzCmE,uBAAuB7C,IAAKqJ,MAAOC,WAAYC,YAAa/I,WAElDmE,MAAQnF,KAAKS,iBAAiB,QAAS,CACzCH,OAAQN,KAAKb,KACbuB,WAAYoJ,WACZnJ,OAAQ,CACJC,SAAU,WACV4E,KAAM,cACNjD,SAAW,GAAEvC,KAAKuC,aAClB1B,MAAO,MACP0E,WAAY,SACZpB,MAAOnE,KAAKoE,oBAAoBpE,KAAKqE,iBACrC7D,IAAM,GAAEA,QACRD,KAAM,gBAGd4E,MAAMb,UAAYuF,MAoBX,CAAC1E,MAjBKnF,KAAKS,iBAAiB,MAAO,CACtCH,OAAQN,KAAKb,KACbuB,WAAYqJ,YACZpJ,OAAQ,CACJC,SAAU,WACV2B,SAAW,GAAEvC,KAAKuC,aAClBhC,KAAO,GAAE4E,MAAMX,YAAcxE,KAAKd,YAClCsB,IAAM,GAAEA,QACRM,OAAS,GAAEqE,MAAM7B,iBACjBa,MAAOnE,KAAKoE,oBAAoBpE,KAAKqE,iBACrCQ,OAAQ,WAEZ9D,WAAY,CACRC,IAAKA,QAoBjB+C,wBAAwB4C,IAAKO,WAAYC,cAAezD,cAAe2D,WAC/CC,cAAezD,cAAemG,aAAcxC,eAChEb,IAAIvF,iBAAiB,SAAS,KACT6I,MAAMC,KAAKlK,KAAKb,KAAKgL,uBAAuB,kBACpDnE,SAAQC,SAAWA,QAAQC,gBAE/BlC,yBAAyB,EAAGkD,WAAYC,cAAezD,cACxD,EAAG2D,WAAYC,cAAezD,cAC9BmG,aAAcxC,kBAQ1B4C,WAAW5J,IAAK6J,kBACMvK,IAAdE,KAAKb,WACAmL,KAAK5E,YAAY1F,KAAKb,WAE1BA,KAAOa,KAAKS,iBAAiB,MAAO,CACrCH,OAAQN,KAAKsK,KACb5J,WAAY,eACZC,OAAQ,CACJC,SAAU,WACVL,KAAO,GAAEP,KAAKd,YACdsB,IAAM,GAAEA,QACR+J,MAAQ,GAAEvK,KAAKd,YACfsL,OAAS,GAAExK,KAAKd,QAAUmL,gBAC1BI,SAAU,iBAIbrL,SAAW,CACZmB,KAAMP,KAAKd,QACXsB,IAAKA,IACLK,MAAOb,KAAKb,KAAKuL,YACjB5J,OAAQd,KAAKb,KAAKwL,cAI1BC,6BACsB9K,IAAdE,KAAKb,UAGFa,KAAKb,KAAK0L,iBACR1L,KAAKuG,YAAY1F,KAAKb,KAAK0L,YAIxCC,iBAAiBpK,WAAYqK,cACPjL,IAAdE,KAAKb,YACAmL,KAAK5E,YAAY1F,KAAKb,WACtBA,UAAOW,QAGYA,IAAxBE,KAAKR,sBACA8K,KAAK5E,YAAY1F,KAAKR,qBACtBA,oBAAiBM,OAGtBS,KAAOP,KAAKd,QACZsB,SAAwBV,IAAlBE,KAAKZ,SAAyBY,KAAKZ,SAASoB,IAAM,EACxDK,MAAQlB,OAAOC,WAAa,EAAII,KAAKd,QACrC4B,OAASnB,OAAOE,YAAcG,KAAKd,QAAUsB,SAE5CwK,mBAAmBtK,WAAYH,KAAMC,IAAKK,MAAOC,OAAQiK,QAASjK,aAElEvB,WAAW+F,MAAM9E,KAAOM,OAASd,KAAKT,WAAW+D,cAAgB,EAAI,KAG9E2H,qBAAqB3K,OAAQ4K,gBAAiB3K,KAAM4K,YAAaC,cAAeC,eAAgBC,UAAWC,mBACjG1M,SAAWmB,KAAKS,iBAAiB,MAAO,CAC1CH,OAAQA,OACRkL,UAAY,GAAEN,2BACdvK,OAAQ,CACJC,SAAU,WACVL,KAAO,GAAEA,SACTC,IAAM,GAAE2K,gBACRtK,MAAQ,GAAEuK,yBAIdK,WAAa5I,KAAK4D,MAAMlG,KAAOP,KAAKf,SAAW,SAc5C,CAACJ,SAbOmB,KAAKS,iBAAiB,MAAO,CACxC+K,UAAY,GAAEN,yBACd5K,OAAQN,KAAKsK,KACb3J,OAAQ,CACJC,SAAU,WACVL,KAAO,GAAEkL,eACTjL,IAAM,GAAE8K,cACRxK,OAAS,GAAEyK,gBACXlJ,SAAW,GAAEkJ,gBACbG,UAAW,uBAQvBC,sBAAsBZ,iBACUjL,IAAxBE,KAAKR,2BAGSM,IAAdE,KAAKb,YACAmL,KAAK5E,YAAY1F,KAAKb,WACtBA,UAAOW,OAGZS,KAAOP,KAAKd,QACZsB,IAAMR,KAAKZ,SAASoB,IACpBK,MAAQlB,OAAOC,WAAa,EAAII,KAAKd,QACrC4B,OAASnB,OAAOE,YAAcG,KAAKd,QAAUsB,IAE7CoL,QAAU9K,OAAS,OAElBkK,mBAAmB,wBAAyBzK,KAAMC,IAAKK,MAAOC,OAAQiK,QAASa,SAEpFpL,MAAQoL,QAAU5L,KAAKT,WAAW+D,cAAgB,OAC7C/D,WAAW+F,MAAM9E,IAAMA,IAAM,SAE9BqL,IAAMzG,SAASC,cAAc,OACjCwG,IAAIvG,MAAM1E,SAAW,WACrBiL,IAAIvG,MAAM/E,KAAOA,KAAO,KACxBsL,IAAIvG,MAAMwG,UAAY,OACtBD,IAAIvG,MAAMzE,MAASA,MAAQ,EAAIb,KAAKd,QAAW,KAC/C2M,IAAIvG,MAAMyG,YAAc/L,KAAKd,QAAU,KACvC2M,IAAIvG,MAAM0G,aAAehM,KAAKd,QAAU,KAExC2M,IAAIvG,MAAMnB,MAAQnE,KAAKoE,oBAAoBpE,KAAKpB,kBAChD4B,IAAMR,KAAKf,SAAW,EAAIe,KAAKd,QAAU0M,QACzCC,IAAIvG,MAAM9E,IAAOA,IAAMR,KAAKd,QAAW,KACvC2M,IAAIvG,MAAMxE,OAAUA,OAAS8K,QAAW,UACnCpM,eAAiBqM,SACjBvB,KAAK7E,YAAYzF,KAAKR,qBAEtByM,eAAeJ,IAAMhL,MAAQ,EAAIb,KAAKd,QAAW4B,OAAS8K,oCAQ9CM,wEAAcpM,QACzB8B,aAAe5B,KAAK6B,UAAU,kBAC/BnD,UAAuB,OAAXkD,OAAkBA,OAAOJ,MAAQ,EAElDiG,QAAQ,CAAC,cAAeC,WAChBC,OAAS,CACTrI,UAAWU,KAAKV,UAChBoC,SAAU1B,KAAK0B,SACf5C,KAAMkB,KAAKlB,KACXD,SAAU,KACVkG,eAAgB,KAChB/F,SAAU,KACVmN,WAAY,SAEIrM,IAAhBoM,cACAvE,OAAS,IAAIA,UAAWuE,cAGXxE,KAAKG,KAAK,CAAC,CACxBC,WAAY,+BACZC,KAAMJ,UAIC,GAAGK,MAAMoE,iBACVC,KAAOC,KAAKC,MAAMH,UACD,YAAnBC,KAAKG,gBAIS1M,IAAdE,KAAKb,YACAmL,KAAK5E,YAAY1F,KAAKb,WACtBA,UAAOW,QAEMA,IAAlBE,KAAKf,eACAwN,gBAGJC,kBAAkBL,YAXdpK,sBAYVmG,MAAMjI,aACA2K,iBAAiB,gBAAiB3K,MAAM4K,SACtC5K,YAKnB6K,mBAAmBtK,WAAYH,KAAMC,IAAKK,MAAOC,OAAQiK,QAAS4B,uBAC5B7M,IAA9BE,KAAKP,qBAAoC,KACrCoM,IAAM7L,KAAK4M,UAAU5M,KAAKsK,KAAM5J,WAAYH,KAAMC,IAAKK,MAAOC,QAClE+K,IAAIvG,MAAMuH,WAAa7M,KAAK8M,YAAY9M,KAAKpB,uBACxCa,qBAAuBoM,YAGR/L,IAApBE,KAAKT,WAA0B,KAC3BsM,IAAMzG,SAASC,cAAc,OACjCwG,IAAIvG,MAAM1E,SAAW,WACrBiL,IAAIvG,MAAM/E,KAAOA,KAAO,KACxBsL,IAAIvG,MAAMwG,UAAY,SACtBD,IAAIvG,MAAMzE,MAASA,MAAQ,EAAIb,KAAKd,QAAW,KAC/C2M,IAAIvG,MAAMyG,YAAc/L,KAAKd,QAAU,KACvC2M,IAAIvG,MAAM0G,aAAehM,KAAKd,QAAU,KAExC2M,IAAIvG,MAAMuH,WAAa7M,KAAK8M,YAAY9M,KAAKpB,kBAC7CiN,IAAIvG,MAAMnB,MAAQnE,KAAKoE,oBAAoBpE,KAAKpB,uBAC3CW,WAAasM,SAEjBtM,WAAW+E,UAAYyG,aACvBT,KAAK7E,YAAYzF,KAAKT,iBACtBwN,eAAe/M,KAAKT,WAAYsB,MAAO8L,eAAe,EAAO3M,KAAKyC,YAAazC,KAAK0C,YAAa,IAG1GsK,yBAC4BlN,IAApBE,KAAKT,kBACA+K,KAAK5E,YAAY1F,KAAKT,iBACtBA,gBAAaO,QAEMA,IAAxBE,KAAKR,sBACA8K,KAAK5E,YAAY1F,KAAKR,qBACtBA,oBAAiBM,QAEQA,IAA9BE,KAAKP,4BACA6K,KAAK5E,YAAY1F,KAAKP,2BACtBA,0BAAuBK,GAIpCmN,UAAUC,cACAD,UAAUC,aAEXtO,iBAAmBsO,OAAO,GAQnC9M,UAAU+M,KAAMhN,aACN4K,SAAU5K,MAAAA,aAAAA,MAAO4K,UAAW,kCAC7BD,iBAAiB,gBAAiBC,SAG3CqC,iBAAiB9M,OAAQC,KAAMC,YACpBR,KAAKS,iBAAiB,MAAO,CAChCH,OAAQA,OACRI,WAAY,sBACZC,OAAQ,CACJC,SAAU,WACVL,KAAO,GAAEA,SACTC,IAAM,GAAEA,QACRK,MAAQ,GAAEb,KAAKf,aACf6B,OAAS,GAAEd,KAAKf,cAEpB8B,WAAY,CACRC,IAAK,kBACLC,IAAKjB,KAAKkB,WAAW,WACrBC,KAAM,YAKlBkM,mBACgCvN,IAAxBE,KAAKR,oBACAmM,sBAAsB,cAEtBqB,yBACAhL,kBAIbE,mBAESO,aAAe,OACfC,aAAe,OAGfiH,wBACAS,WAAWpK,KAAKd,QAAS,GAGlCoO,wBAC4BxN,IAApBE,KAAKT,kBACA+K,KAAK5E,YAAY1F,KAAKT,iBACtBA,gBAAaO,QAEMA,IAAxBE,KAAKR,sBACA8K,KAAK5E,YAAY1F,KAAKR,qBACtBA,oBAAiBM,QAEQA,IAA9BE,KAAKP,4BACAA,qBAAqByG,cACrBzG,0BAAuBK"}