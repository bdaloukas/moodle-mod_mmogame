{"version":3,"file":"mmogameui.min.js","sources":["../src/mmogameui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mod_mmogame/mmogame'], function(MmoGame) {\n    return class MmoGameUI extends MmoGame {\n\n        isVertical;\n        kindSound; // Type: Number (0 = on, 1 = off, 2 = speak)\n        buttonSound;\n        colorBackground2;\n\n        // Other\n        nickname;\n        user;\n        paletteid;\n        avatarid;\n\n        // Form fields\n        edtCode;\n        edtNickname;\n\n        constructor() {\n            super();\n            this.isVertical = window.innerWidth < window.innerHeight;\n        }\n\n        /**\n         * Returns the appropriate file for mute/unmute.\n         * @returns {string} The file path.\n         */\n        getMuteFile() {\n            return this.kindSound === 0 ? 'assets/sound-on-flat.png' : 'assets/sound-off-flat.png';\n        }\n\n        /**\n         * Plays a sound file if sound is enabled.\n         *\n         * @param {HTMLAudioElement} audioElement - The audio element to play.\n         */\n        playAudio(audioElement) {\n            if (this.kindSound !== 0 && audioElement) {\n                if (audioElement.networkState === 1) {\n                    audioElement.play();\n                }\n            }\n        }\n\n        createButtonSound(left, top, size) {\n            this.buttonSound = this.createDOMElement('img', {\n                parent: this.body,\n                classnames: 'mmogame-button-sound',\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${size}px`,\n                    height: `${size}px`,\n                },\n                attributes: {\n                    src: this.getMuteFile(),\n                    alt: this.getStringM('js_sound'),\n                    role: 'button',\n                },\n            });\n            this.buttonSound.addEventListener(\"click\", () => this.onClickSound(this.buttonSound));\n        }\n\n        /**\n         * Toggles sound on or off when clicked.\n         * @param {HTMLElement} button - The sound toggle button.\n         */\n        onClickSound(button) {\n            this.kindSound = (this.kindSound + 1) % 2;\n            button.src = this.getMuteFile();\n            this.setOptions({kindSound: this.kindSound});\n        }\n\n        /**\n         * Opens the gate UI, computes sizes, and initializes settings based on the user type.\n         * @param {number} mmogameid - The game ID.\n         * @param {string} pin - The game PIN.\n         * @param {string} kinduser - The type of user (e.g., \"moodle\" or \"guid\").\n         * @param {string} user - The user identifier.\n         * @param {string} url - The game URL.\n         */\n        gateOpen(mmogameid, pin, kinduser, user, url) {\n            const instance = this;\n\n            try {\n                // Initialize class variables\n                this.url = url;\n                this.mmogameid = mmogameid;\n                this.pin = pin;\n                this.kinduser = kinduser;\n                instance.user = user;\n\n                // Adjust font sizes\n                this.minFontSize *= 2;\n                this.maxFontSize *= 2;\n\n                // Compute sizes and layout\n                this.gateComputeSizes();\n                this.areaRect = {\n                    left: this.padding,\n                    top: this.padding,\n                    width: Math.round(window.innerWidth - 2 * this.padding),\n                    height: Math.round(window.innerHeight - 2 * this.padding),\n                };\n\n                // Load options and initialize UI\n                this.getOptions()\n                    .then((options) => {\n                        // Set default options if undefined\n                        options.kindsound = options.kindsound || 0;\n                        options.nickname = options.nickname || '';\n                        options.avatarid = options.avatarid || 0;\n                        options.paletteid = options.paletteid || 0;\n\n                        // Assign kindSound within valid range\n                        this.kindSound = [1, 2].includes(options.kindSound) ? options.kindSound : 0;\n\n                        const isReady = options.nickname && options.avatarid && options.paletteid;\n\n                        if (kinduser === 'moodle' && isReady) {\n                            this.gatePlayGame(false, options.nickname, options.paletteid, options.avatarid);\n                        } else if (kinduser === 'guid') {\n                            options.userGUID = options.userGUID || '';\n\n                            if (options.userGUID.length >= 10 && isReady) {\n                                instance.user = options.userGUID;\n                                this.gatePlayGame(false, options.nickname, options.paletteid, options.avatarid);\n                            } else {\n                                this.gateCreateScreen();\n                            }\n                        } else {\n                            this.gateCreateScreen();\n                        }\n\n                        return true;\n                    })\n                    .catch((error) => {\n                        this.showError('gateOpen unexpected', error);\n                    });\n            } catch (error) {\n               this.showError('gateOpen', error);\n            }\n        }\n\n        gatePlayGame(save, nickname, paletteid, avatarid) {\n            let instance = this;\n\n            if (instance.kinduser === 'guid' && instance.user === '') {\n                this.uuid4();\n            }\n\n            if (!save) {\n                instance.nickname = nickname;\n                instance.paletteid = paletteid;\n                instance.avatarid = avatarid;\n                instance.callGetAttempt({nickname: nickname, colorpaletteid: paletteid, avatarid: avatarid});\n                return;\n            }\n\n            let options = {nickname: nickname, avatarid: avatarid, paletteid: paletteid};\n\n            this.setOptions(options)\n                .then(() => {\n                    this.nickname = nickname;\n                    this.paletteid = paletteid;\n                    this.avatarid = avatarid;\n                    this.callGetAttempt();\n                    return true;\n                })\n                .catch(error => {\n                    this.showError(error.message);\n                    return false;\n                });\n        }\n\n        gateCreateScreen() {\n            this.createArea();\n\n            let maxHeight = this.areaRect.height - 5 * this.padding - this.iconSize;\n            let maxWidth = this.areaRect.width;\n            let size;\n\n            const labels = [\n                `${this.getStringM('js_name')}: `,\n                this.getStringM('js_code'),\n                this.getStringM('js_palette')\n            ];\n\n            this.fontSize = this.findbest(this.minFontSize, this.maxFontSize, (fontSize) => {\n                size = this.gateComputeLabelSize(fontSize, labels);\n\n                if (size[0] >= maxWidth) {\n                    return 1;\n                }\n\n                const heightColors = (maxHeight - 4 * fontSize) * 2 / 5;\n                let n = Math.floor(heightColors / this.iconSize);\n                if (n === 0) {\n                    return 1;\n                }\n                const heightAvatars = (maxHeight - 4 * fontSize + heightColors) * 3 / 5;\n                const computedHeight = 3 * size[1] + 8 * this.padding + heightColors + heightAvatars;\n\n                return computedHeight < maxHeight ? -1 : 1;\n            });\n\n            this.gateCreateScreenDo(maxWidth, maxHeight);\n        }\n\n        gateCreateScreenDo(maxWidth, maxHeight) {\n            const instance = this;\n\n            let top = this.gateCreateNickName(0, maxWidth) + this.padding;\n            // Creates the \"nickname\" field.\n\n            // Palette\n            const [lblPalette, btnPalette] = instance.gateCreateLabelRefresh(top, instance.getStringM('js_palette'),\n                'mmogame-gate-palette-label', 'mmogame-gate-palette-refresh', 'assets/refresh.svg');\n            top += lblPalette.scrollHeight + instance.padding;\n            const topGridPalette = top;\n            let gridHeightPalette = (maxHeight - topGridPalette - lblPalette.scrollHeight) * 2 / 5;\n            const countX = Math.floor((maxWidth - this.padding) / this.iconSize);\n            const countYpalette = Math.floor(gridHeightPalette / this.iconSize);\n            gridHeightPalette = countYpalette * instance.iconSize;\n            top += gridHeightPalette + this.padding;\n            // Label Avatars\n            const [lblAvatars, btnAvatars] = instance.gateCreateLabelRefresh(top, instance.getStringM('js_avatars'),\n                'mmogame-gate-avatars-label', 'mmogame-gate-avatars-refresh', 'assets/refresh.svg');\n\n            top += lblAvatars.scrollHeight + instance.padding;\n\n            const gridHeightAvatars = Math.floor(maxHeight - top - this.padding);\n            const countYavatars = Math.floor(gridHeightAvatars / this.iconSize);\n\n            instance.addEventListenerRefresh(btnPalette, topGridPalette, countX, countYpalette,\n                top, countX, countYavatars, true, false);\n\n            instance.addEventListenerRefresh(btnAvatars, topGridPalette, countX, countYpalette,\n                top, countX, countYavatars, false, true);\n\n            // Horizontal\n            instance.gateSendGetColorsAvatars(0, topGridPalette, countX, countYpalette,\n                0, top, countX, countYavatars, true, true);\n            top += gridHeightPalette + instance.fontSize + instance.padding + gridHeightAvatars;\n\n            this.gateCreateSubmit(top);\n        }\n\n        gateCreateNickName(top, maxWidth) {\n            const lblNickName = this.createDOMElement('label', {\n                parent: this.area,\n                classnames: 'mmogame-gate-name-label',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: '0',\n                    top: `${top}px`,\n                    width: '0',\n                    color: this.getContrastingColor(this.colorBackground),\n                },\n            });\n            lblNickName.innerHTML = this.getStringM('js_name') + \": \";\n\n            if (this.isVertical) {\n                top += lblNickName.scrollHeight + this.padding;\n            }\n\n            const leftEdit = this.isVertical ? 0 : lblNickName.scrollWidth + this.padding;\n            const width = this.isVertical ? maxWidth : maxWidth - 2 * this.padding;\n            this.edtNickname = this.createDOMElement('input', {\n                parent: this.area,\n                classnames: 'mmogame-gate-name',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${leftEdit}px`,\n                    top: `${top}px`,\n                    width: `${width - leftEdit - this.padding}px`\n                },\n            });\n            this.edtNickname.addEventListener(\"keyup\", this.debounce(() => this.gateUpdateSubmit(), 300));\n            top += this.padding + (this.isVertical ? this.fontSize : Math.max(lblNickName.scrollHeight, this.fontSize));\n\n            return top;\n        }\n\n        gateCreateSubmit(top, maxWidth) {\n           this.btnSubmit = this.createDOMElement('img', {\n                parent: this.area,\n                classnames: 'mmogame-button-gate-submit',\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${(maxWidth - this.iconSize) / 2}px`,\n                    top: `${top}px`,\n                    width: `0`,\n                    height: `${this.iconSize}`,\n                    color: this.getContrastingColor(this.colorBackground),\n                    cursor: 'pointer',\n                    visibility: 'hidden',\n                },\n                attributes: {\n                    src: 'assets/submit.svg',\n                }\n            });\n            this.btnSubmit.addEventListener(\"click\", () => {\n                if (this.edtCode !== undefined) {\n                    this.user = this.edtCode.value;\n                }\n                this.gatePlayGame(true, this.edtNickname.value, this.paletteid, this.avatarid);\n            });\n        }\n\n        gateComputeLabelSize(fontSize, aLabel) {\n            const instance = this;\n            let maxWidth = 0;\n            let maxHeight = 0;\n\n            for (let i = 0; i < aLabel.length; i++) {\n                const label = document.createElement(\"label\");\n                label.style.position = \"absolute\";\n                label.innerHTML = aLabel[i];\n                label.style.whiteSpace = \"nowrap\";\n                label.style.font = \"FontAwesome\";\n                label.style.fontSize = fontSize + \"px\";\n                label.style.width = \"0px\";\n                label.style.height = \"0px\";\n                instance.area.appendChild(label);\n\n                if (label.scrollWidth > maxWidth) {\n                    maxWidth = label.scrollWidth;\n                }\n\n                if (label.scrollHeight > maxHeight) {\n                    maxHeight = label.scrollHeight;\n                }\n                instance.area.removeChild(label);\n            }\n\n            return [maxWidth, maxHeight];\n        }\n\n        gateShowAvatars(left, top, countX, countY, avatarids, avatars) {\n            const instance = this;\n            if (!avatars || avatars.length === 0) {\n                return; // Exit early if no avatars exist\n            }\n\n            // Delete all previous avatar icons.\n            const elements = document.querySelectorAll('.mmogame-avatar');\n            elements.forEach(element => element.remove());\n\n            const fragment = document.createDocumentFragment();\n\n            instance.avatar = undefined;\n            const count = avatars.length;\n            let leftOriginal = left;\n            let w = Math.round(this.padding / 2) + \"px\";\n            for (let i = 0; i < count; i++) {\n                let avatarImagePath = 'assets/avatars/' + avatars[i];\n                let btn = instance.createCenterImageButton(\n                    fragment,\n                    left, top,\n                    instance.iconSize - instance.padding, instance.iconSize - instance.padding,\n                    'mmogame-avatar',\n                    avatarImagePath\n                );\n                btn.classList.add(\"mmogame-avatar\");\n                let id = avatarids[i];\n                btn.addEventListener(\"click\", () => {\n                    instance.gateUpdateAvatar(btn, id, w);\n                });\n\n                // Move left position after placing the button\n                left += instance.iconSize;\n\n                // Reset left and move to the next row after filling countX buttons\n                if ((i + 1) % countX === 0) {\n                    top += instance.iconSize;\n                    left = leftOriginal;\n                }\n            }\n            instance.area.appendChild(fragment);\n        }\n\n        gateSendGetColorsAvatars(leftPalette, topPalette, countXpalette, countYpalette,\n                                 leftAvatars, topAvatars, countXavatars, countYavatars,\n                                 updatePalette = true, updateAvatars = true) {\n            const instance = this;\n\n            require(['core/ajax'], (Ajax) => {\n                // Defining the parameters to be passed to the service\n                let params = {\n                    mmogameid: instance.mmogameid,\n                    kinduser: instance.kinduser,\n                    user: instance.user,\n                    avatars: updateAvatars ? countXavatars * countYavatars : 0,\n                    colorpalettes: updatePalette ? countXpalette * countYpalette : 0,\n                };\n                // Calling the service through the Moodle AJAX API\n                let getAssets = Ajax.call([{\n                    methodname: 'mod_mmogame_get_assets',\n                    args: params\n                }]);\n\n                // Handling the response\n                getAssets[0].done(({avatarids, avatars, colorpaletteids, colorpalettes}) => {\n                    if (updatePalette) {\n                        instance.gateShowColorPalettes(leftPalette, topPalette, countXpalette, countYpalette,\n                            colorpaletteids, colorpalettes);\n                    }\n                    if (updateAvatars) {\n                        instance.gateShowAvatars(leftAvatars, topAvatars, countXavatars, countYavatars,\n                            avatarids, avatars);\n                    }\n                }).fail((error) => {\n                    return error;\n                });\n            });\n        }\n\n        gateShowColorPalettes(left, top, countX, countY, colorpaletteids, colorpalettes) {\n            const instance = this;\n            let i = 0; // Counter for color palettes\n            const count = colorpalettes.length;\n            this.canvasColor = undefined;\n            const canvasSize = instance.iconSize - instance.padding * 3 / 2;\n            const parsedPalettes = colorpalettes.map(palette =>\n                palette.split(\",\").map(value => parseInt(value, 10) || 0)\n            );\n            const fragment = document.createDocumentFragment();\n            for (let iy = 0; iy < countY; iy++) {\n                for (let ix = 0; ix < countX; ix++) {\n                    // Check if we exceed available palettes or encounter invalid data\n                    if (i >= count || !parsedPalettes[i] || !colorpaletteids[i]) {\n                        i++; // Increment and continue if invalid\n                        continue;\n                    }\n\n                    // Create a new canvas element\n                    let canvas = document.createElement('canvas');\n                    canvas.style.position = \"absolute\";\n                    canvas.style.left = `${left + ix * instance.iconSize}px`;\n                    canvas.style.top = `${top + iy * instance.iconSize}px`;\n                    canvas.width = canvasSize;\n                    canvas.height = canvasSize;\n                    canvas.style.cursor = 'pointer';\n                    canvas.classList.add(\"mmogame_color\");\n\n                    // Append canvas to the area\n                    fragment.appendChild(canvas);\n\n                    // Render the color palette on the canvas\n                    instance.showColorPalette(canvas, parsedPalettes[i]);\n\n                    // Get the palette ID and attach a click event listener\n                    let id = colorpaletteids[i];\n                    canvas.addEventListener(\"click\", () => {\n                        instance.gateUpdateColorPalette(canvas, id);\n                    });\n\n                    i++;\n                }\n            }\n            instance.area.appendChild(fragment);\n        }\n\n        gateUpdateColorPalette(canvas, id) {\n            const instance = this;\n\n            if (instance.canvasColor !== undefined) {\n                instance.canvasColor.style.borderStyle = \"none\";\n            }\n            this.canvasColor = canvas;\n            let w = Math.round(instance.padding / 2) + \"px\";\n\n            Object.assign(canvas.style, {\n                borderStyle: \"outset\",\n                borderLeftWidth: w,\n                borderTopWidth: w,\n                borderRightWidth: w,\n                borderBottomWidth: w,\n            });\n            instance.paletteid = id;\n\n            instance.gateUpdateSubmit();\n        }\n\n        gateUpdateAvatar(avatar, id, w) {\n            const instance = this;\n\n            if (instance.avatar !== undefined) {\n                instance.avatar.style.borderStyle = \"none\";\n            }\n            instance.avatar = avatar;\n            avatar.style.borderStyle = \"outset\";\n\n            avatar.style.borderLeftWidth = w;\n            avatar.style.borderTopWidth = w;\n            avatar.style.borderRightWidth = w;\n            avatar.style.borderBottomWidth = w;\n\n            instance.avatarid = id;\n\n            instance.gateUpdateSubmit();\n        }\n\n        /**\n         * Updates the visibility of the submit button based on form input validation.\n         */\n        gateUpdateSubmit() {\n            const instance = this;\n\n            const isCodeValid = instance.edtCode?.value ? Number(instance.edtCode.value) > 0 : true;\n            const hasAvatar = instance.avatarid !== undefined;\n            const hasPalette = instance.paletteid !== undefined;\n            const hasNickname = instance.edtNickname?.value?.length > 0;\n\n            instance.btnSubmit.style.visibility =\n                isCodeValid && hasAvatar && hasPalette && hasNickname\n                    ? 'visible'\n                    : 'hidden';\n        }\n\n        gateComputeSizes() {\n            const instance = this;\n\n            instance.computeSizes();\n            instance.iconSize = Math.round(0.8 * instance.iconSize);\n            instance.padding = Math.round(0.8 * instance.padding);\n        }\n\n        /**\n         * Creates the screen palette UI with a label and a refresh button.\n         * @param {number} top - The vertical position for the elements.\n         * @param {string} title\n         * @param {string} classLabel\n         * @param {string} classButton\n         * @param {string} src\n         */\n        gateCreateLabelRefresh(top, title, classLabel, classButton, src) {\n            // Create and configure the label\n            const label = this.createDOMElement('label', {\n                parent: this.area,\n                classnames: classLabel,\n                styles: {\n                    position: 'absolute',\n                    font: 'FontAwesome',\n                    fontSize: `${this.fontSize}px`,\n                    width: '0px',\n                    whiteSpace: 'nowrap',\n                    color: this.getContrastingColor(this.colorBackground),\n                    top: `${top}px`,\n                    left: '0px',\n                },\n            });\n            label.innerHTML = title;\n\n            // Button refresh color palettes\n            let button = this.createDOMElement('img', {\n                parent: this.area,\n                classnames: classButton,\n                styles: {\n                    position: 'absolute',\n                    fontSize: `${this.fontSize}px`,\n                    left: `${label.scrollWidth + this.padding}px`,\n                    top: `${top}px`,\n                    height: `${label.scrollHeight}px`,\n                    color: this.getContrastingColor(this.colorBackground),\n                    cursor: 'pointer',\n                },\n                attributes: {\n                    src: src,\n                }\n            });\n\n            return [label, button];\n        }\n/* B\n        gateCreateButtonSubmit = (maxWidth, bottom2) => {\n            this.btnSubmit = this.createImageButton(this.area, 'mmogame-gate-submit',\n                (maxWidth - this.iconSize) / 2, bottom2, 0, this.iconSize,\n                'assets/submit.svg', false, 'submit');\n            this.btnSubmit.style.visibility = 'hidden';\n            this.btnSubmit.addEventListener(\"click\", () => {\n                if (this.edtCode !== undefined) {\n                    this.user = this.edtCode.value;\n                }\n                this.gatePlayGame(true, this.edtNickname.value, this.paletteid, this.avatarid);\n            });\n        };\n*/\n\n        /**\n         * Adds an event listener to refresh colors and avatars.\n         *\n         * @param {HTMLElement} btn - The button to attach the event listener to.\n         * @param {number} topPalette - The Y-coordinate offset for grid positioning.\n         * @param {number} countXpalette - Width of the color grid.\n         * @param {number} countYpalette - Height of the color grid.\n         * @param {number} topAvatars - The Y-coordinate offset for grid positioning.\n         * @param {number} countXavatars - Width of the avatar grid.\n         * @param {number} countYavatars - Height of the avatar grid.\n         * @param {boolean} updateColors - Callback to update colors.\n         * @param {boolean} updateAvatars - Callback to update avatars.\n         */\n        addEventListenerRefresh(btn, topPalette, countXpalette, countYpalette, topAvatars,\n                                countXavatars, countYavatars, updateColors, updateAvatars) {\n            btn.addEventListener(\"click\", () => {\n                const elements = Array.from(this.area.getElementsByClassName(\"mmogame-color\"));\n                elements.forEach(element => element.remove());\n\n                this.gateSendGetColorsAvatars(0, topPalette, countXpalette, countYpalette,\n                    0, topAvatars, countXavatars, countYavatars,\n                    updateColors, updateAvatars);\n            });\n        }\n\n        /**\n         * Creates the main game area.\n         */\n        createArea() {\n            if (this.area) {\n                this.body.removeChild(this.area);\n            }\n\n            this.area = this.createDiv(\n                this.body,\n                'mmogame-area',\n                this.padding,\n                this.areaRect.top,\n                this.areaRect.width,\n                this.areaRect.height\n            );\n        }\n\n        createDivMessage(classnames, message) {\n            const instance = this;\n\n            if (instance.area !== undefined) {\n                instance.body.removeChild(instance.area);\n                instance.area = undefined;\n            }\n\n            if (instance.divMessageHelp !== undefined) {\n                instance.body.removeChild(instance.divMessageHelp);\n                instance.divMessageHelp = undefined;\n            }\n\n            let left = instance.padding;\n            let top = instance.areaRect !== undefined ? instance.areaRect.top : 0;\n            let width = window.innerWidth - 2 * instance.padding;\n            let height = window.innerHeight - instance.getCopyrightHeight() - instance.padding - top;\n\n            instance.createDivMessageDo(classnames, left, top, width, height, message, height);\n\n            instance.divMessage.style.top = (height - instance.divMessage.scrollHeight) / 2 + \"px\";\n        }\n\n        createButtonAvatar(prefixclassname, left, topNickName, widthNickName, heightNickName, topAvatar, widthAvatar, title) {\n            const nickname = this.createDOMElement('div', {\n                classname: `${prefixclassname}-nickname`,\n                parent: this.body,\n                styles: {\n                    left: left,\n                    top: topNickName,\n                    width: widthNickName\n                },\n                attributes: {\n                    title: title\n                }\n            });\n\n            const avatar = this.createDOMElement('img', {\n                classname: `${prefixclassname}-avatar`,\n                parent: this.body,\n                styles: {\n                    left: left,\n                    top: topAvatar,\n                    width: widthAvatar,\n                },\n                attributes: {\n                    title: title\n                }\n            });\n\n\n            return {nickname: nickname, avatar: avatar};\n        }\n\n\n        createDivMessageStart(message) {\n            const instance = this;\n\n            if (instance.area !== undefined) {\n                instance.body.removeChild(instance.area);\n                instance.area = undefined;\n            }\n\n            let left = instance.padding;\n            let top = instance.areaRect.top;\n            let width = window.innerWidth - 2 * instance.padding;\n            let height = window.innerHeight - instance.getCopyrightHeight() - instance.padding - top;\n\n            let height1 = height / 8;\n\n            instance.createDivMessageDo('mmogame-message-start', left, top, width, height, message, height1);\n\n            top += (height1 - instance.divMessage.scrollHeight) / 2;\n            instance.divMessage.style.top = top + \"px\";\n\n            if (instance.divMessageHelp === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"left\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.color = instance.getContrastingColor(this.colorBackground2);\n                let top = instance.iconSize + 3 * instance.padding + height1;\n                div.style.top = (top + instance.padding) + \"px\";\n                div.style.height = (height - height1) + \"px\";\n                instance.divMessageHelp = div;\n                instance.body.appendChild(instance.divMessageHelp);\n\n                instance.showHelpScreen(div, (width - 2 * instance.padding), (height - height1));\n            }\n        }\n\n        updateButtonsAvatar(num, avatar, nickname) {\n            if (avatar === undefined) {\n                avatar = \"\";\n            }\n            if (nickname === undefined) {\n                nickname = \"\";\n            }\n\n            if (avatar === \"\" && nickname === \"\") {\n                this.buttonsAvatar[num].style.visibility = 'hidden';\n                this.divNicknames[num].style.visibility = 'hidden';\n                return;\n            }\n\n            if (this.nicknames[num] !== nickname || nickname === \"\") {\n                this.nicknames[num] = nickname;\n                let s = nickname;\n\n                if (nickname.length === 0) {\n                    s = avatar;\n                    let pos = s.lastIndexOf(\"/\");\n                    if (pos >= 0) {\n                        s = s.slice(pos + 1);\n                    }\n                    pos = s.lastIndexOf(\".\");\n                    if (pos >= 0) {\n                        s = s.slice(0, pos);\n                    }\n                    const filenameWithExt = avatar.split('/').pop(); // Extract the file name with its extension\n                    s = filenameWithExt.split('.').slice(0, -1).join('.'); // Remove the extension from the file name\n                }\n                s = this.repairNickname(s);\n                if (this.divNicknames[num] !== undefined && this.divNicknames[num].innerHTML !== s) {\n                    this.divNicknames[num].innerHTML = s;\n                    this.divNicknames[num].style.textAlign = \"center\";\n                    this.divNicknames[num].style.color = this.getContrastingColor(this.colorsBackground);\n                    this.autoResizeText(this.divNicknames[num], this.divNicknamesWidth[num], this.divNicknamesHeight[num], true,\n                        0, 0, 1);\n                }\n            }\n\n            if (avatar !== this.buttonsAvatarSrc[num]) {\n                this.updateImageButton(this.buttonsAvatar[num], avatar !== \"\" ? \"assets/avatars/\" + avatar : \"\");\n                this.buttonsAvatarSrc[num] = avatar;\n            }\n\n            this.buttonsAvatar[num].alt = this.divNicknames[num].innerHTML;\n\n            this.buttonsAvatar[num].style.visibility = 'visible';\n            this.divNicknames[num].style.visibility = 'visible';\n        }\n\n        /**\n         * Calls the Moodle Web Service 'mmogametype_quiz_get_attempt' and processes the response.\n         *\n         * @param {Object} extraparams - Additional parameters to override default ones.\n         */\n        callGetAttempt(extraparams = undefined) {\n            require(['core/ajax'], (Ajax) => {\n                let params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    nickname: null,\n                    colorpaletteid: null,\n                    avatarid: null,\n                };\n                if (extraparams !== undefined) {\n                    params = {...params, ...extraparams};\n                }\n                // Calling the service through the Moodle AJAX API\n                let getAttempt = Ajax.call([{\n                    methodname: 'mmogametype_quiz_get_attempt',\n                    args: params,\n                }]);\n\n                // Handling the response\n                getAttempt[0].done((response) => {\n                    if (extraparams !== undefined && extraparams.colorpaletteid !== undefined) {\n                        this.openGame();\n                        this.colors = undefined;\n                    }\n                    this.processGetAttempt(JSON.parse(response));\n                }).fail((error) => {\n                    this.createDivMessage('mmogame-error', error.message);\n                    return error;\n                });\n            });\n        }\n\n        createDivMessageDo(classnames, left, top, width, height, message, heightmessage) {\n            if (this.divMessageBackground === undefined) {\n                let div = this.createDiv(this.body, classnames, left, top, width, height);\n                div.style.background = this.getColorHex(this.colorBackground2);\n                this.divMessageBackground = div;\n            }\n\n            if (this.divMessage === undefined) {\n                let div = document.createElement(\"div\");\n                div.style.position = \"absolute\";\n                div.style.left = left + \"px\";\n                div.style.textAlign = \"center\";\n                div.style.width = (width - 2 * this.padding) + \"px\";\n                div.style.paddingLeft = this.padding + \"px\";\n                div.style.paddingRight = this.padding + \"px\";\n\n                div.style.background = this.getColorHex(this.colorBackground2);\n                div.style.color = this.getContrastingColor(this.colorBackground2);\n                this.divMessage = div;\n            }\n            this.divMessage.innerHTML = message;\n            this.body.appendChild(this.divMessage);\n            this.autoResizeText(this.divMessage, width, heightmessage, false, this.minFontSize, this.maxFontSize, 0.5);\n        }\n\n        setColors(colors) {\n            super.setColors(colors);\n\n            this.colorBackground2 = colors[1];\n        }\n\n        /**\n         * Displays an error message on the screen.\n         * @param {string} name - The name of the error context.\n         * @param {Error} [error] - The error object to display.\n         */\n        showError(name, error) {\n            const message = error?.message || 'An unknown error occurred.';\n            this.createDivMessage('mmogame-error', message);\n        }\n};\n});"],"names":["define","MmoGame","isVertical","kindSound","buttonSound","colorBackground2","nickname","user","paletteid","avatarid","edtCode","edtNickname","constructor","super","this","window","innerWidth","innerHeight","getMuteFile","playAudio","audioElement","networkState","play","createButtonSound","left","top","size","createDOMElement","parent","body","classnames","styles","position","width","height","attributes","src","alt","getStringM","role","addEventListener","onClickSound","button","setOptions","gateOpen","mmogameid","pin","kinduser","url","instance","minFontSize","maxFontSize","gateComputeSizes","areaRect","padding","Math","round","getOptions","then","options","kindsound","includes","isReady","gatePlayGame","userGUID","length","gateCreateScreen","catch","error","showError","save","uuid4","callGetAttempt","colorpaletteid","message","createArea","maxHeight","iconSize","maxWidth","labels","fontSize","findbest","gateComputeLabelSize","heightColors","floor","heightAvatars","gateCreateScreenDo","gateCreateNickName","lblPalette","btnPalette","gateCreateLabelRefresh","scrollHeight","topGridPalette","gridHeightPalette","countX","countYpalette","lblAvatars","btnAvatars","gridHeightAvatars","countYavatars","addEventListenerRefresh","gateSendGetColorsAvatars","gateCreateSubmit","lblNickName","area","color","getContrastingColor","colorBackground","innerHTML","leftEdit","scrollWidth","debounce","gateUpdateSubmit","max","btnSubmit","cursor","visibility","undefined","value","aLabel","i","label","document","createElement","style","whiteSpace","font","appendChild","removeChild","gateShowAvatars","countY","avatarids","avatars","querySelectorAll","forEach","element","remove","fragment","createDocumentFragment","avatar","count","leftOriginal","w","avatarImagePath","btn","createCenterImageButton","classList","add","id","gateUpdateAvatar","leftPalette","topPalette","countXpalette","leftAvatars","topAvatars","countXavatars","updatePalette","arguments","updateAvatars","require","Ajax","params","colorpalettes","call","methodname","args","done","_ref","colorpaletteids","gateShowColorPalettes","fail","canvasColor","canvasSize","parsedPalettes","map","palette","split","parseInt","iy","ix","canvas","showColorPalette","gateUpdateColorPalette","borderStyle","Object","assign","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","_instance$edtCode","_instance$edtNickname","_instance$edtNickname2","isCodeValid","Number","hasAvatar","hasPalette","hasNickname","computeSizes","title","classLabel","classButton","updateColors","Array","from","getElementsByClassName","createDiv","createDivMessage","divMessageHelp","getCopyrightHeight","createDivMessageDo","divMessage","createButtonAvatar","prefixclassname","topNickName","widthNickName","heightNickName","topAvatar","widthAvatar","classname","createDivMessageStart","height1","div","textAlign","paddingLeft","paddingRight","showHelpScreen","updateButtonsAvatar","num","buttonsAvatar","divNicknames","nicknames","s","pos","lastIndexOf","slice","pop","join","repairNickname","colorsBackground","autoResizeText","divNicknamesWidth","divNicknamesHeight","buttonsAvatarSrc","updateImageButton","extraparams","response","openGame","colors","processGetAttempt","JSON","parse","heightmessage","divMessageBackground","background","getColorHex","setColors","name"],"mappings":"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"}