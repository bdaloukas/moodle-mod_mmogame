{"version":3,"file":"mmogametypequiz.min.js","sources":["../src/mmogametypequiz.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mod_mmogame/mmogameui'], function(MmoGameUI) {\n    return class MmoGameTypeQuiz extends MmoGameUI {\n        kinduser;\n        user;\n        url;\n        pin;\n        labelTimer;\n        timeForSendFastJson = 3000;\n        timefastjson;\n        type;\n\n        // Colors.\n        colorScore;\n        colorScore2;\n\n        /**\n         * Base class for Quiz mmmogame\n         *\n         * @module mmogametype_quiz\n         * @copyright 2024 Vasilis Daloukas\n         * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n         */\n\n        constructor(type) {\n            super();\n            this.type = type;\n        }\n\n        /**\n         * Initializes the game by loading required audio assets.\n         */\n        openGame() {\n            super.openGame(); // Call the parent class method\n\n            // Optimized Audio Loading\n            this.audioYes = new Audio('assets/yes1.mp3');\n            this.audioYes.load();\n            this.audioNo = new Audio('assets/no1.mp3');\n            this.audioNo.load();\n        }\n\n        /**\n         * Creates a vertical layout for the quiz screen.\n         *\n         * @param {number}left\n         * @param {number}top\n         * @param {number}width\n         * @param {boolean}onlyMetrics\n         * @param {number}fontSize\n         * @param {boolean} disabled - Whether user input should be disabled.\n         */\n        createAnswer(left, top, width, onlyMetrics, fontSize, disabled) {\n            return this.createAnswerMultichoice(left, top, width, onlyMetrics, fontSize, disabled);\n        }\n\n        /**\n         * Creates multiple-choice answer options.\n         *\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} width - The maximum width available for answers.\n         * @param {boolean} onlyMetrics - Whether to only calculate size metrics.\n         * @param {number} fontSize - The font size for answer text.\n         * @param {boolean} disabled - Whether the answers are disabled.\n         * @returns {number} The total height used by the answer options.\n         */\n        createAnswerMultichoice(left, top, width, onlyMetrics, fontSize, disabled) {\n            const n = this.answers ? this.answers.length : 0;\n            const aChecked = this.answer;\n            const fragment = document.createDocumentFragment(); // âœ… Batch DOM updates\n\n            const retSize = [0, 0];\n            const checkboxSize = Math.round(fontSize);\n            this.aItemAnswer = Array(n);\n            this.aItemLabel = Array(n);\n            this.aItemCorrectX = new Array(n);\n\n            // Iterate over each answer\n            for (let i = 0; i < n; i++) {\n                const label = this.createDOMElement('label', {\n                    parent: null,\n                    classnames: 'mmogame-quiz-label' + i,\n                    styles: {\n                        position: 'absolute',\n                        width: `${width - fontSize - this.padding}px`,\n                        fontSize: `${fontSize}px`,\n                        color: this.getContrastingColor(this.colorBackground),\n                    }\n                });\n                label.innerHTML = this.answers[i];\n\n                if (onlyMetrics) {\n                    this.area.appendChild(label);\n                    const newSize = label.scrollWidth + fontSize + this.padding;\n                    retSize[0] = Math.max(retSize[0], newSize);\n                    retSize[1] += Math.max(label.scrollHeight, fontSize) + this.padding;\n                    this.area.removeChild(label);\n                    continue;\n                }\n\n                label.htmlFor = \"mmogame_quiz_input\" + i;\n                label.style.left = `${left + fontSize + this.padding}px`;\n                label.style.top = `${top}px`;\n                label.style.align = \"left\";\n                label.style.color = this.getContrastingColor(this.colorBackground);\n\n                // Create the checkbox\n                const checked = aChecked !== undefined && aChecked !== null && aChecked.includes(this.answersID[i]);\n                const item = this.createRadiobox(this.body, checkboxSize, this.colorBackground2, this.colorScore,\n                    checked, disabled);\n                item.style.position = \"absolute\";\n                item.style.left = `${left}px`;\n                item.style.top = `${top}px`;\n                item.id = \"mmogame_quiz_input\" + i;\n\n                // Event listeners for interactions\n                item.addEventListener('click', () => {\n                    if (!item.classList.contains(\"disabled\")) {\n                        this.onClickRadio(i, this.colorBackground2, this.colorScore);\n                    }\n                });\n\n                label.addEventListener('click', () => {\n                    this.onClickRadio(i, this.colorBackground2, this.colorScore);\n                });\n\n                fragment.appendChild(item);\n                this.area.appendChild(label);\n\n                const heightLabel = label.scrollHeight;\n                if (heightLabel > fontSize) {\n                    item.style.top = Math.round(top + (heightLabel - fontSize) / 2) + \"px\";\n                }\n\n                this.aItemAnswer[i] = item;\n                this.aItemCorrectX[i] = left + fontSize + this.padding;\n                this.aItemLabel[i] = label;\n\n                // Adjust positioning\n                top += Math.max(label.scrollHeight, fontSize) + this.padding;\n            }\n\n            this.area.appendChild(fragment); // Batch insert into DOM\n\n            return onlyMetrics ? retSize : top;\n        }\n\n        /**\n         * Handles radio button click events for answers.\n         *\n         * @param {number} index - The index of the clicked radio button.\n         * @param {string} colorBack - The background color for the radio button.\n         * @param {string} color - The color for the radio button when selected.\n         */\n        onClickRadio(index, colorBack, color) {\n            if (this.aItemAnswer[index].classList.contains(\"disabled\")) {\n                return;\n            }\n\n            // Update the selected radio button and deselect others\n            this.aItemAnswer.forEach((item, i) => {\n                const isDisabled = item.classList.contains(\"disabled\");\n                if (i === index) {\n                    item.classList.add(\"checked\");\n                    this.answerid = this.answersID[i];\n                } else {\n                    item.classList.remove(\"checked\");\n                }\n\n                this.drawRadio(item, isDisabled ? colorBack : 0xFFFFFF, color);\n            });\n\n            // Send the answer\n            this.callSetAnswer();\n        }\n\n        /**\n         * Generates an SVG for a correct or incorrect icon.\n         *\n         * @param {number} size - The size of the SVG.\n         * @param {boolean} iscorrect - Whether the answer is correct.\n         * @param {int} colorCorrect - Color for correct answers.\n         * @param {int} colorError - Color for incorrect answers.\n         * @returns {string} The SVG markup as a string.\n         */\n        getSVGcorrect(size, iscorrect, colorCorrect, colorError) {\n            if (iscorrect) {\n                let c = colorCorrect !== undefined ? this.getColorHex(colorCorrect) : '#398439';\n                return \"<svg aria-hidden=\\\"true\\\" class=\\\"svg-icon iconCheckmarkLg\\\" width=\\\"\" + size + \"\\\" height=\\\"\" + size +\n                    \"\\\" viewBox=\\\"0 0 36 36\\\"><path fill=\\\"\" + c + \"\\\" d=\\\"m6 14 8 8L30 6v8L14 30l-8-8v-8z\\\"></path></svg>\";\n            } else {\n                let c = colorError !== undefined ? this.getColorHex(colorError) : '#398439';\n                return \"<svg width=\\\"\" + size + \"\\\" height=\\\"\" + size +\n                    \"\\\" class=\\\"bi bi-x-lg\\\" viewBox=\\\"0 0 18 18\\\"> <path fill=\\\"\" + c +\n                    `\" d=\"M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 \n                1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z\"/></svg>`;\n            }\n        }\n\n        /**\n         * Disables all answer inputs to prevent further interaction.\n         */\n        disableInput() {\n            if (!this.aItemAnswer) {\n                return;\n            }\n\n            this.aItemAnswer.forEach(item => {\n                item.classList.add(\"disabled\");\n                item.setAttribute(\"disabled\", \"true\"); // Ensuring proper disabling\n                this.drawRadio(item, this.colorScore, this.colorBackground2); // Update styling\n            });\n        }\n        /**\n         * Sends periodic fast JSON updates to the server.\n         */\n        /**\n         * Improved AJAX request using Fetch API instead of XMLHttpRequest\n         */\n        async sendFastJSON() {\n            // Clear any existing timeout before setting a new one\n            if (this.timeoutFastJSON !== undefined) {\n                clearTimeout(this.timeoutFastJSON);\n            }\n\n            this.timeoutFastJSON = setTimeout(async() => {\n                try {\n                    // Create URL-encoded form data\n                    const formData = new URLSearchParams();\n                    formData.append(\"fastjson\", this.fastjson.toString());\n                    formData.append(\"type\", this.type);\n\n                    // Send POST request with application/x-www-form-urlencoded format\n                    const response = await fetch(`${this.url}/state.php`, {\n                        method: 'POST',\n                        headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n                        body: formData.toString(),\n                    });\n\n                    // Check if the response is successful\n                    if (!response.ok) {\n                        throw new Error(`Server responded with status ${response.status}`);\n                    }\n\n                    // Read server response\n                    const data = await response.text();\n                    this.processFastJson(data);\n                } catch (error) {\n                    this.showError('Error sending Fast JSON:', error);\n                }\n            }, this.timeForSendFastJson);\n        }\n\n\n        getStringT(name) {\n            return M.util.get_string(name, 'mmogametype_quiz');\n        }\n\n        /**\n         * Creates a percentage-based score display using createDOMElement.\n         *\n         * @param {any} parent\n         * @param {string} prefixclassname\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {boolean} createAddScore\n         * @param {number} colorBackground\n         * */\n        createDivScorePercent(parent, prefixclassname, left, top,\n                              createAddScore, colorBackground) {\n            const colorText = this.getContrastingColor(colorBackground);\n            // Create the main button container\n            const divMain = this.createDOMElement('div', {\n                parent: parent,\n                classnames: `${prefixclassname}-main`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                    border: \"0px solid \" + this.getColorHex(colorBackground),\n                    boxShadow: \"inset 0 0 0.125em rgba(255, 255, 255, 0.75)\",\n                    background: this.getColorHex(colorBackground),\n                    color: colorText,\n                    borderRadius: createAddScore ? `${this.iconSize / 10}px` : `${this.iconSize}px`,\n                },\n                attributes: {\n                    disabled: true,\n                    innerHTML: '',\n                },\n            });\n\n            const cellSize = Math.round(this.iconSize / 2);\n\n            let lblAddScore;\n            if (createAddScore) {\n                // Create the additional score label (line3)\n                lblAddScore = this.createDOMElement('div', {\n                    parent: parent,\n                    classnames: `${prefixclassname}-addscore`,\n                    styles: {\n                        position: 'absolute',\n                        left: `${left}px`,\n                        width: `${cellSize}px`,\n                        top: `${top}px`,\n                        height: `${cellSize}px`,\n                        textAlign: 'center',\n                        fontWeight: 'bold',\n                        color: colorText,\n                    },\n                    attributes: {\n                        title: this.getStringM('js_add_score'),\n                    },\n                });\n            }\n\n            // Create the ranking grade label (line1)\n            const lblRank = this.createDOMElement('div', {\n                parent: parent,\n                classnames: `${prefixclassname}-rank`,\n                styles: {\n                    position: 'absolute',\n                    left: `${createAddScore ? left + cellSize : left}px`,\n                    width: `${createAddScore ? cellSize : 2 * cellSize}px`,\n                    top: `${top}px`,\n                    height: `${cellSize}px`,\n                    textAlign: 'center',\n                    color: colorText,\n                },\n                attributes: {\n                    title: this.getStringM('js_ranking'),\n                },\n            });\n\n            // Create the main score label (line2)\n            const lblScore = this.createDOMElement('div', {\n                parent: parent,\n                classnames: `${prefixclassname}-score`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    width: `${createAddScore ? cellSize : 2 * cellSize}px`,\n                    top: `${top + cellSize}px`,\n                    height: `${cellSize}px`,\n                    lineHeight: `${cellSize}px`,\n                    textAlign: 'center',\n                    color: colorText,\n                },\n                attributes: {\n                    title: this.getStringM('js_grade'),\n                },\n            });\n\n            // Create the percentage label (line2)\n            let lblPercent;\n            if (createAddScore) {\n                lblPercent = this.createDOMElement('div', {\n                    parent: parent,\n                    classnames: `${prefixclassname}-percent`,\n                    styles: {\n                        position: 'absolute',\n                        left: `${left + cellSize}px`,\n                        width: `${cellSize}px`,\n                        top: `${top + cellSize}px`,\n                        height: `${cellSize}px`,\n                        textAlign: 'center',\n                        lineHeight: `${cellSize}px`,\n                        color: colorText,\n                    },\n                    attributes: {\n                        title: this.getStringM('js_percent'),\n                    },\n                });\n            }\n\n            return {divMain: divMain, lblRank: lblRank, lblScore: lblScore, lblPercent: lblPercent,\n                lblAddScore: lblAddScore, cellSize: cellSize};\n        }\n\n        showScore(player, score, rank, percent, rankpercent, showPercent) {\n            let boldScore = false;\n            let boldPercent = false;\n            if (rank !== undefined && rankpercent !== undefined) {\n                if (parseInt(rankpercent) < parseInt(rank)) {\n                    boldScore = true;\n                    rank = rankpercent;\n                } else if (parseInt(rankpercent) === parseInt(rank)) {\n                    boldScore = true;\n                    boldPercent = true;\n                }\n            }\n\n            if (rank !== '') {\n                player.lblRank.innerHTML = `# ${rank}`;\n                this.autoResizeText(player.lblRank, player.cellSize, player.cellSize, false, 0, 0);\n            } else {\n                player.lblRank.innerHTML = '';\n            }\n\n            let s = boldScore ? `<b>${score}</b>` : score;\n            if (player.cacheScore !== s) {\n                player.cacheScore = s;\n                player.lblScore.innerHTML = s;\n                const width = showPercent ? player.cellSize : 2 * player.cellSize;\n                this.autoResizeText(player.lblScore, width, player.cellSize, false, 0, 0);\n            }\n\n            if (showPercent) {\n                s = percent === '' ? '' : (boldPercent ? `<b>${Math.round(100 * percent)} </b>` : Math.round(100 * percent)) + '%';\n                if (player.lblPercent !== undefined) {\n                    if (player.cachePercent !== s) {\n                        player.cachePercent = s;\n                        player.lblPercent.innerHTML = s;\n                        this.autoResizeText(player.lblPercent, player.cellSize - this.padding, player.cellSize, false, 0, 0);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Creates and displays the definition area for the question.\n         *\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} width - The width of the definition area.\n         * @param {number} height - The height of the definition area.\n         * @param {boolean} onlyMetrics - Whether to only measure size.\n         * @param {number} fontSize - The font size for the definition text.\n         * @param {string} definition\n         * @returns {Array} The width and height of the definition area.\n         */\n        createDefinition(left, top, width, height, onlyMetrics, fontSize, definition) {\n            const definitionDiv = this.createDOMElement(\n                'div',\n                {\n                    parent: null,\n                    classnames: 'mmogame-quiz-definition',\n                    styles: {\n                        position: 'absolute',\n                        width: `${width}px`,\n                        fontSize: `${fontSize}px`,\n                    }\n                }\n            );\n            definitionDiv.innerHTML = definition;\n\n            if (onlyMetrics) {\n                document.body.appendChild(definitionDiv);\n\n                const size = [definitionDiv.scrollWidth, definitionDiv.scrollHeight];\n\n                document.body.removeChild(definitionDiv);\n                return size;\n            }\n\n            // Apply styling and position\n            definitionDiv.style.background = this.getColorHex(this.colorBackground2);\n            definitionDiv.style.color = this.getContrastingColor(this.colorBackground2);\n            definitionDiv.style.left = `${left}px`;\n            definitionDiv.style.top = `${top}px`;\n            if (height !== 0) {\n                definitionDiv.style.height = `${height}px`;\n            }\n            definitionDiv.style.padding = `0 ${this.padding}px`;\n\n            this.area.appendChild(definitionDiv);\n\n            return [definitionDiv.scrollWidth, definitionDiv.scrollHeight];\n        }\n\n        /**\n         * Sends the selected answer to the server using Moodle's AJAX API.\n         * @param {string} subcommand\n         */\n        callSetAnswer(subcommand = '') {\n            // Clear existing timeout\n            if (this.timerTimeout !== undefined) {\n                clearTimeout(this.timerTimeout);\n            }\n\n            this.timerTimeout = undefined;\n\n            require(['core/ajax'], (Ajax) => {\n                const params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    attempt: this.attempt,\n                    answer: this.answer || null,\n                    answerid: this.answerid || null,\n                    subcommand: subcommand,\n                };\n\n                Ajax.call([{\n                    methodname: 'mmogametype_quiz_set_answer', // API endpoint\n                    args: params,\n                }])[0].done((response) => {\n                    this.processSetAnswer(JSON.parse(response)); // Process the server's response\n                }).fail((error) => {\n                    this.showError(error); // Handle errors\n                });\n            });\n        }\n\n        /**\n         * Sets the colors for different UI elements and repairs them if necessary.\n         *\n         * @param {Array} colors - Array of color codes to be applied.\n         */\n        setColors(colors) {\n            super.setColors(colors);\n\n            // Assign specific colors to UI elements\n            this.colorScore = colors[2];\n            this.colorScore2 = colors[4];\n        }\n\n        updateNicknameAvatar(player, avatarSrc, nickname, nicknameWidth, nicknameHeight) {\n            if (avatarSrc === undefined) {\n                avatarSrc = \"\";\n            }\n            if (nickname === undefined) {\n                nickname = \"\";\n            }\n\n            if (avatarSrc === \"\" && nickname === \"\") {\n                player.avatarElement.style.visibility = 'hidden';\n                player.nicknameElement.style.visibility = 'hidden';\n                return;\n            }\n\n            if (player.cacheNickname !== nickname || nickname === \"\") {\n                player.cacheNickname = nickname;\n                let s = nickname;\n\n                if (nickname.length === 0) {\n                    const filenameWithExt = avatarSrc.split('/').pop(); // Extract file name\n                    // Remove extension, fallback if no extension\n                    s = filenameWithExt.split('.').slice(0, -1).join('.') || filenameWithExt;\n                }\n\n                s = this.repairNickname(s);\n                player.nicknameElement.innerHTML = s;\n                player.nicknameElement.style.textAlign = \"center\";\n                player.nicknameElement.style.color = this.getContrastingColor(this.colorBackground);\n                this.autoResizeText(player.nicknameElement, nicknameWidth, nicknameHeight, true, 0, 0);\n            }\n\n            if (avatarSrc !== player.cacheAvatar) {\n                player.avatarElement.src = avatarSrc !== \"\" ? \"assets/avatars/\" + avatarSrc : \"\";\n                player.cacheAvatar = avatarSrc;\n            }\n\n            player.avatarElement.alt = player.cacheNickname;\n            player.avatarElement.style.visibility = 'visible';\n\n            player.nicknameElement.style.visibility = 'visible';\n        }\n\n        computeBestFontSize(json) {\n            let maxHeight, definitionWidth;\n\n            maxHeight = this.areaRect.height - this.iconSize - 3 * this.padding;\n            definitionWidth = this.isVertical ? this.areaRect.width : Math.round((this.areaRect.width - this.padding) / 2);\n\n            for (let step = 1; step <= 2; step++) {\n                let defSize;\n                this.fontSize = this.findbest(step === 1 ? this.minFontSize : this.minFontSize / 2, this.maxFontSize,\n                    (fontSize) => {\n                        defSize = this.createDefinition(0, 0, definitionWidth, 0, true, fontSize,\n                            json);\n                        if (defSize[0] > definitionWidth) {\n                            return 1;\n                        }\n                        let ansSize = this.createAnswer(0, 0, definitionWidth, true, fontSize, false);\n                        if (ansSize[0] > definitionWidth) {\n                            return 1;\n                        }\n                        if (this.isVertical) {\n                            return defSize[1] + ansSize[1] < maxHeight ? -1 : 1;\n                        } else {\n                            return defSize[1] < maxHeight && ansSize[1] < maxHeight ? -1 : 1;\n                        }\n                    });\n                if (defSize[0] <= definitionWidth && defSize[1] <= this.areaRect.height) {\n                    break;\n                }\n            }\n            return [definitionWidth];\n        }\n\n        createNextButton(left, top) {\n            let btn = super.createImageButton(this.area, 'mmogame-quiz-next',\n                left, top, 0, this.iconSize, 'assets/next.svg');\n            btn.title = this.getStringM('js_next_question');\n            btn.addEventListener(\"click\", () => {\n                this.callGetAttempt();\n                this.area.removeChild(btn);\n            });\n        }\n\n        processFastJson(response) {\n            if (response === '') {\n                this.sendFastJSON();\n                return;\n            }\n            let a = response.split('-'); // Are state,timefastjson.\n            let newstate = a.length > 0 ? parseInt(a[0]) : 0;\n            let newTimeFastJSON = a.length > 1 ? parseInt(a[1]) : 0;\n\n            if (this.timefastjson === null) {\n                this.timefastjson = 0;\n            }\n\n            if (newstate !== this.state || newTimeFastJSON !== this.timefastjson) {\n                this.removeMessageDivs();\n                this.callGetAttempt();\n                return;\n            }\n\n            this.sendFastJSON();\n        }\n\n        processGetAttempt(json) {\n            this.fastjson = parseInt(json.fastjson);\n            this.timefastjson = parseInt(json.timefastjson);\n\n            // Calculate time difference and set up the clock\n            this.computeDifClock(json.time);\n        }\n    };\n    });"],"names":["define","MmoGameUI","kinduser","user","url","pin","labelTimer","timeForSendFastJson","timefastjson","type","colorScore","colorScore2","constructor","super","this","openGame","audioYes","Audio","load","audioNo","createAnswer","left","top","width","onlyMetrics","fontSize","disabled","createAnswerMultichoice","n","answers","length","aChecked","answer","fragment","document","createDocumentFragment","retSize","checkboxSize","Math","round","aItemAnswer","Array","aItemLabel","aItemCorrectX","i","label","createDOMElement","parent","classnames","styles","position","padding","color","getContrastingColor","colorBackground","innerHTML","area","appendChild","newSize","scrollWidth","max","scrollHeight","removeChild","htmlFor","style","align","checked","includes","answersID","item","createRadiobox","body","colorBackground2","id","addEventListener","classList","contains","onClickRadio","heightLabel","index","colorBack","forEach","isDisabled","add","answerid","remove","drawRadio","callSetAnswer","getSVGcorrect","size","iscorrect","colorCorrect","colorError","undefined","getColorHex","disableInput","setAttribute","sendFastJSON","timeoutFastJSON","clearTimeout","setTimeout","async","formData","URLSearchParams","append","fastjson","toString","response","fetch","method","headers","ok","Error","status","data","text","processFastJson","error","showError","getStringT","name","M","util","get_string","createDivScorePercent","prefixclassname","createAddScore","colorText","divMain","iconSize","height","border","boxShadow","background","borderRadius","attributes","cellSize","lblAddScore","textAlign","fontWeight","title","getStringM","lblRank","lblScore","lineHeight","lblPercent","showScore","player","score","rank","percent","rankpercent","showPercent","boldScore","boldPercent","parseInt","autoResizeText","s","cacheScore","cachePercent","createDefinition","definition","definitionDiv","subcommand","arguments","timerTimeout","require","Ajax","params","mmogameid","attempt","call","methodname","args","done","processSetAnswer","JSON","parse","fail","setColors","colors","updateNicknameAvatar","avatarSrc","nickname","nicknameWidth","nicknameHeight","avatarElement","visibility","nicknameElement","cacheNickname","filenameWithExt","split","pop","slice","join","repairNickname","cacheAvatar","src","alt","computeBestFontSize","json","maxHeight","definitionWidth","areaRect","isVertical","step","defSize","findbest","minFontSize","maxFontSize","ansSize","createNextButton","btn","createImageButton","callGetAttempt","a","newstate","newTimeFastJSON","state","removeMessageDivs","processGetAttempt","computeDifClock","time"],"mappings":"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"}