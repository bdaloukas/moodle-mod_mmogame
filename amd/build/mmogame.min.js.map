{"version":3,"file":"mmogame.min.js","sources":["../src/mmogame.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine([''], function() {\n    return class MmoGame {\n        // Define default properties with appropriate types\n        state; // State of the game\n        body;\n        minFontSize;\n        maxFontSize;\n        fontSize;\n        iconSize;\n        padding;\n        cIcons;\n\n        // UI element placeholders\n        area;\n\n        // Colors\n        colorBackground;\n\n        // Timer variables\n        timestart = 0;\n        timeclose = 0;\n\n        /**\n         * Initialize game properties and compute initial sizes.\n         *\n         * @module mmogame\n         * @copyright 2024 Vasilis Daloukas\n         * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n         */\n        constructor() {\n            // Initialize default properties.\n            this.kindSound = 0;\n            this.state = 0;\n            this.minFontSize = 0;\n            this.maxFontSize = 0;\n            this.fontSize = 0;\n            this.iconSize = 0;\n            this.padding = 0;\n            this.body = document.getElementsByTagName(\"body\")[0];\n            this.setColorsString();\n\n            // Compute and set font size properties.\n            let size = parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue('font-size'));\n            this.minFontSize = size;\n            this.maxFontSize = 2 * size;\n            this.fontSize = size;\n        }\n\n        // UI element creation methods\n        /**\n         * Creates a DOM element with specified attributes and styles.\n         * @param {string} tag - The HTML tag to create (e.g., 'div', 'img').\n         * @param {Object} options - Configuration for the element.\n         * @param {HTMLElement} options.parent - Parent element where the new element will be appended.\n         * @param {string} [options.classnames] - Space-separated string of CSS class names.\n         * @param {Object} [options.styles] - Inline styles for the element.\n         * @param {Object} [options.attributes] - Attributes for the element (e.g., src, alt, role).\n         * @returns {HTMLElement} - The created DOM element.\n         */\n        createDOMElement(tag, {parent, classnames = '', styles = {}, attributes = {}} = {}) {\n            const element = document.createElement(tag);\n\n            // Apply classes\n            if (classnames) {\n                element.classList.add(...classnames.split(/\\s+/));\n            }\n\n            // Apply styles\n            Object.assign(element.style, styles);\n\n            // Apply attributes\n            Object.entries(attributes).forEach(([key, value]) => {\n                if (value !== undefined && value !== null) {\n                    element.setAttribute(key, value);\n                }\n            });\n\n            // Append to parent\n            if (parent) {\n                parent.appendChild(element);\n            }\n\n            return element;\n        }\n\n        /**\n         * Creates a <div> element.\n         *\n         * @param {HTMLElement} parent - The parent element.\n         * @param {string} classnames - Horizontal position in pixels.\n         * @param {number} left - Horizontal position in pixels.\n         * @param {number} top - Vertical position in pixels.\n         * @param {number} width - Width of the <div>.\n         * @param {number} height - Height of the <div>.\n         * @returns {HTMLElement} - The created <div> element.\n         */\n        createDiv(parent, classnames, left, top, width, height) {\n            return this.createDOMElement('div', {\n                parent,\n                classnames,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${width}px`,\n                    height: `${height}px`,\n                },\n            });\n        }\n\n        /**\n         * Creates an <img> element.\n         *\n         * @param {HTMLElement} parent - The parent element.\n         * @param {string} classnames - List of classes separated by space.\n         * @param {number} left - Horizontal position in pixels.\n         * @param {number} top - Vertical position in pixels.\n         * @param {number} width - Width of the <img> element.\n         * @param {number} height - Height of the <img> element.\n         * @param {string} filename - The source file for the image.\n         * @returns {HTMLElement} - The created <img> element.\n         */\n        createImage(parent, classnames, left, top, width, height, filename) {\n            const styles = {\n                position: 'absolute',\n                left: `${left}px`,\n                top: `${top}px`,\n            };\n\n            // Only add width to styles if it's not 0\n            if (width !== 0) {\n                styles.width = `${width}px`;\n            }\n\n            // Only add height to styles if it's not 0\n            if (height !== 0) {\n                styles.height = `${height}px`;\n            }\n\n            const attributes = {draggable: false};\n            if (filename !== '') {\n                attributes.src = filename;\n            }\n\n            return this.createDOMElement('img', {\n                parent,\n                classnames,\n                styles,\n                attributes,\n            });\n        }\n\n        // For check\n        createButton(parent, classnames, left, top, width, height, src, alt, role = 'button') {\n            return this.createDOMElement('img', {\n                parent,\n                classnames,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${width}px`,\n                    height: `${height}px`,\n                },\n                attributes: {src, alt, role},\n            });\n        }\n\n        // Game logic and utility methods\n\n        /**\n         * Compute sizes for icons and padding based on the screen dimensions.\n         */\n        computeSizes() {\n            const cIcons = Math.max(this.cIcons || 5, 5);\n            const maxIconWidth = window.innerWidth / cIcons;\n            const maxIconHeight = window.innerHeight / 5;\n\n            this.iconSize = Math.min(maxIconWidth, maxIconHeight);\n            const adjustment = this.iconSize / 10 / cIcons;\n            this.iconSize = Math.round(this.iconSize - adjustment);\n            this.padding = Math.round(this.iconSize / 10);\n            this.iconSize -= this.padding;\n        }\n\n        /**\n         * Creates a centered image button with automatic scaling.\n         * @param {HTMLElement} parent - The parent element where the button will be appended.\n         * @param {number} left - The left position of the container in pixels.\n         * @param {number} top - The top position of the container in pixels.\n         * @param {number} width - The width of the container in pixels.\n         * @param {number} height - The height of the container in pixels.\n         * @param {string} classname - Additional CSS classes to apply to the button.\n         * @param {string} filename - The source URL of the image.\n         * @returns {HTMLElement} - The created image button element.\n         */\n        createCenterImageButton(parent, left, top, width, height, classname, filename) {\n            const button = this.createDOMElement('img', {\n                parent,\n                classnames: `mmogame_imgbutton ${classname}`,\n                styles: {\n                    position: 'absolute',\n                    draggable: false,\n                },\n            });\n\n            const img = new Image();\n            img.onload = function() {\n                if (this.width > 0 && this.height > 0) {\n                    const mul = Math.min(width / this.width, height / this.height);\n                    const w = Math.round(this.width * mul);\n                    const h = Math.round(this.height * mul);\n\n                    Object.assign(button.style, {\n                        width: `${w}px`,\n                        height: `${h}px`,\n                        left: `${left + width / 2 - w / 2}px`,\n                        top: `${top + height / 2 - h / 2}px`,\n                    });\n\n                    button.src = filename;\n                }\n            };\n            img.src = filename;\n\n            return button;\n        }\n\n        hasHelp() {\n            return false;\n        }\n\n        /**\n         * Clear all children of the <body> element.\n         */\n        clearBodyChildren() {\n            this.removeDivMessage();\n            let child;\n            while ((child = this.body.firstChild)) {\n                this.body.removeChild(child);\n            }\n            this.area = undefined;\n        }\n\n        /**\n         * Opens the game by resetting the body and computing sizes.\n         */\n        openGame() {\n            this.clearBodyChildren();\n            this.computeSizes();\n        }\n\n        autoResizeText(item, width, height, wrap, minFontSize, maxFontSize) {\n            const text = item.innerHTML.toString();\n\n            if (text.length === 0) {\n                return;\n            }\n\n            const tempDiv = document.createElement(\"div\");\n            tempDiv.style.visibility = \"hidden\";\n            tempDiv.style.position = \"absolute\";\n            tempDiv.style.whiteSpace = wrap ? \"normal\" : \"nowrap\";\n\n            this.body.appendChild(tempDiv);\n\n            let low = Math.max(1, minFontSize);\n            let up = maxFontSize || Math.min(width, height);\n\n            let fitSize = low;\n            let fitHeight = 0;\n            let newHeight = 0;\n            let newWidth = 0;\n\n            let step = 1;\n            let fontSize;\n            for (; step <= 10; step++) {\n                fontSize = (low + up) / 2;\n                tempDiv.style.fontSize = `${fontSize}px`;\n                tempDiv.style.width = `${width}px`;\n                tempDiv.style.height = `0`;\n                tempDiv.innerHTML = text;\n\n                newHeight = tempDiv.scrollHeight;\n                newWidth = tempDiv.scrollWidth - 1;\n                if (newWidth > width || newHeight > height) {\n                    up = fontSize;\n                } else {\n                    low = fontSize;\n                    if (Math.abs(fitHeight - newHeight) <= 2) {\n                        break;\n                    }\n                    fitSize = fontSize;\n                    fitHeight = newHeight;\n                }\n            }\n            item.style.fontSize = `${fitSize}px`;\n            this.body.removeChild(tempDiv);\n        }\n\n        pad(num, size) {\n            let s = num + \"\";\n            while (s.length < size) {\n                s = \"0\" + s;\n            }\n            return s;\n        }\n\n        uuid4() {\n            const hexDigits = '0123456789abcdef';\n            const uuid = [...Array(36)].map(() => hexDigits[Math.floor(Math.random() * 16)]);\n            uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n            uuid[14] = '4';\n            // eslint-disable-next-line no-bitwise\n            uuid[19] = hexDigits[(parseInt(uuid[19], 16) & 0x3) | 0x8];\n\n            this.user = uuid.join('');\n\n            let options = {userGUID: this.user};\n            this.setOptions(options)\n                .then(() => true) // Arrow function for resolving promise\n                .catch(error => { // Arrow function for handling errors\n                    this.showError(error.message);\n                    return false;\n                });\n        }\n\n        getCopyrightHeight() {\n            return Math.round(this.iconSize / 3);\n        }\n\n        /**\n         * Returns the hex color string for a given color code.\n         *\n         * @param {Number} colorCode - The color code.\n         * @returns {string} Hexadecimal representation of the color.\n         */\n        getColorHex(colorCode) {\n            return `#${colorCode.toString(16).padStart(6, '0').toUpperCase()}`;\n        }\n\n        /**\n         * Calculates contrast value for a given color.\n         *\n         * @param {Number} colorCode - The color code.\n         * @returns {Number} Contrast value.\n         */\n        getContrast(colorCode) {\n            // eslint-disable-next-line no-bitwise\n            const r = (colorCode >> 16) & 0xff;\n            // eslint-disable-next-line no-bitwise\n            const g = (colorCode >> 8) & 0xff;\n            // eslint-disable-next-line no-bitwise\n            const b = colorCode & 0xff;\n            return (r * 299 + g * 587 + b * 114) / 1000;\n        }\n\n        getColorGray(x) {\n            let r = Math.floor(x / 0x1000000) % 256, // Red.\n                g = Math.floor(x / 0x10000) % 256, // Green.\n                b = Math.floor(x / 0x100) % 256, // Blue.\n                yiq = (r * 299) + g * 587 + b * 114,\n                m = 255 * 299 + 255 * 587 + 255 * 114,\n                gray = Math.round(yiq * 255 / m);\n\n            return (gray * 0x10000) + (gray * 0x100) + gray;\n        }\n\n        /**\n         * Returns a contrasting color (black or white) based on brightness.\n         * @param {Number} colorCode - The color code.\n         * @returns {string} \"#000000\" or \"#FFFFFF\".\n         */\n        getContrastingColor(colorCode) {\n            // eslint-disable-next-line no-bitwise\n            const r = (colorCode >> 16) & 0xff;\n            // eslint-disable-next-line no-bitwise\n            const g = (colorCode >> 8) & 0xff;\n            // eslint-disable-next-line no-bitwise\n            const b = colorCode & 0xff;\n            const brightness = (r * 299 + g * 587 + b * 114) / 1000;\n            return brightness >= 128 ? \"#000000\" : \"#FFFFFF\";\n        }\n\n        /**\n         * Repairs <p> tags in a string by cleaning up unnecessary tags.\n         * @param {string} text - The input string with potential <p> tags.\n         * @returns {string} The cleaned-up string.\n         */\n        repairP(text) {\n            if (!text) {\n                return '';\n            }\n            return text.replace(/<p[^>]*>/g, '').replace(/<\\/p>/g, '<br>').trim();\n        }\n\n        /**\n         * Finds the best value based on a condition.\n         * @param {number} low - The lower bound.\n         * @param {number} high - The upper bound.\n         * @param {function} condition - A condition to evaluate.\n         */\n        findbest(low, high, condition) {\n            while (high - low > 1) {\n                const mid = Math.floor((low + high) / 2);\n                if (condition(mid)) {\n                    high = mid;\n                } else {\n                    low = mid;\n                }\n            }\n\n            return low;\n        }\n\n        removeDivMessage() {\n            if (this.divMessage !== undefined) {\n                this.body.removeChild(this.divMessage);\n                this.divMessage = undefined;\n            }\n            if (this.divMessageHelp !== undefined) {\n                this.body.removeChild(this.divMessageHelp);\n                this.divMessageHelp = undefined;\n            }\n            if (this.divMessageBackground !== undefined) {\n                this.divMessageBackground.remove();\n                this.divMessageBackground = undefined;\n            }\n        }\n\n        disableButtons(buttons, disabled) {\n            for (let i = 0; i < buttons.length; i++) {\n                let btn = buttons[i];\n                if (btn !== undefined) {\n                    if (disabled) {\n                        btn.classList.add(\"mmogame_imgbutton_disabled\");\n                    } else {\n                        btn.classList.remove(\"mmogame_imgbutton_disabled\");\n                    }\n                }\n            }\n        }\n\n        repairNickname(nickname) {\n            if (nickname === undefined) {\n                return '';\n            }\n\n            let s = nickname;\n            if (s !== '') {\n                while (s.indexOf('_') !== -1) {\n                    s = s.replace('_', ' ');\n                }\n            }\n\n            return s;\n        }\n\n        showColorPalette(canvas, colors) {\n            let ctx = canvas.getContext(\"2d\");\n            let width = canvas.width;\n            let height = canvas.height;\n            let strip = width / 5;\n\n            // Sort colors based on their contrast value using an arrow function\n            colors.sort((a, b) => this.getContrast(a) - this.getContrast(b));\n\n            for (let i = 0; i < 5; i++) {\n                ctx.fillStyle = this.getColorHex(colors[i]);\n                ctx.fillRect(i * strip, 0, (i + 1) * strip, height);\n            }\n\n            ctx.strokeStyle = \"#FFFFFF\";\n            ctx.lineWidth = 1;\n            ctx.strokeRect(0, 0, width, height);\n        }\n\n        setColorsString(s) {\n            let colors = [0x9B7ED9, 0x79F2F2, 0x67BF5A, 0xD0F252, 0xBF5B21];\n            if (s !== undefined && s.length >= 0) {\n                let b = s.split(\",\");\n                if (b.length === 5) {\n                    colors = [];\n                    for (let i = 0; i < 5; i++) {\n                        colors[i] = parseInt(b[i]);\n                    }\n                }\n            }\n\n            this.setColors(this.sortColors(colors));\n        }\n\n        sortColors(colors) {\n            return colors.sort((a, b) => this.getContrast(a) - this.getContrast(b));\n        }\n\n        computeDifClock(time, timeStart, timeClose) {\n            if (time !== undefined) {\n                this.difClock = ((new Date()).getTime() - time) / 1000;\n            }\n\n            this.computeTimeStartClose(timeStart, timeClose);\n        }\n\n        computeTimeStartClose(timeStart, timeClose) {\n            if (timeStart !== undefined) {\n                this.timestart = parseInt(timeStart) !== 0 ? parseInt(timeStart) + this.difClock : 0;\n                this.timeclose = parseInt(timeClose) !== 0 ? parseInt(timeClose) + this.difClock : 0;\n            } else {\n                this.timestart = 0;\n                this.timeclose = 0;\n            }\n        }\n\n        drawRadio(canvas, color1, color2) {\n            let ctx = canvas.getContext(\"2d\");\n            let size = canvas.width;\n            ctx.clearRect(0, 0, size, canvas.height);\n\n            ctx.beginPath();\n            ctx.arc(size / 2, size / 2, size / 2, 0, 2 * Math.PI, false);\n            ctx.fillStyle = this.getColorHex(color1);\n            ctx.fill();\n\n            let checked = canvas.classList.contains(\"checked\");\n            if (checked) {\n                ctx.beginPath();\n                ctx.arc(size / 2, size / 2, size / 4, 0, 2 * Math.PI, false);\n                ctx.fillStyle = this.getColorHex(color2);\n                ctx.fill();\n            }\n        }\n\n        createRadiobox(parent, size, color1, color2, checked, disabled) {\n            let canvas = document.createElement('canvas');\n            canvas.style.position = \"absolute\";\n            canvas.width = size;\n            canvas.height = size;\n            parent.appendChild(canvas);\n            if (checked) {\n                canvas.classList.add(\"checked\");\n            }\n            if (disabled) {\n                canvas.classList.add(\"disabled\");\n            }\n\n            this.drawRadio(canvas, disabled ? color1 : 0xFFFFFF, color2);\n\n            return canvas;\n        }\n\n        createImageButton(parent, classnames, left, top, width, height, filename) {\n            const imgButton = this.createImage(parent, classnames, left, top, width, height, filename);\n            imgButton.style.cursor = 'pointer';\n            return imgButton;\n        }\n\n        createDivColor(parent, classnames, left, top, width, height, color) {\n            const colorDiv = this.createDiv(parent, classnames, left, top, width, height);\n            colorDiv.style.backgroundColor = color;\n            colorDiv.style.border = '1px solid #000';\n            return colorDiv;\n        }\n\n        /**\n         * Retrieves localized strings.\n         * @param {string} name - The name of the string.\n         * @returns {string} The localized string.\n         */\n        getStringM(name) {\n            return M.util.get_string(name, 'mmogame');\n        }\n\n        /**\n         * Retrieves user options from IndexedDB.\n         * @returns {Promise<Object>} A promise that resolves with the options.\n         */\n        getOptions() {\n            return new Promise((resolve, reject) => {\n                const request = indexedDB.open('mmoGameDB', 1);\n\n                request.onupgradeneeded = function(event) {\n                    const db = event.target.result;\n                    if (!db.objectStoreNames.contains('options')) {\n                        db.createObjectStore('options', {keyPath: 'name'});\n                    }\n                };\n\n                request.onsuccess = function(event) {\n                    const db = event.target.result;\n                    const transaction = db.transaction(['options'], 'readonly');\n                    const store = transaction.objectStore('options');\n\n                    const getAllRequest = store.getAll();\n\n                    getAllRequest.onsuccess = function(event) {\n                        resolve(event.target.result.reduce((acc, item) => {\n                            acc[item.name] = item.value;\n                            return acc;\n                        }, {}));\n                    };\n\n                    getAllRequest.onerror = function() {\n                        reject(new Error('Failed to retrieve options'));\n                    };\n                };\n\n                request.onerror = function() {\n                    reject(new Error('Failed to open database'));\n                };\n            });\n        }\n\n        /**\n         * Saves user options to IndexedDB.\n         * @param {Object} options - The options to save.\n         * @returns {Promise<void>} A promise that resolves when the save is complete.\n         */\n        async setOptions(options) {\n            try {\n                const db = await this.openDatabase();\n                const transaction = db.transaction('options', 'readwrite');\n                const store = transaction.objectStore('options');\n                Object.entries(options).forEach(([key, value]) => store.put({name: key, value}));\n                await transaction.complete;\n            } catch (error) {\n                this.showError('Failed to save options:', error);\n            }\n        }\n\n        // Open IndexedDB connection\n        openDatabase() {\n            return new Promise((resolve, reject) => {\n                const request = indexedDB.open('mmoGameDB', 1);\n\n                request.onupgradeneeded = (event) => {\n                    const db = event.target.result;\n                    if (!db.objectStoreNames.contains('options')) {\n                        db.createObjectStore('options', {keyPath: 'name'});\n                    }\n                };\n\n                request.onsuccess = (event) => resolve(event.target.result);\n                request.onerror = (event) => reject(event.target.error);\n            });\n        }\n        clearDB(url) {\n            let options = {nickname: ''};\n            this.setOptions(options)\n                .then(function() {\n                    window.location.href = url;\n                    return true;\n                })\n                .catch(() => {\n                    return false;\n                });\n        }\n\n        debounce(func, delay) {\n            let timer;\n            return function(...args) {\n                clearTimeout(timer);\n                timer = setTimeout(() => func.apply(this, args), delay);\n            };\n        }\n\n        /**\n         * Displays an error message on the screen.\n         * @param {string} name - The name of the error context.\n         * @param {Error} [error] - The error object to display.\n         */\n        showError(name, error) {\n            return name + error;\n        }\n\n        setColors(colors) {\n            this.colorBackground = colors[0];\n            this.body.style.backgroundColor = this.getColorHex(this.colorBackground);\n        }\n    };\n});"],"names":["define","state","body","minFontSize","maxFontSize","fontSize","iconSize","padding","cIcons","area","colorBackground","timestart","timeclose","constructor","this","kindSound","document","getElementsByTagName","setColorsString","size","parseFloat","window","getComputedStyle","documentElement","getPropertyValue","createDOMElement","tag","parent","classnames","styles","attributes","arguments","length","undefined","element","createElement","classList","add","split","Object","assign","style","entries","forEach","_ref","key","value","setAttribute","appendChild","createDiv","left","top","width","height","position","createImage","filename","draggable","src","createButton","alt","role","computeSizes","Math","max","maxIconWidth","innerWidth","maxIconHeight","innerHeight","min","adjustment","round","createCenterImageButton","classname","button","img","Image","onload","mul","w","h","hasHelp","clearBodyChildren","child","removeDivMessage","firstChild","removeChild","openGame","autoResizeText","item","wrap","text","innerHTML","toString","tempDiv","visibility","whiteSpace","low","up","fitSize","fitHeight","newHeight","newWidth","step","scrollHeight","scrollWidth","abs","pad","num","s","uuid4","uuid","Array","map","floor","random","parseInt","user","join","options","userGUID","setOptions","then","catch","error","showError","message","getCopyrightHeight","getColorHex","colorCode","padStart","toUpperCase","getContrast","getColorGray","x","yiq","gray","getContrastingColor","repairP","replace","trim","findbest","high","condition","mid","divMessage","divMessageHelp","divMessageBackground","remove","disableButtons","buttons","disabled","i","btn","repairNickname","nickname","indexOf","showColorPalette","canvas","colors","ctx","getContext","strip","sort","a","b","fillStyle","fillRect","strokeStyle","lineWidth","strokeRect","setColors","sortColors","computeDifClock","time","timeStart","timeClose","difClock","Date","getTime","computeTimeStartClose","drawRadio","color1","color2","clearRect","beginPath","arc","PI","fill","contains","createRadiobox","checked","createImageButton","imgButton","cursor","createDivColor","color","colorDiv","backgroundColor","border","getStringM","name","M","util","get_string","getOptions","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","db","target","result","objectStoreNames","createObjectStore","keyPath","onsuccess","getAllRequest","transaction","objectStore","getAll","reduce","acc","onerror","Error","openDatabase","store","_ref2","put","complete","clearDB","url","location","href","debounce","func","delay","timer","_len","args","_key","clearTimeout","setTimeout","apply"],"mappings":"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"}