{"version":3,"file":"mmogametypequiz.min.js","sources":["../src/mmogametypequiz.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['mod_mmogame/mmogameui'], function(MmoGameUI) {\n    return class MmoGameTypeQuiz extends MmoGameUI {\n        kinduser;\n        user;\n        url;\n        pin;\n        labelTimer;\n        timeForSendAnswer;\n        // DivDefinition;\n        // DefinitionHeight;\n\n        /**\n         * Base class for Quiz mmmogame\n         *\n         * @module mmogametype_quiz\n         * @copyright 2024 Vasilis Daloukas\n         * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n         */\n\n        constructor() {\n            super();\n            this.hideSubmit = false;\n            this.timeForSendAnswer = 10000;\n        }\n\n        /**\n         * Initializes the game by loading required audio assets.\n         */\n        openGame() {\n            super.openGame(); // Call the parent class method\n\n            // Load sound effects\n            this.audioYes = new Audio('assets/yes1.mp3');\n            this.audioYes.load();\n            this.audioNo = new Audio('assets/no1.mp3');\n            this.audioNo.load();\n        }\n\n        /**\n         * Processes the response for a game attempt, updating the state and UI.\n         *\n         * @param {Object} json - The server response containing attempt data.\n         */\n        /*\n        processGetAttempt(json) {\n            // Calculate time difference and set up the clock\n            this.computeDifClock(json.time, json.timestart, json.timeclose);\n\n            // Set colors if provided\n            if (json.colors) {\n                this.setColorsString(json.colors);\n                this.createIconBar(); // Initialize the top bar with icons\n            }\n\n            // Update the window title if a name is provided\n            if (json.name) {\n                document.title = json.name;\n            }\n\n            // Set help URL if available\n            if (json.helpurl) {\n                this.helpUrl = json.helpurl;\n            }\n\n            // Handle error messages from the server\n            if (json.errorcode) {\n                this.createDivMessage('mmogame-error', json.errorcode);\n                return;\n            }\n\n            // Update game state and user-related data\n            this.state = parseInt(json.state, 10);\n            this.fastjson = json.fastjson;\n            this.timefastjson = parseInt(json.timefastjson, 10);\n            this.updateButtonsAvatar(1, this.avatarElement, this.nicknameElement, json.avatar, json.nickname, this.iconSize,\n                Math.round(this.iconSize / 3));\n\n            this.attempt = json.attempt;\n\n            // Process question type and answers\n            this.qtype = json.qtype;\n            if (this.qtype === 'multichoice') {\n                this.answers = [];\n                this.answersID = json.answerids;\n                json.answers.forEach((answer, index) => {\n                    this.answers[index] = this.repairP(answer); // Process each answer\n                });\n            }\n            this.answer = json.answer ?? undefined;\n\n            // Handle end-of-game scenarios\n            this.endofgame = json.endofgame !== undefined && json.endofgame !== 0;\n            this.definition = this.repairP(json.definition);\n            this.errorcode = json.errorcode;\n\n            if (json.state !== 0) {\n                this.createScreen(json, false);\n            }\n\n            this.updateLabelTimer(); // Start or update the timer\n            this.sendFastJSON(); // Send fast JSON updates\n        }*/\n/*\n        updateLabelTimer() {\n            // Exit if labelTimer or timeclose are undefined\n            if (!this.labelTimer || !this.timeclose) {\n                return;\n            }\n\n            // Calculate the remaining time in seconds\n            const now = Date.now() / 1000; // Get current time in seconds\n            let remainingTime = Math.max(0, this.timeclose - now);\n\n            // If no time is remaining, clear the label and handle timeout\n            if (remainingTime === 0) {\n                this.labelTimer.innerHTML = '';\n                this.onTimeout();\n                return;\n            }\n\n            // Format the remaining time as mm:ss\n            const minutes = Math.floor(remainingTime / 60);\n            const seconds = String(Math.floor(remainingTime % 60)).padStart(2, '0');\n            this.labelTimer.innerHTML = `${minutes}:${seconds}`;\n\n            // Set a timeout to update the timer every 500ms\n            this.timerTimeout = setTimeout(() => this.updateLabelTimer(), 500);\n        }\n*/\n        /**\n         * Handles the timeout scenario by disabling inputs and sending timeout data.\n         */\n        onTimeout() {\n            this.labelTimer.innerHTML = ''; // Clear the timer display\n            this.disableInput(); // Prevent further user input\n            this.sendTimeout(); // Notify the server about the timeout\n        }\n\n        /**\n         * Creates a vertical layout for the quiz screen.\n         *\n         * @param {boolean} disabled - Whether user input should be disabled.\n         */\n        createScreenVertical(disabled) {\n            const nickNameHeight = Math.round(this.iconSize / 3) + this.padding;\n            let maxHeight = this.areaHeight - 4 * this.padding - nickNameHeight;\n\n            if (!this.hideSubmit) {\n                maxHeight -= this.iconSize; // Reserve space for the submit button\n            }\n\n            const maxWidth = this.areaWidth;\n\n            // Dynamically adjust font size to fit content within constraints\n            this.fontSize = this.findbest(this.minFontSize, this.maxFontSize, (fontSize) => {\n                const defSize = this.createDefinition(0, 0, maxWidth - 1, true, fontSize);\n                if (defSize[0] >= maxWidth) {\n                    return 1;\n                }\n\n                const ansSize = this.createAnswer(0, 0, maxWidth - 1, true, fontSize, disabled);\n                return defSize[1] + ansSize[1] < maxHeight ? -1 : 1;\n            });\n\n            this.radioSize = Math.round(this.fontSize);\n            const defSize = this.createDefinition(0, 0, maxWidth, false, this.fontSize);\n\n            // Position answers below the definition\n            this.nextTop = this.createAnswer(0, defSize[1] + this.padding, maxWidth, false, this.fontSize, disabled);\n\n            if (!this.hideSubmit) {\n                // Create and position the submit button\n                const space = (this.areaWidth - this.iconSize) / 2;\n                this.btnSubmit = this.createImageButton(\n                    this.area,\n                    'mmogame-quiz-submit',\n                    space,\n                    this.nextTop,\n                    0,\n                    this.iconSize,\n                    'assets/submit.svg',\n                    false,\n                    'submit'\n                );\n                this.btnSubmit.addEventListener('click', () => {\n                    this.area.removeChild(this.btnSubmit);\n                    this.btnSubmit = undefined;\n                    this.sendAnswer();\n                });\n            }\n\n            // Adjust strip dimensions\n            this.stripLeft = this.padding;\n            this.stripWidth = 2 * this.iconSize;\n            this.stripHeight = this.iconSize;\n        }\n\n        createAnswer(left, top, width, onlyMetrics, fontSize, disabled) {\n            return this.createAnswerMultichoice(left, top, width, onlyMetrics, fontSize, disabled);\n        }\n\n        /**\n         * Creates multiple-choice answer options.\n         *\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} width - The maximum width available for answers.\n         * @param {boolean} onlyMetrics - Whether to only calculate size metrics.\n         * @param {number} fontSize - The font size for answer text.\n         * @param {boolean} disabled - Whether the answers are disabled.\n         * @returns {number} The total height used by the answer options.\n         */\n        createAnswerMultichoice(left, top, width, onlyMetrics, fontSize, disabled) {\n            const n = this.answers ? this.answers.length : 0;\n            const aChecked = this.answer?.split(\",\").filter(Boolean) || [];\n            const retSize = [0, 0];\n            const checkboxSize = Math.round(fontSize);\n            this.aItemAnswer = Array(n);\n            this.aItemLabel = Array(n);\n            this.aItemCorrectX = new Array(n);\n\n            // Iterate over each answer\n            for (let i = 0; i < n; i++) {\n                const label = document.createElement(\"label\");\n                label.style.position = \"absolute\";\n                label.style.width = `${width}px`;\n                label.style.fontSize = `${fontSize}px`;\n                label.style.color = this.getContrastingColor(this.colorBackground);\n                label.innerHTML = this.answers[i];\n                label.classList.add('mmogame-quiz-multichoice-label');\n\n                if (onlyMetrics) {\n                    this.area.appendChild(label);\n                    const newSize = label.scrollWidth + fontSize + this.padding;\n                    retSize[0] = Math.max(retSize[0], newSize);\n                    retSize[1] += Math.max(label.scrollHeight, fontSize) + this.padding;\n                    this.area.removeChild(label);\n                    continue;\n                }\n\n                label.htmlFor = \"mmogame_quiz_input\" + i;\n                label.style.left = (left + fontSize + this.padding) + \"px\";\n                label.style.top = top + \"px\";\n                label.style.align = \"left\";\n                label.style.color = this.getContrastingColor(this.colorBackground);\n\n                // Create the checkbox\n                const checked = aChecked.includes(this.answersID[i]);\n                const item = this.createRadiobox(this.body, checkboxSize, this.colorBackground2, this.colorScore,\n                    checked, disabled);\n                item.style.position = \"absolute\";\n                item.style.left = `${left}px`;\n                item.style.top = `${top}px`;\n                item.id = \"mmogame_quiz_input\" + i;\n\n                // Event listeners for interactions\n                item.addEventListener('click', () => {\n                    if (!item.classList.contains(\"disabled\")) {\n                        this.onClickRadio(i, this.colorBackground2, this.colorScore, true);\n                    }\n                });\n\n                label.addEventListener('click', () => {\n                    this.onClickRadio(i, this.colorBackground2, this.colorScore, true);\n                });\n\n                this.area.appendChild(item);\n                this.area.appendChild(label);\n\n                this.aItemAnswer[i] = item;\n                this.aItemCorrectX[i] = left + fontSize + this.padding;\n                this.aItemLabel[i] = label;\n\n                // Adjust positioning\n                top += Math.max(label.scrollHeight, fontSize) + this.padding;\n            }\n\n            return onlyMetrics ? retSize : top;\n        }\n\n        /**\n         * Handles radio button click events for answers.\n         *\n         * @param {number} index - The index of the clicked radio button.\n         * @param {string} colorBack - The background color for the radio button.\n         * @param {string} color - The color for the radio button when selected.\n         * @param {boolean} callSendAnswer - Whether to send the answer immediately.\n         */\n        onClickRadio(index, colorBack, color, callSendAnswer) {\n            if (this.aItemAnswer[index].classList.contains(\"disabled\")) {\n                return;\n            }\n\n            // Update the selected radio button and deselect others\n            this.aItemAnswer.forEach((item, i) => {\n                const isDisabled = item.classList.contains(\"disabled\");\n                if (i === index) {\n                    item.classList.add(\"checked\");\n                    this.answerid = this.answersID[i];\n                } else {\n                    item.classList.remove(\"checked\");\n                }\n\n                this.drawRadio(item, isDisabled ? colorBack : 0xFFFFFF, color);\n            });\n\n            // Send the answer if autosave is enabled\n            if (this.autosave && callSendAnswer) {\n                this.callSetAnswer();\n            }\n        }\n\n        sendTimeout() {\n            let xmlhttp = new XMLHttpRequest();\n            xmlhttp.onreadystatechange = () => {\n                if (this.readyState === 4 && this.status === 200) {\n                    this.sendGetAttempt();\n                }\n            };\n            xmlhttp.open(\"POST\", this.url, true);\n\n            xmlhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n            let data = JSON.stringify({\n                \"command\": \"timeout\", \"mmogameid\": this.mmogameid, \"pin\": this.pin, 'kinduser': this.kinduser,\n                \"user\": this.user, \"attempt\": this.attempt\n            });\n            xmlhttp.send(data);\n        }\n\n        /**\n         * Generates an SVG for a correct or incorrect icon.\n         *\n         * @param {number} size - The size of the SVG.\n         * @param {boolean} iscorrect - Whether the answer is correct.\n         * @param {int} colorCorrect - Color for correct answers.\n         * @param {int} colorError - Color for incorrect answers.\n         * @returns {string} The SVG markup as a string.\n         */\n        getSVGcorrect(size, iscorrect, colorCorrect, colorError) {\n            if (iscorrect) {\n                let c = colorCorrect !== undefined ? this.getColorHex(colorCorrect) : '#398439';\n                return \"<svg aria-hidden=\\\"true\\\" class=\\\"svg-icon iconCheckmarkLg\\\" width=\\\"\" + size + \"\\\" height=\\\"\" + size +\n                    \"\\\" viewBox=\\\"0 0 36 36\\\"><path fill=\\\"\" + c + \"\\\" d=\\\"m6 14 8 8L30 6v8L14 30l-8-8v-8z\\\"></path></svg>\";\n            } else {\n                let c = colorError !== undefined ? this.getColorHex(colorError) : '#398439';\n                return \"<svg width=\\\"\" + size + \"\\\" height=\\\"\" + size +\n                    \"\\\" class=\\\"bi bi-x-lg\\\" viewBox=\\\"0 0 18 18\\\"> <path fill=\\\"\" + c +\n                    `\" d=\"M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 \n                1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z\"/></svg>`;\n            }\n        }\n\n\n        /**\n         * Updates the screen to show the correctness of the user's answers.\n         */\n        updateScreenAfterAnswerMultichoice() {\n            const correctAnswers = this.correct.split(\",\"); // Split correct answer IDs into an array\n\n            for (let i = 0; i < this.answersID.length; i++) {\n                const label = this.aItemLabel[i];\n                const isChecked = this.aItemAnswer[i].classList.contains(\"checked\");\n                const isCorrect = correctAnswers.includes(this.answersID[i]);\n\n                // Skip answers that are neither checked nor correct\n                if (!isCorrect && !isChecked) {\n                    continue;\n                }\n\n                // Adjust label styling and add correct/incorrect icon\n                const labelWidth = label.scrollWidth - this.radioSize;\n                label.style.left = `${parseInt(label.style.left) + this.radioSize}px`;\n                label.style.width = `${labelWidth}px`;\n\n                if (isCorrect) {\n                    label.innerHTML = `<b>${label.innerHTML}</b>`;\n                }\n\n                const top = parseInt(this.aItemAnswer[i].style.top);\n                const feedbackDiv = this.createDiv(this.area, 'mmogame-quiz-correct',\n                    this.aItemCorrectX[i], top, this.radioSize, this.radioSize);\n                feedbackDiv.innerHTML = this.getSVGcorrect(this.radioSize, isCorrect, this.colorScore, this.colorScore);\n            }\n        }\n\n        /**\n         * Disables all answer inputs to prevent further interaction.\n         */\n        disableInput() {\n            if (!this.aItemAnswer) {\n                return;\n            }\n\n            for (const item of this.aItemAnswer) {\n                item.classList.add(\"disabled\"); // Add 'disabled' class to each input\n                this.drawRadio(item, this.colorScore, this.colorBackground2); // Update styling\n            }\n        }\n        /**\n         * Sends periodic fast JSON updates to the server.\n         */\n        sendFastJSON() {\n            // Clear existing timeout if any\n            if (this.timeoutFastJSON !== undefined) {\n                clearTimeout(this.timeoutFastJSON);\n            }\n\n            this.timeoutFastJSON = setTimeout(() => {\n                const xhr = new XMLHttpRequest();\n                xhr.onreadystatechange = () => {\n                    this.timeoutFastJSON = undefined;\n                    if (xhr.readyState === 4 && xhr.status === 200) {\n                        this.onServerFastJson(xhr.response);\n                    }\n                };\n\n                const url = `${this.url}/state.php`;\n                xhr.open(\"POST\", url, true);\n\n                const data = new FormData();\n                data.set('fastjson', this.fastjson);\n                data.set('type', this.type);\n\n                xhr.send(data); // Send the fast JSON data\n            }, this.timeForSendAnswer);\n        }\n\n        onClickHelp() {\n            if (this.helpUrl !== '') {\n                window.open(this.helpUrl, \"_blank\");\n            }\n        }\n\n        getStringT(name) {\n            return M.util.get_string(name, 'mmogametype_quiz');\n        }\n\n        /**\n         * Creates a percentage-based score display using createDOMElement.\n         *\n         * @param {string} prefixclassname\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} color\n         * @param {boolean} createAddScore\n         */\n        createDivScorePercent(prefixclassname, left, top, color, createAddScore) {\n            // Create the main button container\n            this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${prefixclassname}-main`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize}px`,\n                    height: `${this.iconSize}px`,\n                    border: \"0px solid \" + this.getColorHex(0xFFFFFF),\n                    boxShadow: \"inset 0 0 0.125em rgba(255, 255, 255, 0.75)\",\n                    color: color,\n                },\n                attributes: {\n                    disabled: true,\n                    innerHTML: '',\n                },\n            });\n\n            // Create the main score label\n            const scoreLabel = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${prefixclassname}-score`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top + this.iconSize / 4}px`,\n                    width: `${this.iconSize / 2}px`,\n                    height: `${this.iconSize / 2}px`,\n                    lineHeight: `${this.iconSize / 2}px`,\n                    textAlign: 'center',\n                    color: this.getContrastingColor(this.colorScore),\n                },\n                attributes: {\n                    title: this.getStringM('js_grade'),\n                },\n            });\n\n            // Create the ranking grade label\n            const rankLabel = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${prefixclassname}-rank`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize / 2}px`,\n                    height: `${this.iconSize / 3}px`,\n                    textAlign: 'center',\n                    color: this.getContrastingColor(this.colorScore),\n                },\n                attributes: {\n                    title: this.getStringM('js_ranking_grade'),\n                },\n            });\n\n            // Create the percentage label\n            const percentLabel = this.createDOMElement('div', {\n                parent: this.body,\n                classnames: `${prefixclassname}-percent`,\n                styles: {\n                    position: 'absolute',\n                    left: `${left + this.iconSize / 2}px`,\n                    top: `${top}px`,\n                    width: `${this.iconSize / 2}px`,\n                    height: `${this.iconSize / 3}px`,\n                    textAlign: 'center',\n                    fontSize: `${this.iconSize / 3}px`,\n                    lineHeight: `${this.iconSize / 3}px`,\n                    color: rankLabel.style.color,\n                },\n                attributes: {\n                    title: this.getStringM('js_ranking_percent'),\n                },\n            });\n\n            // Create the additional score label\n            let addScoreLabel = null;\n            if (createAddScore) {\n                addScoreLabel = this.createDOMElement('div', {\n                    parent: this.body,\n                    classnames: `${prefixclassname}-addscore`,\n                    styles: {\n                        position: 'absolute',\n                        left: `${left + this.iconSize / 2}px`,\n                        top: `${top + this.iconSize - this.iconSize / 3}px`,\n                        width: `${this.iconSize / 2}px`,\n                        height: `${this.iconSize / 3}px`,\n                        textAlign: 'center',\n                        fontWeight: 'bold',\n                        color: color,\n                    },\n                    attributes: {\n                        title: this.getStringM('js_percent'),\n                    },\n                });\n            }\n\n            return [scoreLabel, rankLabel, percentLabel, addScoreLabel];\n        }\n\n        /**\n         * Creates and displays the definition area for the question.\n         *\n         * @param {number} left - The left position in pixels.\n         * @param {number} top - The top position in pixels.\n         * @param {number} width - The width of the definition area.\n         * @param {boolean} onlyMetrics - Whether to only measure size.\n         * @param {number} fontSize - The font size for the definition text.\n         * @param {string} definition\n         * @returns {Array} The width and height of the definition area.\n         */\n        createDefinition(left, top, width, onlyMetrics, fontSize, definition) {\n            const adjustedWidth = width - 2 * this.padding;\n\n            const definitionDiv = this.createDOMElement(\n                'div',\n                {\n                    classnames: 'mmogame-quiz-definition',\n                    styles: {\n                        position: 'absolute',\n                        width: `${adjustedWidth}px`,\n                        fontSize: `${fontSize}px`,\n                    }\n                }\n            );\n            definitionDiv.innerHTML = definition;\n\n/* A            document.createElement(\"div\");\n            definitionDiv.style.position = \"absolute\";\n            definitionDiv.style.width = `${adjustedWidth}px`;\n            definitionDiv.style.fontSize = `${fontSize}px`;\n*/\n            if (onlyMetrics) {\n                document.body.appendChild(definitionDiv);\n\n                const size = [definitionDiv.scrollWidth, definitionDiv.scrollHeight];\n\n                document.body.removeChild(definitionDiv);\n                return size;\n            }\n\n            // Apply styling and position\n            definitionDiv.style.background = this.getColorHex(this.colorBackground2);\n            definitionDiv.style.color = this.getContrastingColor(this.colorBackground2);\n            definitionDiv.style.left = `${left}px`;\n            definitionDiv.style.top = `${top}px`;\n            definitionDiv.style.padding = `0 ${this.padding}px`;\n\n            this.area.appendChild(definitionDiv);\n\n            // Const height = definitionDiv.scrollHeight + this.padding;\n            // DefinitionDiv.style.height = `${height}px`;\n\n            return [definitionDiv.scrollWidth, definitionDiv.scrollHeight];\n        }\n\n\n        /**\n         * Displays the current score and ranking on the screen.\n         *\n         * @param {Object} scoreData - The data containing score, rank, and percentages.\n         * @param {string} scoreData.addscore\n         * @param {int} scoreData.completedrank\n         * @param {int} scoreData.percentcompleted\n         * @param {int} scoreData.rank\n         * @param {int} scoreData.sumscore\n         * @param {string} scoreData.usercode\n         */\n/* A\n        showScore({addscore, completedrank, percentcompleted, rank, sumscore, usercode}) {\n            // Update total score display\n            const scoreText = sumscore !== undefined ? `<b>${sumscore}</b>` : '';\n            if (this.labelScore.innerHTML !== scoreText) {\n                this.labelScore.innerHTML = scoreText;\n                this.autoResizeText(this.labelScore, this.iconSize - 2 * this.padding, this.iconSize / 2, false, 0, 0, 1);\n            }\n\n            // Update rank display\n            if (this.labelScoreRank.innerHTML !== rank) {\n                this.labelScoreRank.innerHTML = rank || '';\n                this.autoResizeText(this.labelScoreRank, this.iconSize, this.iconSize / 3, true, 0, 0, 1);\n            }\n\n            // Update document title if applicable\n            if (usercode !== undefined) {\n                document.title = `${usercode} ${name || ''}`;\n            }\n\n            // Update additional score\n            const addScoreText = addscore !== undefined ? addscore : '';\n            if (this.labelAddScore.innerHTML !== addScoreText) {\n                this.labelAddScore.innerHTML = addScoreText;\n                this.autoResizeText(this.labelAddScore, this.iconSize - 2 * this.padding, this.iconSize / 3, false, 0, 0, 1);\n            }\n\n            // Update completed rank display\n            if (this.labelScoreRankB.innerHTML !== completedrank) {\n                this.labelScoreRankB.innerHTML = completedrank || '';\n                this.autoResizeText(this.labelScoreRankB, 0.9 * this.iconSize / 2, this.iconSize / 3, true, 0, 0, 1);\n            }\n\n            // Update percentage completed\n            const percentageText = percentcompleted !== undefined ? `${Math.round(100 * percentcompleted)}%` : '';\n            if (this.labelScoreB.innerHTML !== percentageText) {\n                this.labelScoreB.innerHTML = percentageText;\n                this.autoResizeText(this.labelScoreB, 0.8 * this.iconSize / 2, this.iconSize / 3, true, 0, 0, 1);\n            }\n        }\n*/\n        /**\n         * Sends the selected answer to the server using Moodle's AJAX API.\n         */\n        callSetAnswer() {\n            // Clear existing timeout\n            if (this.timerTimeout !== undefined) {\n                clearTimeout(this.timerTimeout);\n            }\n\n            this.timerTimeout = undefined;\n\n            require(['core/ajax'], (Ajax) => {\n                const params = {\n                    mmogameid: this.mmogameid,\n                    kinduser: this.kinduser,\n                    user: this.user,\n                    attempt: this.attempt,\n                    answer: this.answer || null,\n                    answerid: this.answerid || null,\n                    subcommand: '',\n                };\n\n                Ajax.call([{\n                    methodname: 'mmogametype_quiz_set_answer', // API endpoint\n                    args: params,\n                }])[0].done((response) => {\n                    this.processSetAnswer(JSON.parse(response)); // Process the server's response\n                }).fail((error) => {\n                    this.showError(error); // Handle errors\n                });\n            });\n        }\n\n        /**\n         * Sets the colors for different UI elements and repairs them if necessary.\n         *\n         * @param {Array} colors - Array of color codes to be applied.\n         */\n        setColors(colors) {\n            super.setColors(colors);\n\n            // Assign specific colors to UI elements\n            this.colorScore = colors[2];\n            this.colorCopyright = colors[3];\n            this.colorScore2 = colors[4];\n        }\n    };\n    });"],"names":["define","MmoGameUI","kinduser","user","url","pin","labelTimer","timeForSendAnswer","constructor","super","this","hideSubmit","openGame","audioYes","Audio","load","audioNo","onTimeout","innerHTML","disableInput","sendTimeout","createScreenVertical","disabled","nickNameHeight","Math","round","iconSize","padding","maxHeight","areaHeight","maxWidth","areaWidth","fontSize","findbest","minFontSize","maxFontSize","defSize","createDefinition","ansSize","createAnswer","radioSize","nextTop","space","btnSubmit","createImageButton","area","addEventListener","removeChild","undefined","sendAnswer","stripLeft","stripWidth","stripHeight","left","top","width","onlyMetrics","createAnswerMultichoice","n","answers","length","aChecked","answer","split","filter","Boolean","retSize","checkboxSize","aItemAnswer","Array","aItemLabel","aItemCorrectX","i","label","document","createElement","style","position","color","getContrastingColor","colorBackground","classList","add","appendChild","newSize","scrollWidth","max","scrollHeight","htmlFor","align","checked","includes","answersID","item","createRadiobox","body","colorBackground2","colorScore","id","contains","onClickRadio","index","colorBack","callSendAnswer","forEach","isDisabled","answerid","remove","drawRadio","autosave","callSetAnswer","xmlhttp","XMLHttpRequest","onreadystatechange","readyState","status","sendGetAttempt","open","setRequestHeader","data","JSON","stringify","command","mmogameid","attempt","send","getSVGcorrect","size","iscorrect","colorCorrect","colorError","getColorHex","updateScreenAfterAnswerMultichoice","correctAnswers","correct","isChecked","isCorrect","labelWidth","parseInt","createDiv","sendFastJSON","timeoutFastJSON","clearTimeout","setTimeout","xhr","onServerFastJson","response","FormData","set","fastjson","type","onClickHelp","helpUrl","window","getStringT","name","M","util","get_string","createDivScorePercent","prefixclassname","createAddScore","createDOMElement","parent","classnames","styles","height","border","boxShadow","attributes","scoreLabel","lineHeight","textAlign","title","getStringM","rankLabel","percentLabel","addScoreLabel","fontWeight","definition","adjustedWidth","definitionDiv","background","timerTimeout","require","Ajax","params","subcommand","call","methodname","args","done","processSetAnswer","parse","fail","error","showError","setColors","colors","colorCopyright","colorScore2"],"mappings":"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"}